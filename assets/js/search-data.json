{
  
    
        "post0": {
            "title": "CodeCraft: Immersive Web Development with Python and JavaScript involving 3D Objects and Animations",
            "content": "Objective: . The objective of this document is to provide comprehensive knowledge and essential methodologies for creating an interactive web platform that allows users to actively engage with 3D objexts and animations within a web page. The discussion will focus on the utilization and manipulation of front-end web development Python library Streamlit and its components. Additionally, for 3D objects and animation integration, the basics of the cross-browser JavaScript library Three.js and HTML will also be explored and explained. . Brief Introduction . How often do you use a website? Probably, regularly or very often. Secondly, Have you ever thought about the programming and the algorithms that make them work? Behind every well-functioning website, there is a team of developers who write code in languages like HTML, Python,JavaScript and more. These languages define the structure, appearance, and interactivity of web pages. . . In this blog we will learn the ways to design an interactive website using Python Library such as Streamlit and for 3D objects integrarion, we will explore the basics of the cross-browser JavaScript library Three.js and HTML. . Getting Started with Streamlit . What is Streamlit? . Streamlit is a open-source Python library that makes it easy to create web applications for machine learning and data science projects. Streamlit takes care of all the web development backend, allowing you to focus on building your application&#39;s functionality and visualizations.The backend refers to the server-side components of a web application. It involves the programming and implementation of the server logic, database operations, and other server side functionalities. . Setting up Streamlit : . To install Steamlit,in the cmd terminal that appears, type: pip install streamlit . To test if the installation worked, type: streamlit hello Streamlit Hello app should open in your web broswer. . Creating a Basic Layout of a Website Using Streamlit . The code demonstrates the creation of a basic layout for a web page as in the image above using Streamlit. Let&#39;s break down the code and explain its functionality: First of all, we import the necessary libraries for the code. streamlit is the main library for building the web page, and streamlit_option_menu is an additional library that provides enhanced menu options. . import streamlit as st from streamlit_option_menu import option_menu . With st.set_page_config(), we set the title of the web page to &quot;MY WEBSITE&quot; and specify the layout as &#39;wide&#39;. Using layout=&#39;wide&#39; expands the content area to utilize more horizontal space, resulting in a wider layout. . st.set_page_config(page_title=&#39;MY WEBSITE&#39;, layout=&#39;wide&#39;) . We use st.sidebar to create a sidebar for user interaction. Within the sidebar, we utilize the option_menu function from the streamlit_option_menu library. This function allows us to create a menu with multiple options. In this example, the menu options are &quot;Home&quot;, &quot;About Us&quot;, and &quot;Data&quot;. We can also specify icons for each option, such as &#39;house&#39;, &#39;person&#39;, and &#39;gear&#39;. The menu_icon parameter sets the icon for the entire menu, and default_index determines the initial selection. The orientation parameter is set to &#39;vertical&#39; to arrange the menu options vertically. . with st.sidebar: selected = option_menu(&quot;Menu&quot;, [&quot;Home&quot;, &quot;About Us&quot;, &#39;Data&#39;], icons=[&#39;house&#39;, &#39;person&#39;, &#39;gear&#39;], menu_icon=&quot;cast&quot;, default_index=1, orientation=&#39;vertical&#39;) selected . 2023-06-22 13:24:20.188 Warning: to view this Streamlit app on a browser, run it with the following command: streamlit run c: Users User AppData Local Programs Python Python311 Lib site-packages ipykernel_launcher.py [ARGUMENTS] . In the main content area, we check the value of the variable &#39;selected&#39; to determine which content to display. If the selected option is &quot;Home&quot;, we use st.title() to display the title &quot;3D Object and Animation&quot;. . if selected == &quot;Home&quot;: st.title(&#39;3D Objects and Animation&#39;) . Getting Started with Three.js: Creating Interactive 3D Web Experiences . What is Three.js? . Three.js is a JavaScript Library that provides a high-level interface for creating and manipulating 3D objects. It simplifies the process of rendering 3D graphics in web browsers and makes it accessible to developers with varying levels of experience. . Setting up Three.js: . To begin using Three.js, you can include the library in your project by either downloading the script or using a content delivery network (CDN). Simply add the &lt; script &gt; tag to your HTML file, and you are ready to go. Three.js is designed to work well with other programming languages and frameworks, allowing you to integrate it seamlessly into your existing projects. . &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js&quot;&gt;&lt;/script&gt; . Cell In[5], line 1 &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js&#34;&gt;&lt;/script&gt; ^ SyntaxError: invalid syntax . Creating 3D Animated Objects for a Web-page . Example Web-page with 3D Objects: . The first example involves the use of in-built Three.js geometric primitive model: Torus knot. The second example depicts the use of external 3D graphic resource for complex structural design. We begin with the HTML code and set the title of the web page to &quot;3D Objects and Animation&quot;. . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;3D Objects and Animation&lt;/title&gt; &lt;/head&gt; . Cell In[20], line 4 &lt;title&gt;3D Animation and Prototypes&lt;/title&gt; ^ SyntaxError: invalid decimal literal . Now, for the main 3D design and animation component of the code we add &lt; script&gt; tag with the URL - &quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js&quot; to download/connect with the Three.js library online. Similarly, we also add the URL - &quot;https://cdn.jsdelivr.net/npm/three/examples/js/loaders/GLTFLoader.js&quot; to allow Glb file (3D models) to be used as our first-hand static 3D graphic resource for our webpage. GLB (GLTF Binary) and GLTF (GL Transmission Format) are file formats used for 3D asset delivery and rendering in real-time applications. Common uses for glTF/Glb files include VR, AR, games, native web apps, and 3D ads. Other file extension such as FBX can also be used, but the URL inserted should be changed accordingly. However, GLTFLoader are most widely used as it is easy to work with. . Let&#39;s dive into some of the key methods and concepts in Three.js in more detail. The library offers a wide range of features and capabilities for creating complex and interactive 3D scenes. As of now, we will only discuss some of the fundamental methods and concepts in Three.js. . 1. Scene, Camera, and Renderer . In Three.js, the scene, camera, and renderer form the core components for creating and rendering a 3D scene. . Scene: The THREE.Scene class represents the 3D scene or environment where all objects, lights, and cameras are placed. You can add objects to the scene using the scene.add(object) method. Camera: The camera determines the perspective and view of the scene. Three.js provides various camera types, such as THREE.PerspectiveCamera and THREE.OrthographicCamera. The camera&#39;s position and orientation define what is visible in the scene. Renderer: The renderer, typically THREE.WebGLRenderer, is responsible for drawing the 3D scene on the web page. It takes the scene and camera as inputs and renders them using WebGL, a graphics API that provides hardware-accelerated rendering capabilities in modern web browsers. The renderer also handles aspects like anti-aliasing, sizing, and background color. . In the code scene, Camera and Renderer as set up as follows: . // Set up the scene, camera, and renderer var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); var renderer = new THREE.WebGLRenderer({ antialias: true }); renderer.setSize(window.innerWidth, window.innerHeight); renderer.setClearColor(0xffffff); // Set background color to white document.body.appendChild(renderer.domElement); . The THREE.Scene() class is used to create a new scene where all objects, lights, and cameras will be placed. The THREE.PerspectiveCamera() class is used to create a camera with a perspective projection. The parameters are the field of view, aspect ratio, near and far clipping planes. The THREE.WebGLRenderer() class is used to create a renderer that will draw the scene using WebGL. The antialias option is set to true to enable antialiasing. The setSize() method sets the size of the renderer to match the window&#39;s inner width and height. The setClearColor() method sets the background color of the scene to white. Finally, the renderer&#39;s DOM element is appended to the document body. . 2. Objects and Models . In Three.js, objects represent the entities rendered in the scene. There are various object types available, such as geometric primitives (THREE.BoxGeometry, THREE.SphereGeometry), meshes (THREE.Mesh), and more complex models loaded from external files. . Geometric Primitives: Three.js provides several built-in geometric primitives, which are defined by their geometry and material. You can create objects like boxes, spheres, cones, and cylinders using these primitives. Geometric primitives are created with a THREE.Geometry class or using the shortcut THREE.BoxGeometry, THREE.SphereGeometry, etc. Mesh: A mesh combines geometry (shape) and material (appearance) to create a renderable object. The THREE.Mesh class is used to create a mesh. You can assign different materials to a mesh, apply textures, and manipulate its position, rotation, and scale. Loading External Models: Three.js supports loading 3D models from external files, such as .obj, .gltf, or .fbx formats. The library provides loaders like THREE.OBJLoader, THREE.GLTFLoader, and THREE.FBXLoader to load models. These loaders asynchronously load the model files and provide access to the loaded object. . Rotating Torus-knot . In our first example, 3D animation of a rotating torus knot is generated: . // Create a torus knot const geometry = new THREE.TorusKnotGeometry(1, 0.4, 128, 32); const material = new THREE.MeshBasicMaterial({ color: 0x20124D, transparent: true, opacity: 1 }); // Set material to be transparent const torusKnot = new THREE.Mesh(geometry, material); scene.add(torusKnot); . A torus knot geometry is created using THREE.TorusKnotGeometry(), specifying parameters for the radius, tube diameter, tubular segments, and radial segments. The resulting geometry is assigned to the geometry variable. . A material is created using THREE.MeshBasicMaterial() with a specified color (0x20124D) and transparency settings (transparent: true, opacity: 1). The material is assigned to the material variable. . A mesh is created by combining the torus knot geometry with the material using THREE.Mesh(). The resulting mesh is assigned to the torusKnot variable and added to the scene using scene.add(). . Moving Bee . In our second example, a bee model &#39;bee.glb&#39; is loaded and added to the scene. The material in the bee model is also modified: . // Load the bee model var loader = new THREE.GLTFLoader(); loader.load(&#39;Bee.glb&#39;, function (gltf) { var bee = gltf.scene; scene.add(bee); // Set initial position and scale of the bee bee.position.set(0, 0, 0); bee.scale.set(0.1, 0.1, 0.1); // Traverse the model hierarchy to modify materials bee.traverse(function (child) { if (child.isMesh) { // Apply color to the materials child.material.color.set(0xffff00); // Set the color to yellow } }); }); . The THREE.GLTFLoader() class is used to load a glTF file containing the bee model. . The load() method is called with the path to the glTF file and a callback function that receives the loaded model (gltf). . The bee model is accessed from gltf.scene and added to the scene using scene.add(). . The position and scale of the bee model are set using bee.position.set() and bee.scale.set(). . The traverse() method is used to traverse the hierarchy of the model and modify its materials. The callback function is called for each child object, and if it is a mesh (child.isMesh), its material color is set to yellow. . 3. Lights . Lighting is crucial for creating realistic 3D scenes in Three.js. Different types of lights can be added to the scene to illuminate the objects. . Ambient Light: The THREE.AmbientLight class represents a light source that illuminates all objects equally. It simulates global illumination and provides overall ambient lighting to the scene. Directional Light: The THREE.DirectionalLight class simulates a distant light source, like the sun. It has a position but emits light in a specific direction, casting shadows and providing directional illumination. Point Light: The THREE.PointLight class represents a light source that emits light in all directions from a single point in space. It is used to simulate localized light sources, such as lamps or bulbs. Ambient Light and point light are added in our second example of an animated bee to provide realistic texture to it. . // Add ambient light var ambientLight = new THREE.AmbientLight(0xffffff, 0.5); scene.add(ambientLight); // Add a point light var pointLight = new THREE.PointLight(0xffffff, 1); pointLight.position.set(5, 5, 5); scene.add(pointLight); . The THREE.AmbientLight() class is used to create an ambient light with white color (0xffffff) and intensity of 0.5. The ambient light provides overall lighting to the scene. The THREE.PointLight() class is used to create a point light with white color and intensity of 1. The position of the point light is set using pointLight.position.set(). . 4. Animation . Animation brings life and interactivity to the 3D scene. Three.js provides a built-in animation loop and several methods to animate objects in the scene. . Animation Loop: The requestAnimationFrame() function is used to create an animation loop in Three.js. It repeatedly calls a function to update and render the scene, ensuring a smooth animation effect. Object Transformations: Three.js provides methods to manipulate an object&#39;s position, rotation, and scale over time. By modifying these properties inside the animation loop, you can create dynamic movements, rotations, and scaling effects. Keyframe Animation: Three.js also supports keyframe animation, where you define specific positions, rotations, or other properties at different points in time (keyframes). The THREE.AnimationMixer class manages keyframe animations for objects. . Rotating Torus-knot . In our first example an animated loop is created to rotate the torus-knot in x-axis and y-axis. . // Animate the torus knot function animate() { requestAnimationFrame(animate); torusKnot.rotation.x += 0.01; torusKnot.rotation.y += 0.01; renderer.render(scene, camera); } . A function named animate() is defined to handle the animation loop. It uses requestAnimationFrame() to schedule the next frame and increments the rotation of the torus knot in the x and y axes. Finally, it renders the scene with the updated rotation using renderer.render(). . Moving Bee . In our second example an animation loop is created to rotate and translate the bee model. . // Set initial camera position camera.position.z = 5; // Animation loop function animate() { requestAnimationFrame(animate); // Rotate the bee if (scene.children.length &gt; 2) { var bee = scene.children[2]; bee.rotation.y += 0.01; } // Oscillate the bee&#39;s position vertically if (bee) { bee.position.y = Math.sin(Date.now() * 0.001) * 0.2; // Adjust the amplitude and speed as desired } // Transalte the bee if (bee) { bee.position.x += 0.01; if (bee.position.x &gt; 2) { bee.position.x = -2; } } renderer.render(scene, camera); } animate(); . The requestAnimationFrame() function is used to create an animation loop by recursively calling the animate() function. . Inside the animation loop: The bee model&#39;s rotation is incremented to create a rotating effect. . The bee&#39;s position is modified to oscillate vertically based on the current time (Date.now()) and a scaling factor. . The bee&#39;s position is also translated horizontally, and if it goes beyond a certain limit, it wraps around to the other side. . Finally, the scene is rendered using renderer.render(). . Integration of Streamlit With HTML . Streamlit.Components.V1 . Streamlit.Components.V1 is a module within the Streamlit library that allows us to create custom components for your Streamlit applications. It basically, provides a way to extend the functionality of Streamlit beyond the built-in features by leveraging JavaScript, HTML and CSS. By using &#39;streamlit.components.v1&#39; we can write custom code in JavaScript and HTML to create interactive and dynamic elements that integrate seamlessly with the Streamlit application. This feature opens up a wide range of possiblities of creating specialized visualizations, custom input widgets integrating external JavaScript libraries into our Streamlit applications. . Above, we learnt the methods and created webpage layout and 3D web-content as two different code snippet. We will be creating a function to integrate these two codes to generate a single web-page. . Setting up Streamlit.Components.V1 . We start with importing necessary code dependencies : html from streamlit.components.v1, and codecs. The design_3d function is then defined, which takes the path to an HTML file (design_html) as input and renders the HTML content using the html function from Streamlit&#39;s components.v1 module. . from streamlit.components.v1 import html import codecs . def design_3d(design_html, width = 600, height= 400): d_file = codecs.open(design_html,&#39;r&#39;) page = d_file.read() html(page, width = width, height = height, scrolling = False) . The function begins by opening the HTML file specified by the design_html parameter using the codecs.open method. It reads the content of the file and assigns it to the page variable. . The function uses the stc.html function from the streamlit.components.v1 module to embed the HTML content into the Streamlit app. The stc.html function takes the following parameters: . page (string): The HTML content to be embedded. . width (int): The width of the embedded HTML content in pixels. . height (int): The height of the embedded HTML content in pixels. . scrolling (boolean, optional): Specifies whether to enable scrolling within the embedded HTML content. Defaults to False, disabling scrolling. . The full operational code is also provided below: . import streamlit as st from streamlit_option_menu import option_menu from streamlit.components.v1 import html import codecs def design_3d(design_html, width = 600, height= 400): d_file = codecs.open(design_html,&#39;r&#39;) page = d_file.read() html(page, width = width, height = height, scrolling = True) st.set_page_config(page_title=&#39;MY WEBSITE&#39;, layout=&#39;wide&#39;) # Create a sidebar with st.sidebar: #Creates a sidebar for User-Interaction selected = option_menu(&quot;Menu&quot;, [&quot;Home&quot;,&quot;About Us&quot;, &#39;Data&#39;], #set options and add icons to the menu bar icons=[&#39;house&#39;,&#39;person&#39;, &#39;gear&#39;], menu_icon=&quot;cast&quot;, default_index=1,orientation= &#39;vertical&#39;) selected # Create the main content area if selected == &quot;Home&quot;: st.title(&#39;3D Objects and Animation&#39;) design_3d(&#39;index2.html&#39;) . Conclusion . The blog-post, introduced the exciting world of immersive web development with Python, Streamlit, HTML and Three.js. Readers are encouraged to explore various 3D designs from the internet and experiment with the concepts and techniques discussed here. Embracing this approach fosters a deeper understanding of immersive web development and empowers students to deliver captivating and visually stunning web experiences. . Resources . Discover three.js, 1 Oct. 2018, . . Streamlit. GitHub - Streamlit/Streamlit: Streamlit — a Faster Way to Build and Share Data Apps. . Components API. Streamlit Docs. .",
            "url": "https://de-fellows.github.io/RexCoding/python/streamlit/javascript/threejs/2023/06/24/Web-Development-involving-3D-Objects-and-Animations.html",
            "relUrl": "/python/streamlit/javascript/threejs/2023/06/24/Web-Development-involving-3D-Objects-and-Animations.html",
            "date": " • Jun 24, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Exploring FLASK with the help of SQLALCHEMY",
            "content": "Introduction . The highlight of our exploration will be an interactive project named “Flask Social Media”. This isn’t just any project, but a fully-featured social media application, similar to the platforms you likely use every day. I chose this project because it allows us to explore the core features of Flask and SQLite while creating something tangible and functional. . Flask, for those who may not be familiar, is a micro web framework written in Python. It is known for its simplicity and flexibility, making it a popular choice for web developers worldwide. Alongside Flask, we’ll be utilizing FLASK_SQLalchemy, a FLASK extension that provides a lightweight disk-based database. This allows us to interact with a relational database in a way that is seamless and efficient, without the need for a separate server process. . The Flask Social Media project is an interactive and fully-featured social media application built using Flask and SQLite. It aims to provide functionalities similar to popular social media platforms. This project focuses on implementing the following core features: . User and post management | Following other users | Messaging | Notifications | Search function | . In addition to these features, we’ll have the opportunity to style our application using CSS, adding an aesthetic touch to the robust functionality. . Technologies Used . The project utilizes the following technologies: . Flask: A micro web framework written in Python, known for its simplicity and flexibility, making it a popular choice for web developers worldwide. | SQLAlchemy: A powerful SQL toolkit and Object-Relational Mapping (ORM) library that provides a high-level and expressive approach to interacting with databases, including SQLite. It simplifies database operations and enables efficient database management. | . So, whether you’re a seasoned developer wanting to explore Flask and SQLite or a novice just dipping your toes into the world of web development, this blog will guide you through each step. By the end of our journey, you will have gained practical, hands-on experience with Flask and SQLite and have a fully-functional social media application to show for it. . Backend: Flask and SQLite . User Authentication . To begin with, we’re focusing on user authentication - a fundamental feature for any social media application. This involves handling user login, logout, registration, account updates, and account deletion. We’ll be using Flask’s routing and form capabilities along with the SQLite database to accomplish these tasks. . Here’s a block of code responsible for the login functionality and how it will turn out to be: . . . In simple terms, what we’re doing here is defining a route at /login that will handle both GET and POST requests. . In case of a GET request, the server will simply render and return the “login.html” template. For POST requests, which occur when the user submits their login form, we extract the entered email and password. We then use these details to find the user in our SQLite database. If a user with the given email exists and the provided password matches the stored password (after hashing), we log the user in and redirect them to the homepage. If not, appropriate error messages are flashed to inform the user about the incorrect credentials. . This same pattern is extended for logout, sign-up, update profile, and delete account operations, each with its respective checks and user prompts. As we progress through these operations, the code may seem complex, but don’t worry! As you work more with Flask and SQLite, this code will start to feel more intuitive. . Here’s how these would look: . . Posts Management . Now that we have user management in place, the next step is to handle posts - the heart of any social media platform. Our focus will be on creating, editing, and deleting posts. . Let’s explore how to create a new post and the output: . . In this code, we define a route at / to handle both GET and POST requests. For a POST request, which is triggered when a user submits a new post, we retrieve the entered content and uploaded file. If both are provided, we securely save the file to our server and create a new Post object, linking it with the current user. After adding this new post to our database and committing the changes, we flash a success message to the user. . This function also handles GET requests, which occur when a user visits the home page. In this case, we retrieve all posts from our database and render the “home.html” template, passing in the current user and posts to be displayed. . For the edit and delete functionalities, we create separate routes, each accepting an id parameter. The id is used to fetch the post to be edited or deleted from our SQLite database. . In the edit function, we provide the user with a form pre-filled with the current content and file of the post. Once the user updates and submits this form, we validate the input, update the post in our database, and flash a success message. For the delete function, we check if the current user is the author of the post before deleting it. This ensures that only the post’s author can delete the post, adding a layer of security to our application. . . Remember, though the lines of code may appear complex, they form the core functionality of our social media app, providing the features users expect from a modern platform. As we move forward, you’ll gain a deeper understanding of how Flask and SQLite work together to create a dynamic, interactive web application . Frontend: HTML and Bootstrap . Moving on to the user interface of our social media application, we use HTML, a markup language for creating web pages, enhanced with the power of Bootstrap, a popular CSS framework for building responsive and mobile-first websites. . Firstly, we have a root.html file. This is a base template which provides a consistent structure for our application - including the navigation bar, alert messages, a content container, and scripts for interactivity. This file also includes several {% block %} statements, which are part of the Jinja2 templating language. These allow us to override specific parts of the template in other HTML files, providing flexibility to customize our pages while maintaining a consistent structure. . Here’s how HTML templates are used to create the home page of a website and the result: . . The navigation bar on the top uses Bootstrap’s navbar class. It is responsive and will automatically collapse on smaller screens. Inside this bar, we have different links, some of which are only visible if the user is authenticated. This is controlled using the {% if user.is_authenticated %} statement. Flashed messages (like success messages after successful account creation or login) are displayed using Bootstrap’s alert class. The color of the alert depends on the category of the message - either success (green) or error (red). . We then have separate HTML files for signup and login pages. These files extend from our root.html and override the title and content blocks to customize the page title and main content. . For example, in the signup page: . . Here, we use Bootstrap’s form and input classes to create a clean, modern form. The form-group class is used to wrap labels and input fields, providing appropriate spacing. The btn btn-primary classes are used to style the submit button. . Overall, the usage of Bootstrap helps us ensure that our application looks good on all screen sizes with minimal effort, while the power of Jinja2 templating lets us write clean, maintainable code by avoiding duplication. By exploring and mastering these technologies, you can create appealing and user-friendly web applications. . Conclusion . In this blog post, we’ve traversed the journey of creating a social media application using Python’s Flask framework, SQLAlchemy, HTML and Bootstrap. We first dove into the backend side of things, exploring how routes can handle various functionalities such as login, logout, sign up, profile updating, and account deletion. We then delved into more complex operations like creating, editing, and deleting posts. The key takeaway here is how Flask, along with its plug-ins, allows us to handle all these different aspects in a straightforward and organized manner. . Subsequently, we stepped into the frontend realm where HTML, empowered by Bootstrap, breathed life into our application, making it visually appealing and responsive. We saw how Jinja2 templates help in creating reusable HTML structures while allowing for specific customizations. . Through this journey, we hope you’ve gained a comprehensive understanding of the components and processes involved in building a web application. While the journey of learning web development may seem daunting, remember that every line of code you write is a step forward. Continue practicing, building, and exploring. Happy coding! . Appendix . SQLAlchemy is an ORM (Object-Relational Mapping) library that provides an intuitive and Pythonic way to interact with databases. It allows developers to define database models as Python classes and perform database operations using Python code. . One of the key benefits of SQLAlchemy is its ability to abstract away the underlying database system, such as SQLite, and provide a consistent API for different database engines. This means that the same code can be used with different databases without major modifications. . By leveraging SQLAlchemy in our Flask Social Media project, we can focus more on the application logic and less on the intricacies of database management. SQLAlchemy handles tasks such as database connections, query generation, and object mapping, making database operations more efficient and maintainable. . To secure user passwords, we store them as hashes on the server rather than in plain text. Additionally, we can use techniques like salting, where a random string is added to the password before hashing, making it more difficult to crack the hashes in case they are compromised. . Regarding the transfer of passwords from the browser to the server, if HTTPS is not used, the passwords can be sent in plain text, which poses a security risk. To add HTTPS to our application, we need to configure SSL/TLS certificates and enable secure communication between the client and the server. This ensures that the data transmitted, including passwords, is encrypted and protected from interception. .",
            "url": "https://de-fellows.github.io/RexCoding/flask/sqlalchemy/2023/06/24/Hemit.html",
            "relUrl": "/flask/sqlalchemy/2023/06/24/Hemit.html",
            "date": " • Jun 24, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "An Introduction to Convolutions and Their Applications in Image Processing",
            "content": "What Does Convolution Mean? . Definition . Firstly, convolution is a functional operator, meaning it takes two functions as inputs, and outputs a single function. The simplest of functional operations are addition and subtraction. More complex functional operators include things like function composition, where the output of one function becomes the input of the other. . A convolution blends or combines one function with another by shifting or sliding one function overtop of the other, and multiplying the overlapping values at every point of the &#39;sliding&#39; process. If the functions are discreet, there will be a sum of multiplications, and if the functions are continuous, there will be an integration of multiplications. In this way, the resulting function of a convolution is an expression of how the shape of one input function affects the other input function. . Let&#39;s take a look at the convolution of 2 vectors, which can be thought of as discrete functions defined at only 3 points. If A = (1,2,3) and B = (4,5,6), the computation of the convolution would look like this: . . One important thing to note is that vector B (in blue) is flipped. This is to preserve time-causality: basically since 4 is the first value in the vector, it needs to be the first one to multiply with vector A (red) since it &#39;happens&#39; before values 5 and 6. This step is only necessary for convolutions of functions that are time-dependant. Vector B slides along vector A, and at every point where values overlap, the values are multiplied and then added to each other to give a point-wise result. . The result can be verified using the .convolve method from numpy. . import numpy as np A = (1,2,3) B = (4,5,6) C = np.convolve(A,B) print(C) . [ 4 13 28 27 18] . Notation and Properties of Convolution . A convolution operation uses the star (*) operator in a similar fashion to an addition or multiplication symbol. $x(t) * y(t)$ is the convolution of x(t) and y(t). . Convolution is a commutative operation, so $x(t) * y(t) = y(t) * x(t)$. This means that the result of a convolution doesn&#39;t depend on which function is sliding overtop of the other, the result will be the same. . Another incredibly powerful and important property of convolution has to do with spectral (Fourier) analysis of functions. Simply put, a convolution of two functions in the time domain is equivalent to a multiplication of functions in the frequency domain, and vice versa. This property is incredibly important in signal processing, image processing, and other areas. . Convolution in Signal Processing . Signal processing is a great intro for convolutions because they are easier to analyze and visualize, as the functions involved generally only require convolution in one dimension, and the function-based nature of convolutions is more apparent. . Let&#39;s start with the integral definition of convolution. . $$ begin{equation*} f(t) * g(t) = int_{- infty}^{ infty}f( tau) cdot g(t- tau) d tau end{equation*} $$Here, the same idea of one function sliding over another and being multiplied at every point of overlap can still be seen. The main difference between the example shown above and convolutions in signal processing is that signals are usually continuous, so we need to integrate the multiplied functions to collect the overlapping quantities. The functions being convolved are expressed in terms of a dummy variable tau, which is done to differentiate between the variable t, which is now being used to describe the offset that the sliding function has with respect to tau. The preservation of time-causality is seen here again, with g(tau) being flipped across the y-axis. . The links below show an animation of the signal convolution process with different functions. The red and blue shapes are the functions being convolved, and the black shape is the result of their convolution. . . . Convolution in Image Processing . The Increased Complexity of Working in Multiple Dimensions . In signal processing, signals can be represented as nice, one-dimensional functions quite intuitively. But what about images? It&#39;s a lot more difficult to define the frequency, shape, or maximum value of an image, and of course images aren&#39;t one-dimensional, so how can the idea of convolutions still be applied? . Higher-dimensional convolutions work upon the same principles we see in signal processing - there are just more steps involved with preparing for convolution, and the convolution process itself. As an example, let&#39;s consider the concept of image frequency. . Freqency is just the rate at which some event occurs. For images, the event can be a specific colour. If an image takes many pixels to go from one colour - to other colours - back to the original colour (a smooth gradient), it has a relatively low frequency compared to an image that takes fewer pixels to complete this colour &#39;cycle&#39;, which would have a relatively high frequency. . Similar to the magnitude or value of a function at a point, the magnitude of an image (usually called intensity) is the amount of color present at a specific pixel. For RGB colour images, there are 3 seperate intensity parameters ranging from 0 (no color) to 255 (full color). Because there are multiple parameters, multiple convolutions are needed to analyze color image. For a greyscale image, there is only one intensity parameter, which makes image analysis much simpler. . Finally, we have the problem of dimensionality. Images are 2-dimensional, so, to fully convolve an image, the sliding action that is seen in signal processing must be done along both the width and length of the image. . Kernels (Image Filters) . Just like with signal processing, in image processing we need something to convolve our input with. In this case, this is a convolutional filter called a kernel. A kernel is another matrix that is slid around the image we want to analyze. The values that define the filter depend on what we are trying to accomplish, as will be shown below. Many types of well-known and commonly used kernels exist, such as the Gaussian Blur filter, edge detectors (vertical, horizontal, etc.), and sharpeners. The convolution of these kernels with an image provides the basis for image processing and analysis by altering, or extracting general features from an image. . . This animation shows the process of convolving an image (an array of pixel values) with a kernel, which in this case is an edge sharpener. The kernel must be smaller than the image to allow the kernel to slide overtop of the image. For simple image convolutions, 3 x 3 kernels are common. The kernel is centered over a pixel, and the values that overlap with each other are multiplied, and the sum of these multiplications is the output of the convolution (just like with signal processing) for that pixel. This process is repeated for every pixel of the original image. . When the kernel is centered on an edge pixel of the original image, there will be kernel values that do not have image values to multiply with. There are a few ways to deal with this. One way, as shown by the animation, is to extend the edge values. This way, each &#39;missing edge value&#39; becomes the value of its nearest pixel. Another way is to set all &#39;missing edge values&#39; to a constant. . Edge Detector Kernels . Sharp edges and lines are incredibly important aspects of an image, as they define broad shapes and forms of the objects within the image. Edge detector kernels, when convolved with an image, highlight and extract these edges. Prewitt edge detectors are an iteration of this type of kernel, shown below. . Horizontal Prewitt Kernel$$ begin{equation*} begin{bmatrix} 1/3 &amp; 1/3 &amp; 1/3 0 &amp; 0 &amp; 0 -1/3 &amp; -1/3 &amp; -1/3 end{bmatrix} end{equation*} $$&nbsp; . Vertical Prewitt Kernel$$ begin{equation*} begin{bmatrix} 1/3 &amp; 0 &amp; -1/3 1/3 &amp; 0 &amp; -1/3 1/3 &amp; 0 &amp; -1/3 end{bmatrix} end{equation*} $$&nbsp; . From the values of the kernels alone, the way the kernels work can begin to be understood. If whatever portion of the image being overlapped by the kernel has no sharp changes in intensity (no edges), the multiplication of the negative row/coloumn added to the positive row/column will result in a very small number, as the negative and positive values cancel each other out. However, if there is an edge present, the multiplication and addition process will result in a large (positive or negative) number at that pixel, denoting that an edge is present. . Below, the process of convolving images with prewitt kernels using Python is shown. . #the skimage library is used to load the filters and perform the convolution operations #matplotlib is used to display the results import matplotlib.pyplot as plt from skimage import filters from skimage.data import checkerboard, horse image1 = checkerboard() image2 = horse() . edge_prewitt_h1 = filters.prewitt_h(image1) edge_prewitt_v1 = filters.prewitt_v(image1) edge_prewitt_h2 = filters.prewitt_h(image2) edge_prewitt_v2 = filters.prewitt_v(image2) fig, axes = plt.subplots(ncols=3, nrows=2, figsize=(10, 10)) #create sublots axes[0][0].imshow(image1, cmap=plt.cm.gray) axes[0][0].set_title(&#39;Original Image&#39;) axes[0][1].imshow(edge_prewitt_h1, cmap=plt.cm.gray) axes[0][1].set_title(&#39;Horizontal Edge Detection&#39;) axes[0][2].imshow(edge_prewitt_v1, cmap=plt.cm.gray) axes[0][2].set_title(&#39;Vertical Edge Detection&#39;) axes[1][0].imshow(image2, cmap=plt.cm.gray) axes[1][0].set_title(&#39;Original Image&#39;) axes[1][1].imshow(edge_prewitt_h2, cmap=plt.cm.gray) axes[1][1].set_title(&#39;Horizontal Edge Detection&#39;) axes[1][2].imshow(edge_prewitt_v2, cmap=plt.cm.gray) axes[1][2].set_title(&#39;Vertical Edge Detection&#39;) axes = axes.flatten() for ax in axes: ax.set_axis_off() plt.tight_layout() plt.show() . The checkerboard example is very straightforward, as the original image is made up exclusively of vertical and horizontal edges. This makes it a perfect image for an edge detector. However, the image of the horse has more curves, so the edge detectors can&#39;t pick up the edges quite as sharply. Since the vast majority of images have more to them than straight, black and white edges, we need to increase to complexity of the filters to keep up. . Building Upwards . Still a Long Way to Go . Simple convolutional kernels like edge-detectors and blur-ers are great, but they are only the first step in creating something as complex and versatile as an image classifier algorithm. Having the ability to classify images based on high-level shapes, intensities, and textures requires more thought and engineering. . A Note on Filter Banks . The most important requirement for creating usable machine-learning algorithms is aquiring enough enough data to train the model on. Although some convolutional image processing algorithms only require one kernel (like the Gaussian Blur kernel shown above), modern machine-learning algorithms use multiple kernels, each extracting different features of an image, to create a larger set of data. When multiple kernels (filters) are used for analysis of the same input, the collection of filters is called a filter bank. . Convolutional Neural Networks vs. Traditional Convolutional Algorithms . Image classifiers and other high-level image processing algorithms present another challenge - it is no longer clear what kernel(s) are needed to solve a particular problem. For example, some images have sharp, vertical edges, so the convolution of a vertical edge detector with the input image extracts a very important feature of the image. Another image may not have any well-defined vertical edges, so the convolution with the same vertical edge detector won&#39;t provide much (if any) useful information. The solutions to this problem represent the difference between traditional convolutional image processing algorithms and modern convolutional neural networks (CNNs)... . One simple, traditional solution is to create a large collection of kernels (filter bank). If the kernels are designed such that each one extracts different features from any given image, a subset of the kernel convolution results is bound to contain important information about the image, and thus, analyzing an unknown image with unknown features can be done. . Another solution comes about from the essence of neural networks - using back-propagation and gradient descent, a convolutional neural network learns the values of the kernels it needs itself during the training process based on the features present in the training images. This solution requires no human involvement during the kernel selection and creation process. . CNNs have many clear advantages: the process is independent of a human designer, the creation of the kernels can happen much faster, and with applications involving complex, subtle data, CNNs provide the most accurate results to image processing problems. However, neural networks are computationally expensive, and become &#39;overkill&#39; for many simpler types of image processing problems. In addition, by removing the designer from the process, it becomes much harder to gain insight about the nature of the data, what issues are still present in the process, and so forth. . Using the Gabor Filter to Create an Image Classifier Manually . An easy, effective way to create a large collection of filters that are sufficiently unique is to use a filter that is defined by a mathematical function, with a number of parameters. This way, to create n filters, we only have to specify n parameters, instead of specifying each value of each m x m kernel. One filter of this type is the Gabor Filter. The Gabor Filter is defined by a Gaussian (defines weights) multiplied by a sinusoid (defines frequencies), with a total of seven parameters. . Gabor Filter Function (Real Part Only) &nbsp; . $$ begin{equation*} g(x,y, lambda, theta, psi, sigma, gamma) = exp left(- frac{(xcos( theta)+ysin( theta))^2+ gamma^2(-xsin( theta)+ycos( theta))^2}{2 sigma^2} right)cos left(2 pi frac{xcos( theta)+ysin( theta)}{ lambda}+ psi right) end{equation*} $$&nbsp; . Each parameter of the function controls some aspect of the filter (orientation, phase, frequency, etc.) and a collection of instances of these filters can be very powerful. . Using a collection of Gabor filters, it becomes possible to create a simple image classifier that can be used for simple tasks. In the linked example below, the Gabor filter method is tested on the MNIST hand-written digit dataset. The same datset is used with a convolutional neural network. . https://github.com/de-fellows/CNN-Gabor-on-MNIST-dataset . The gabor kernel classifier was able to classify hand written digits with 92% accuracy. This is compared to 93% obtained using a neural network on the same dataset. Both algorithms could be altered to improve accuracy somewhat, but in any case it is clear that both methods are powerful and useful for complex imaging tasks, all thanks to the power of convolution. . Sources . Signal Convolution GIFs . Convolution_of_box_signal_with_itself.gif: Brian Amberg derivative work: Tinos, CC BY-SA 3.0 https://creativecommons.org/licenses/by-sa/3.0, via Wikimedia Commons . Convolution_of_spiky_function_with_box.gif: Brian Amberg derivative work: Tinos, CC BY-SA 3.0 https://creativecommons.org/licenses/by-sa/3.0, via Wikimedia Commons . Image Convolution GIF . Michael Plotke, CC BY-SA 3.0 https://creativecommons.org/licenses/by-sa/3.0, via Wikimedia Commons . Gabor Feature Extraction . https://scikit-image.org/docs/stable/auto_examples/features_detection/plot_gabor.html .",
            "url": "https://de-fellows.github.io/RexCoding/python/convolution/2023/06/22/conv_blog.html",
            "relUrl": "/python/convolution/2023/06/22/conv_blog.html",
            "date": " • Jun 22, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Streamlit Data Visualization",
            "content": "Goals . Create a web application displaying Steph Curry&#39;s statistics from 2009 to 2021. Installing Streamlit | Set up a Streamlit web application | Working with data using Pandas | . | . Introduction . Streamlit is an open-source Python framework used for building interactive web applications. It simplifies the process of creating and deploying data science and machine learning models by providing a user-friendly interface. With Streamlit, Python scripts can be converted into web applications without the need for extensive web development knowledge. It allows a coder to create interactive and responsive UI components, such as sliders, buttons, dropdown menus, and data visualizations, with just a few lines of code. Coding with Streamlit is similar to coding with Graphic User Interface modules like tkinter, where the coder can add widgets and interactive functions to the application. This creates a “junior version” of a project where the coder does not have to worry about Webserver developing with POST and GET methods, but focus more on front-end developing like sorting through data with Pandas module, and back-end GUI development. Hence, this tackles the Play the whole game principle of Perkins’ Making Learning Whole paradigm. . Body . Installing Streamlit and Displaying the Web Application . In order to install Streamlit, the following line can be written in the cmd terminal: . # pip install streamlit . After installing Streamlit, create a blank Python file. For example: curry.py. Then a blank server can be displayed using the following command in cmd terminal: . # streamlit run curry.py # streamlit run (Python file name) . . While not necessary, it is convenient to enable Rerun on save. This allows the web application to be updated everytime the Python file is changed and saved. It is done by clicking on the three horizontal bars on the upper right corner. Then click on Settings and check the Run on save box. . . Adding Web Application Titles and Introduction . In the Python file curry.py, import the module streamlit. Then, the title and subheading of the web application can be displayed using the Streamlit API text widgets st.markdown. This shows lines of markdown text that can be modified. As an example, the color of the title will be changed to the Warriors yellow using hex-code color through markdown format. In addition, it is important to use the argument unsafe_allow_html=True as it allows color markdown format to show in the web application. Please refer to Streamlit API Documentation for more details regarding different types of Streamlit widgets. . import streamlit as st st.markdown(&#39;# &lt;font color=&quot;#ffc72c&quot;&gt;Stephen Curry NBA Statistics&lt;/font&gt;&#39;, unsafe_allow_html=True) st.markdown(&#39;*Gia Khang Ngo*&#39;) st.markdown(&#39;## &lt;font color=&quot;#006BB6&quot;&gt;Introduction&lt;/font&gt;&#39;, unsafe_allow_html=True) . . With the Introduction, if it is preffered to display two images or two blocks of texts side-by-side, st.columns is used to insert containers laid out as side-by-side columns. This is similar to GUI development with tkinter grid with rows and columns. Two column containers are created. Then in each columns, an image is inserted using st.image, where a link to the image is posted and the argument width is used to set the image size. Moreover, with st.markdown, a brief introduction is provided with the link to the original data source. . col1,col2, =st.columns(2) with col2: st.image(&#39;https://i.pinimg.com/originals/82/9a/82/829a82bd6f39f7456c6f4cc2dacc27f6.jpg&#39;, width= 300) with col1: st.markdown(&#39;&#39;&#39;* A visual graphic of NBA player Stephen Curry&#39;s statistics from 2009 to 2021. * **Data source:** [Kaggle.com](https://www.kaggle.com/datasets/mujinjo/stephen-curry-stats-20092021-in-nba).&#39;&#39;&#39;) st.image(&#39;https://pbs.twimg.com/media/FVbqDw1WQAM6BmI?format=jpg&amp;name=large&#39;, width= 350) . . Import and Display Raw Data . The csv file containing Stephen Curry data is imported using Pandas module through pd.read_csv. Then st.expander is used to create a container that can be expanded or collapsed. This container holds the data table, to make the layout less clustered. With st.dataframe, the Pandas dataframe is displayed in a table in Streamlit. Furthermore, a download button can be created using st.download_button to allow the user to download the utf-8 encoded csv file of the database. The argument mime is used to set the MIME type of the data, which is csv. . import pandas as pd curry_data = pd.read_csv(&#39;./streamlit-supp/Stephen-Curry-Stats.csv&#39;) st.markdown(&#39;#### &lt;font color = &quot;#006BB6&quot;&gt;Raw Data&#39;, unsafe_allow_html=True) check_data = st.expander(&#39;Click to see raw data&#39;) with check_data: st.dataframe(curry_data) # Download Data Button st.download_button(label= &#39;Download Raw Data&#39;, data=curry_data.to_csv().encode(&#39;utf-8&#39;), file_name=&#39;Stephen Curry Stats.csv&#39;, mime=&#39;text/csv&#39;) . Collapsed Raw data: . Expanded Raw data: . Using Download button: . Sidebar for User Inputs . In order to add more features and allow user inputs, st.sidebar is used to create a sidebar of the web application. In order to access and implement widgets in the sidebar, access it using st.sidebar.(widget). For example with st.sidebar.markdown, a markdown text is displayed in the sidebar, with functions similar to st.markdown for the main page. Moreover, st.sidebar.multiselect adds a dropdown menu, where the user can input which season years they would like to display the data for. The user input is assigned to a python variable for further data sorting with Pandas. . st.sidebar.markdown(&#39;**&lt;font color=&quot;#ffc72c&quot;&gt;User Input Features&lt;/font&gt;**&#39;, unsafe_allow_html=True) st.sidebar.markdown(&quot;*Select the seasons you want to analyze:*&quot;) season_year = st.sidebar.multiselect(&#39;Curry &#39;s Seasonal Year (Bar chart)&#39;, curry_data[&#39;Season_year&#39;].unique()) . . Bar Chart Plotting for Field Goals . Before plotting, it is necessary to take into account what will happen when the user does not input any seasonal year. An if-else statement is used for said situation, where the else statement contains st.error, which shows an error asking the user to input at least one seasonal year if there are none inputted. Within the if statement, the Field goal data is sorted using Pandas slicing for the user-inputted seasonal years. Then the success rate is calculated using the Field Goals Made and Field Goals Attempted data. It is important to note that the Python method sorted is used to sort the user-inputted seasonal years. This means that no matter the order that the user selected the years, the seasonal years displayed on the bar chart is always from the earliest to the latest. . To plot the bar chart, the Python charting library plotly is used through st.plotly_chart, specifically plotly.graph_objects is imported to access the bar chart drawing functions. matplotlib.pyplot may also be used through st.pyplot. However, plotly is integrated better with Streamlit. Please refer to the Chart elements section of the API Documentation for more details about the available Streamlit plotting widgets. . Looking at the code section below, an instance go.Figure is created where the argument contains the method go.Bar to plot the bar graphs of the Field Goals Made (FGM) and Field Goals Attempted (FGA) of the user-inputted seasonal years. Within it, the hovertext argument in plotly allows the user to hover over the bar chart to see the percentage success, calculated using the FGM and FGA. Finally, the graph title and axis labels are edited using update_layout method. Then, the Figure instance is inputted to st.plotly_chart to display the graph on the web appplication. . import plotly.graph_objects as go st.markdown(&#39;## &lt;font color = &quot;#006BB6&quot;&gt;Field Goals Made and Attempted per Year&#39;, unsafe_allow_html=True) if season_year: st.write(&#39;Hover over the graph to see success percentage.&#39;) list_year = [] list_FGA = [] list_FGM = [] list_percent = [] # Create lists of seasonal years, field goals attempts, field goals mades. for i_year in sorted(season_year): yA = curry_data[curry_data[&#39;Season_year&#39;] == i_year][&#39;FGA&#39;].sum() # The sum of field goals attempted for the user-inputted season years yM = curry_data[curry_data[&#39;Season_year&#39;] == i_year][&#39;FGM&#39;].sum() # The sum of field goals made for the user-inputted season years list_year.append(i_year) list_FGA.append(yA) list_FGM.append(yM) list_percent.append(f&#39;Success rate: {yM/yA*100:.1f}%&#39;) # Success rate list by dividing field goals made by field goals attempted # Plot bar chart fig1 = go.Figure(data=[ go.Bar(x=list_year, y=list_FGM, name=&#39;Field Goals Made&#39;, hovertext=list_percent, marker_color=&#39;rgb(253, 185, 39)&#39;), go.Bar(x=list_year, y=list_FGA, name=&#39;Field Goals Attempted&#39;, hovertext=list_percent, marker_color=&#39;rgb(29, 66, 138)&#39;) ]) fig1 = fig1.update_layout( title=&#39;Steph Curry Field Goals Statistics&#39;, xaxis_title=&#39;Season year&#39;, yaxis_title=&#39;Number of Field Goals&#39;, width=800, height=600 ) st.plotly_chart(fig1) # Display error when no season year is inputed else: st.error(&quot;Please select at least one season year in the sidebar.&quot;) . Error when no user inputs: . Bar chart: . Supplementerary exercise 1 . In order to drill in all the information, it is a good idea to do a few exercises. The first exercise is to extend on all the given codes given on this blog, based on the Stephen Curry statistics csv file. . First, please copy and paste all the codes from the beginning of the blog to a new python file. Or, simply download curry.py from the following GitHub link under the Code folder. Then, write a code block to display a heat map showing Stephen Curry&#39;s assists made vs minutes played. The code must contains: . A subheading with similar color font. | Data slicing with Pandas. | A heat map displaying Stephen Curry&#39;s assists made for minutes played. Hint: look up go.Figure and go.Histogram2d functions from plotly.graph_objects, which can be found in the API Documentation. | An error being displayed if there are no season year inputted. | Some comments on what the data visualization shows about the data. | . An example of what the heat map looks like on the web application: . Answer: . #Heat map for Curry&#39;s assists made for minutes played st.markdown(&#39;## &lt;font color = &quot;#006BB6&quot;&gt;Assists made for Minutes Played&#39;, unsafe_allow_html=True) if season_year: #Create empty lists for assists and minutes to add to list_AST = [] list_MIN = [] #loops through and adds the assists and minutes from the csv file for the years the user chooses for i_year in season_year: yAST = curry_data[curry_data[&#39;Season_year&#39;] == i_year][&#39;AST&#39;].to_list() yMIN = curry_data[curry_data[&#39;Season_year&#39;] == i_year][&#39;MIN&#39;].to_list() list_AST.extend(yAST) list_MIN.extend(yMIN) #creates graph in the form of a 2d histogram (AKA a heatmap), and changes size if each square on heatmap fig3 = go.Figure(data= go.Histogram2d(x=list_MIN, y=list_AST, autobinx=False, xbins=dict(size=0.9), autobiny=False, ybins=dict(size=0.9) )) #adds title and axis names fig3 = fig3.update_layout( title=&#39;Steph Curry Assists per Minute Played&#39;, xaxis_title=&#39;Minutes&#39;, yaxis_title=&#39;Assists&#39; ) #plots graph st.plotly_chart(fig3) st.markdown(&#39;- The heatmap demonstates Steph Curry &#39;s average assists made for the amount of minutes played in a game.&#39;) st.markdown(&#39;- Stephen Curry normally averages 4-8 assists and 30-40 minutes played per game.&#39;) # Display error when no season year is chosen else: st.error(&quot;Please select at least one season year in the sidebar.&quot;) . . Supplementary exercise 2 . Finally, please design a web application with your own theme and layout, using the Red Wine Quality data, which can be downloaded from the UCI Repository. The data can be seen under the table below: . wine_data = pd.read_csv(&#39;streamlit-supp/winequality-red.csv&#39;, sep=&#39;;&#39;) wine_data . fixed acidity volatile acidity citric acid residual sugar chlorides free sulfur dioxide total sulfur dioxide density pH sulphates alcohol quality . 0 7.4 | 0.700 | 0.00 | 1.9 | 0.076 | 11.0 | 34.0 | 0.99780 | 3.51 | 0.56 | 9.4 | 5 | . 1 7.8 | 0.880 | 0.00 | 2.6 | 0.098 | 25.0 | 67.0 | 0.99680 | 3.20 | 0.68 | 9.8 | 5 | . 2 7.8 | 0.760 | 0.04 | 2.3 | 0.092 | 15.0 | 54.0 | 0.99700 | 3.26 | 0.65 | 9.8 | 5 | . 3 11.2 | 0.280 | 0.56 | 1.9 | 0.075 | 17.0 | 60.0 | 0.99800 | 3.16 | 0.58 | 9.8 | 6 | . 4 7.4 | 0.700 | 0.00 | 1.9 | 0.076 | 11.0 | 34.0 | 0.99780 | 3.51 | 0.56 | 9.4 | 5 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1594 6.2 | 0.600 | 0.08 | 2.0 | 0.090 | 32.0 | 44.0 | 0.99490 | 3.45 | 0.58 | 10.5 | 5 | . 1595 5.9 | 0.550 | 0.10 | 2.2 | 0.062 | 39.0 | 51.0 | 0.99512 | 3.52 | 0.76 | 11.2 | 6 | . 1596 6.3 | 0.510 | 0.13 | 2.3 | 0.076 | 29.0 | 40.0 | 0.99574 | 3.42 | 0.75 | 11.0 | 6 | . 1597 5.9 | 0.645 | 0.12 | 2.0 | 0.075 | 32.0 | 44.0 | 0.99547 | 3.57 | 0.71 | 10.2 | 5 | . 1598 6.0 | 0.310 | 0.47 | 3.6 | 0.067 | 18.0 | 42.0 | 0.99549 | 3.39 | 0.66 | 11.0 | 6 | . 1599 rows × 12 columns . The data visualization web application should contain: . A title | Subheadings | Data table and download button | Two user-inputted functions of choice to select different wine qualities. Suggestion: st.selectbox from API Documentation | A scatter plot showing two attributes of your choice (for example: citric acid vs alcohol), of the two user-inputted wine qualities. Hint: Use plotly or pyplot, with st.plotly_chart or st.pyplot respectively | . An example of a scatter plot displaying wine citric acid vs alcohol content when the user inputted wine quality 4 and 7: . Conclusion . Through Streamlit, one can easily create a web application displaying data visualization. Using the Field Goals Made and Field Goals Attempted data of Steph Curry, an example of the web application was shown. It is encouraged to go through the API Documentation and expand on this example through Supplementary exercise 1, or create a new web application through Supplementary exercise 2. I hope you are able to gain a new understanding about Streamlit. . Reference . Jo, M. Stephen Curry stats 2009-2021 in NBA. Kaggle. https://www.kaggle.com/datasets/mujinjo/stephen-curry-stats-20092021-in-nba (accessed 17th May 2023). . | Streamlit API Documentation. https://docs.streamlit.io/library/api-reference (accessed 17th May 2023). . | Cortez,Paulo, Cerdeira,A., Almeida,F., Matos,T., and Reis,J.. (2009). Wine Quality. UCI Machine Learning Repository. https://doi.org/10.24432/C56S3T (accessed 17th June 2023). . | .",
            "url": "https://de-fellows.github.io/RexCoding/python/streamlit/pandas/2023/06/22/Streamlit.html",
            "relUrl": "/python/streamlit/pandas/2023/06/22/Streamlit.html",
            "date": " • Jun 22, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Pygame with AI",
            "content": "Working on the Hard Parts . This tutorial follows the third principle of David Perkins&#39; Seven Principles of Teaching: Work on the Hard Parts. Here, we will become familiar with the HuggingFace library and implement a pre-trained machine learning model into a pygame-based video game. We will then improve our skills by practicing with three more types of models. By the end of this tutorial, you should feel confident exploring the HuggingFace library on your own. . Installation Requirements . It is recommended to set up a virtual environment for the installations below. See Installing packages using pip and virtual environments. . To ensure all libraries are installed correctly, see the HuggingFace Quicktour. . Installation Version Links . Python | 3.9.13 or above | Python Downloads page | . Pygame | 2.4.0 or above | Pygame Getting Started wiki | . Pytorch | 2.0.1 with computing platform CUDA 11.8 | Pytorch website | . Requests | 2.31.0 or above | Installing Packages | . HuggingFace Transformers | 4.29.2 or above | Transformers installation | . Try This Out! . This game uses the models in this tutorial to power non-player characters the player can talk to: . Video Game Playthrough (may require downloading): ai_game_playthrough.mp4 | Video Game Code: ai_game.py | . To see the game above without AI models, check out this simple pygame example: . Video Game Playthrough (may require downloading): simple_pygame_playthrough.mp4 | Video Game Code: simple_pygame.py | . To learn about the basics of pygame, check out this blog post: Intro to Pygame: Pygame basics for your first video game! . HuggingFace and Natural Language Processing . The goals of this tutorial are to: . Explore a variety of language models from the HuggingFace library | Load the models into a pygame-based video game | Use the models to generate text for non-player characters (NPCs) that a player can interact with | . Natural Language Processing (NLP) is when a machine learning model is trained and used on linguistic data to achieve a task. Tasks may include text classification (assigning a label to text), question answering, text generation, and more. HuggingFace is a great source for all kinds of models and datasets, including those for NLP. . Pipelines . There are two main ways to use a publicly-available model: . The Slow Way - Manually loading a model and tokenizer into variables. This requires encoding text data (converting it to numeric values) before it can be inputted into the model, and decoding the model&#39;s output. | The Fast Way - Pipelines. The HuggingFace pipeline() function is a wrapper for models that automatically encodes and decodes data. It also allows a task to be specified, a.k.a. what you want the model to do. Each task has an out-of-the-box default model and tokenizer, or a model can be specified. See the pipeline API reference for more information. | The section below will use both methods to implement a conversational NLP model. . Conversational Models . &quot;Conversational response modelling is the task of generating conversational text that is relevant, coherent and knowledgeable given a prompt. These models have applications in chatbots, and as a part of voice assistants.&quot; - HuggingFace Guide on Conversational NLP Tasks. . In our video game, the goal is to make a character that the player can chat back-and-forth with. We will use a conversational model to do so. . The Slow Way - Manually Loading a Model and Tokenizer . First, we need to load the conversational model facebook/blenderbot-400M-distill into a tokenizer and a model: . The tokenizer takes text data and turns it into a list of numbers (tokens), where each token represents a certain word or character. This step is needed for the model to process the data. | The model takes a tokenized input and generates a response that is also tokenized. This response must be decoded (converted from numbers into words) using the tokenizer. | . . Note: Models can be found at https://huggingface.co/models. On each model&#8217;s page, look for the &quot;&lt;/&gt; Use in Transformers&quot; button for the code needed to initialize the model. . # set up a chatbot with the model facebook/blenderbot-400M-distill # code to initalize model found at: https://huggingface.co/facebook/blenderbot-400M-distill?text=Hi. # import libraries from transformers import AutoTokenizer, AutoModelForSeq2SeqLM # set up tokenizer and model tokenizer = AutoTokenizer.from_pretrained(&quot;facebook/blenderbot-400M-distill&quot;) model = AutoModelForSeq2SeqLM.from_pretrained(&quot;facebook/blenderbot-400M-distill&quot;) . Tokenizers . Let&#39;s write a sentence for the model to respond to: . # a sentence for our model to respond to utterance = &quot;What is your favourite colour?&quot; utterance . &#39;What is your favourite colour?&#39; . Convert the sentence into a format the model can process (PyTorch tensors): . # return_rensors=&#39;pt&#39; makes the inputs into pytorch tensors # otherwise, the tokenizer will return lists inputs = tokenizer(utterance, return_tensors=&#39;pt&#39;) inputs . {&#39;input_ids&#39;: tensor([[ 714, 315, 414, 6179, 7796, 38, 2]]), &#39;attention_mask&#39;: tensor([[1, 1, 1, 1, 1, 1, 1]])} . The tokenizer has encoded the sentence into input_ids. Note that the end of the sequence, &lt;/s&gt;, is its own character. Ignore attention_mask for now. . Word input_id . &#39;What&#39; | 714 | . &#39;is&#39; | 315 | . &#39;your&#39; | 414 | . &#39;favourite&#39; | 6179 | . &#39;colour&#39; | 7796 | . &#39;?&#39; | 38 | . &#39;&lt;/s&gt;&#39; | 2 | . We can also use the tokenizer as a decoder: . # decode the sentence we just encoded tokenizer.decode(inputs.input_ids[0]) . &#39; What is your favourite colour?&lt;/s&gt;&#39; . Let&#39;s get the model&#39;s response to our question: . # unpack (**) the inputs variable into the model response = model.generate(**inputs) response . c: Users Christina Desktop Python Digital Engineering Fellowship 2023 Christina-Kampel-Draft-2023 ai-game-env lib site-packages transformers generation utils.py:1346: UserWarning: Using `max_length`&#39;s default (60) to control the generation length. This behaviour is deprecated and will be removed from the config in v5 of Transformers -- we recommend using `max_new_tokens` to control the maximum length of the generation. warnings.warn( . tensor([[ 1, 863, 2297, 3183, 315, 3002, 21, 228, 714, 315, 4228, 38, 228, 946, 304, 360, 265, 2297, 3183, 38, 2]]) . Decode the response into words: . # Since the data is in double braces, we need to use [0] to access the encoded data tokenizer.decode(response[0]) . &#39;&lt;s&gt; My favorite color is blue. What is yours? Do you have a favorite color?&lt;/s&gt;&#39; . Padding and Attention Masks . Above, we gave the model one sentence to respond to. What if we want to give it a batch of a few sentences? Then, we need to do two things: . Make all of the encoded tensors the same length by padding them (adding a token to make all of the encoded sentences the same length). | Give the model an attention mask - a tensor that tells the model which tokens are important and which tokens are padding. | For more information on padding and attention masks, see https://lukesalamone.github.io/posts/what-are-attention-masks/. . Let&#39;s make a batch of sentences for the model to respond to: . # a batch of sentences for our model to respond to utterance_batch = [&quot;What is your favourite colour?&quot;, &quot;I like coding. What do you like to do?&quot;, &quot;What time is dinner?&quot;] . We can control the direction that the padding tokens are applied: . # tell the tokenizer to pad from the left tokenizer.padding_side = &#39;left&#39; . We can also specify which token is used for padding. This is not always needed. Here, we are using the &quot;end of sequence&quot; token for padding: . tokenizer.pad_token = tokenizer.eos_token . Use the updated tokenizer to encode the batch: . # encode the batch input_batch = tokenizer(utterance_batch, return_tensors=&#39;pt&#39;, padding=True) input_batch . {&#39;input_ids&#39;: tensor([[ 2, 2, 2, 2, 2, 2, 714, 315, 414, 6179, 7796, 38, 2], [ 281, 398, 6601, 278, 21, 714, 361, 304, 398, 287, 361, 38, 2], [ 2, 2, 2, 2, 2, 2, 2, 714, 552, 315, 5048, 38, 2]]), &#39;attention_mask&#39;: tensor([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]])} . Notice: . the padding token is 2, which appears on the left of each tensor | each tensor in input_ids has a corresponding tensor in attention_mask (see below) | . The attention mask tells the model if a token in input_ids is important (1), or is a padding value, and therefore not important (0). . # Show the data for only the first sentence in the batch # encoded ids first_sentence_ids = input_batch.input_ids[0] # attention mask first_sentence_mask = input_batch.attention_mask[0] print(f&quot;input_ids = {first_sentence_ids} nattention_mask = {first_sentence_mask}&quot;) . input_ids = tensor([ 2, 2, 2, 2, 2, 2, 714, 315, 414, 6179, 7796, 38, 2]) attention_mask = tensor([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]) . Now, let&#39;s pass the entire batch to the model and get its responses: . # Unpacking (**) is important here because it gives the model the attention_mask response_batch = model.generate(**input_batch) response_batch . tensor([[ 1, 863, 2297, 3183, 315, 3002, 21, 228, 714, 315, 4228, 38, 228, 946, 304, 360, 265, 2297, 3183, 38, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [ 1, 281, 398, 287, 525, 1620, 1012, 298, 1484, 2842, 21, 714, 906, 306, 6601, 278, 361, 304, 361, 38, 228, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [ 1, 1, 417, 267, 1336, 315, 403, 1226, 33, 2527, 21, 228, 281, 632, 655, 287, 627, 265, 893, 1718, 306, 508, 558, 2595, 91, 80, 298, 3597, 1884, 90, 21, 2]]) . Decode the responses: . for item in response_batch: print(tokenizer.decode(item)) . &lt;s&gt; My favorite color is blue. What is yours? Do you have a favorite color?&lt;/s&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt; &lt;s&gt; I like to play video games and watch movies. What kind of coding do you do? &lt;/s&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt;&lt;pad&gt; &lt;s&gt;&lt;s&gt; Dinner is at 8:30. I am going to make a big pot of spaghetti and meatballs.&lt;/s&gt; . The Fast Way - Pipelines . The pipeline transformer performs the same tasks as above, but automatically encodes and decodes text! . Let&#39;s start with the same model and tokenizer as before: . # set up the model and tokenizer (same as before) from transformers import AutoTokenizer, AutoModelForSeq2SeqLM tokenizer = AutoTokenizer.from_pretrained(&quot;facebook/blenderbot-400M-distill&quot;) model = AutoModelForSeq2SeqLM.from_pretrained(&quot;facebook/blenderbot-400M-distill&quot;) . # set the tokenizer to left padding using the eos token (same as before) tokenizer.padding_side = &#39;left&#39; tokenizer.pad_token = tokenizer.eos_token . Use the pipeline wrapper on the model and tokenizer to create a chatbot: . from transformers import pipeline # the chatbot - since task=&quot;conversational&quot;, pipline returns a ConversationalPipeline blenderbot = pipeline(task=&quot;conversational&quot;, model=model, tokenizer=tokenizer) . The chatbot is a ConversationalPipeline object, which accepts a Conversation object as its input: . from transformers import Conversation # start a conversation with a chatbot - no need for encoding! # conversation_id is manually set for reproducibility # if conversation_id is not set, an id is randomly generated conversation = Conversation(&quot;Hi. How are you?&quot;, conversation_id=&quot;100&quot;) conversation . Conversation id: 100 user &gt;&gt; Hi. How are you? . Our conversation has unprocessed user input, so we can pass it to the chatbot to get a response: . # get the bot&#39;s response blenderbot(conversation) . Conversation id: 100 user &gt;&gt; Hi. How are you? bot &gt;&gt; I&#39;m doing well, thank you. How about yourself? Do you have any plans for the weekend? . The bot&#39;s response has been appended to the Conversation object! This way, the object stores the conversation history: . # show the updated conversation (chat history) conversation . Conversation id: 100 user &gt;&gt; Hi. How are you? bot &gt;&gt; I&#39;m doing well, thank you. How about yourself? Do you have any plans for the weekend? . The past_user_inputs attribute returns a list of everything the user said: . conversation.past_user_inputs . [&#39;Hi. How are you?&#39;] . The generated_responses attribute returns a list of everything the bot said: . conversation.generated_responses . [&#34; I&#39;m doing well, thank you. How about yourself? Do you have any plans for the weekend?&#34;] . The add_user_input() method allows us to add new user input to the conversation: . Note: The chatbot can only respond to conversations that have unprocessed user input. . # add user input conversation.add_user_input(&quot;What do you want to do this weekend?&quot;) conversation . Conversation id: 100 user &gt;&gt; Hi. How are you? bot &gt;&gt; I&#39;m doing well, thank you. How about yourself? Do you have any plans for the weekend? user &gt;&gt; What do you want to do this weekend? . # chatbot responds to the new input blenderbot(conversation) . Conversation id: 100 user &gt;&gt; Hi. How are you? bot &gt;&gt; I&#39;m doing well, thank you. How about yourself? Do you have any plans for the weekend? user &gt;&gt; What do you want to do this weekend? bot &gt;&gt; I&#39;m going to a concert with some friends. I&#39;ve never been to one before. . Trimming a Conversation . The &quot;Conversation input is too long&quot; warning may appear after only a few back-and-forth exchanges. The pipeline automatically trims the input, but manual trimming is also an option. This is useful if you only want to show the most recent few lines of a conversation, not the entire chat history. . # define trimming function def trim_convo(conversation): &quot;&quot;&quot;Trim the earliest user and bot lines from a Conversation. Parameters: - conversation (transformers.pipelines.conversational.Conversation object): conversation to trim Returns: - Trimmed conversation (transformers.pipelines.conversational.Conversation object) &quot;&quot;&quot; try: conversation.past_user_inputs.pop(0) conversation.generated_responses.pop(0) return conversation except: warning = f&quot;Conversation is too short to be trimmed.&quot; print(warning) . # test out the function trim_convo(conversation=conversation) # see results conversation . Conversation id: 100 user &gt;&gt; What do you want to do this weekend? bot &gt;&gt; I&#39;m going to a concert with some friends. I&#39;ve never been to one before. . Model Caveats . While it is useful for producing a back-and-forth conversation, the blenderbot model does not store information from the entire conversation in its responses. For example, if you tell the blenderbot that your favourite colour is blue, and then ask it what your favourite colour is, it will not remember the answer. It may also lose the context of the conversation and give answers that are nonsensical or unrelated to the question. . Question-Answering Models . &quot;Question Answering models can retrieve the answer to a question from a given text, which is useful for searching for an answer in a document. Some question answering models can generate answers without context!&quot; - HuggingFace Guide on Question-Answering Tasks . For our video game, the goal is to make a non-player-character (NPC) that can answer questions about the game. This means that context - the information the model uses in its responses - is important. . For this tutorial, let&#39;s compare two question-answering models: . distilbert-base-cased-distilled-squad: an extractive model, meaning that it extracts the answer out of the given context | t5-base: a text-to-text generation model that has a wide range of applications such as question-answering, translating and summarizing. This model generates new text based on the given context. | . Extractive Model . Set up the model using a pipeline and task=&quot;question-answering&quot;. Note that distilbert-base-cased-distilled-squad is the default model for this task, so there is no need to specify the model and tokenizer when we are just testing the model out. . Note: In production, it&#8217;s good practice to specify the model and tokenizer as was done for the Conversational Model. . # imports from transformers import pipeline # set up model qa_model = pipeline(task=&quot;question-answering&quot;) . c: Users Christina Desktop Python Digital Engineering Fellowship 2023 Christina-Kampel-Draft-2023 ai-game-env lib site-packages tqdm auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html from .autonotebook import tqdm as notebook_tqdm No model was supplied, defaulted to distilbert-base-cased-distilled-squad and revision 626af31 (https://huggingface.co/distilbert-base-cased-distilled-squad). Using a pipeline without specifying a model name and revision in production is not recommended. . Let&#39;s give the model a question and some context, and see what it&#39;s response is: . # set up question and context question = &quot;Where is the key?&quot; context = &quot;The key is at the top of the tree.&quot; # get model&#39;s response qa_model(question=question, context=context) . {&#39;score&#39;: 0.2849337160587311, &#39;start&#39;: 14, &#39;end&#39;: 33, &#39;answer&#39;: &#39;the top of the tree&#39;} . Text-to-Text Generation Model . Set up the model using a pipeline and task=&quot;text2text-generation&quot;. Note that t5-base is the default model for this task. . t2t_model = pipeline(task=&quot;text2text-generation&quot;) . No model was supplied, defaulted to t5-base and revision 686f1db (https://huggingface.co/t5-base). Using a pipeline without specifying a model name and revision in production is not recommended. c: Users Christina Desktop Python Digital Engineering Fellowship 2023 Christina-Kampel-Draft-2023 ai-game-env lib site-packages transformers models t5 tokenization_t5_fast.py:155: FutureWarning: This tokenizer was incorrectly instantiated with a model max length of 512 which will be corrected in Transformers v5. For now, this behavior is kept to avoid breaking backwards compatibility when padding/encoding with `truncation is True`. - Be aware that you SHOULD NOT rely on t5-base automatically truncating your input to 512 when padding/encoding. - If you want to encode/pad to sequences longer than 512 you can either instantiate this tokenizer with `model_max_length` or pass `max_length` when encoding/padding. - To avoid this warning, please instantiate this tokenizer with `model_max_length` set to your preferred value. warnings.warn( . Give the model a question and some context. For this model, the &quot;question&quot; and &quot;context&quot; labels are used inside a string as shown below: . t2t_model(&quot;question: Where can I find the key? context: The key is at the top of the tree.&quot;) . [{&#39;generated_text&#39;: &#39;the top of the tree&#39;}] . Adding to the Context . So far, the two models have given the same responses. To test out their differences, let&#39;s give the models a larger chunk of information as its context so it can answer a wider range of questions: . context_large = &quot;&quot;&quot;This game has the following objects in it: Player Bear, Wall, Tree, Key, Lock and Polar Bear. The Player Bear is a character controlled by you, the user. You can use the arrow keys to make the Player Bear move around, and the RETURN or ENTER keys to talk with other chatbots. The wall is an impassible obstacle. The tree and the lock are interactive objects. You can climb the tree to find the key at the top. Once you have the key, you can use the key to open or unlock the lock. You can talk to the Polar Bear as well. &quot;NPC&quot; stands for &quot;non-player character&quot;. The Polar Bear is a conversational chatbot NPC that uses the facebook/blenderbot-400M-distill model. &quot;&quot;&quot; . Let&#39;s compare the models&#39; responses to the same questions: . Question 1: How do I move around? . # extractive model qa_model(question=&quot;How do I move around?&quot;, context=context_large) . {&#39;score&#39;: 0.5670624375343323, &#39;start&#39;: 186, &#39;end&#39;: 196, &#39;answer&#39;: &#39;arrow keys&#39;} . # text-to-text model t2t_model(f&quot;question: How do I move around? context: {context_large}&quot;) . [{&#39;generated_text&#39;: &#39;arrow keys&#39;}] . Question 2: How do I get to the key? . # extractive model qa_model(question=&quot;How do I get to the key?&quot;, context=context_large) . {&#39;score&#39;: 0.3596245348453522, &#39;start&#39;: 526, &#39;end&#39;: 549, &#39;answer&#39;: &#39;open or unlock the lock&#39;} . # text-to-text model t2t_model(f&quot;question: How do I get to the key? context: {context_large}&quot;) . [{&#39;generated_text&#39;: &#39;climb the tree&#39;}] . Question 3: How many bears are there? . # extractive model qa_model(question=&quot;How many bears are there?&quot;, context=context_large) . {&#39;score&#39;: 0.3472032845020294, &#39;start&#39;: 43, &#39;end&#39;: 92, &#39;answer&#39;: &#39;Player Bear, Wall, Tree, Key, Lock and Polar Bear&#39;} . # text-to-text model t2t_model(f&quot;question: How many bears are there? context: {context_large}&quot;) . [{&#39;generated_text&#39;: &#39;Polar Bear&#39;}] . Question 4: Who is the Polar Bear? . # extractive model qa_model(question=&quot;Who is the Polar Bear?&quot;, context=context_large) . {&#39;score&#39;: 0.5299234986305237, &#39;start&#39;: 670, &#39;end&#39;: 698, &#39;answer&#39;: &#39;a conversational chatbot NPC&#39;} . # text-to-text model t2t_model(f&quot;question: Who is the Polar Bear? context: {context_large}&quot;) . [{&#39;generated_text&#39;: &#39;conversational chatbot NPC&#39;}] . Model Caveats . As shown above, both models give similar answers. However, neither model can correctly answer Question 3 (&quot;How many bears are there?&quot;). The answer should be &quot;two&quot;, which can be inferred from the context but is not explicitly stated. This shows that neither model is good at inferring information from the context. To solve this problem, a different model could be used, or more information could be included in the context to make answers easier for the model to find. . Replicating the Conversation Object . When we put the Question-Answering model into production, we may want to store conversation data in a similar way as the Conversation object used for the Conversational Model. This can be done using a dictionary: . # create a conversation dictionary to hold the chat history # like the Conversation object, past_user_inputs will store the user&#39;s input and generated_responses will store the chatbot&#39;s responses conversation2 = {&quot;past_user_inputs&quot;: [], &quot;generated_responses&quot;: []} . Lines of text can be added using .append(): . # add a line to the list of chatbot&#39;s responses conversation2[&quot;generated_responses&quot;].append(&quot;Hi, I&#39;m a question-answering bot. Ask me a question!&quot;) # add a line to the user input conversation2[&quot;past_user_inputs&quot;].append(&quot;How do I get the key?&quot;) # show the conversation conversation2 . {&#39;past_user_inputs&#39;: [&#39;How do I get the key?&#39;], &#39;generated_responses&#39;: [&#34;Hi, I&#39;m a question-answering bot. Ask me a question!&#34;]} . We can get the chatbot&#39;s responses to the question, and print it out: . # get the question from the conversation history question = conversation2[&quot;past_user_inputs&quot;][-1] question . &#39;How do I get the key?&#39; . # get chatbot&#39;s response to the question given the context qa_model(question=question, context=context_large) . {&#39;score&#39;: 0.35603067278862, &#39;start&#39;: 526, &#39;end&#39;: 549, &#39;answer&#39;: &#39;open or unlock the lock&#39;} . # we only want the &#39;answer&#39; response = qa_model(question=question, context=context_large)[&quot;answer&quot;] response . &#39;open or unlock the lock&#39; . # format the answer so the text looks ike a sentence - capitalize the first word and add a period at the end response = response.capitalize() + &quot;.&quot; response . &#39;Open or unlock the lock.&#39; . Finally, add the chatbot&#39;s response to the conversation history: . # add response to conversation history conversation2[&quot;generated_responses&quot;].append(response) # show results conversation2 . {&#39;past_user_inputs&#39;: [&#39;How do I get the key?&#39;], &#39;generated_responses&#39;: [&#34;Hi, I&#39;m a question-answering bot. Ask me a question!&#34;, &#39;Open or unlock the lock.&#39;]} . If needed, we can show the back-and-forth conversation: . # set counters - used into index into lists i = 0 j = 0 while i &lt; len(conversation2[&quot;generated_responses&quot;]): # print bot response print(&quot;Bot: &quot; + conversation2[&quot;generated_responses&quot;][i]) if j &lt; len(conversation2[&quot;past_user_inputs&quot;]): # print user input print(&quot;User: &quot; + conversation2[&quot;past_user_inputs&quot;][j]) # increment counters i += 1 j += 1 . Bot: Hi, I&#39;m a question-answering bot. Ask me a question! User: How do I get the key? Bot: Open or unlock the lock. . Fill-Mask Models . &quot;Masked language modeling is the task of masking some of the words in a sentence and predicting which words should replace those masks. These models are useful when we want to get a statistical understanding of the language in which the model is trained in.&quot; - HuggingFace Guide on Fill-Mask Tasks . For our video game, we will make an NPC that fills in the blanks of a sentence using a fill-mask model. . We will use the distilroberta-base model, the default model for task=&#39;fill-mask&#39; when using a pipeline. . Let&#39;s set up the model: . Note: Since distilroberta-base is the default model for this task, we do not need to specify the model and tokenizer. This is done so anyways because it is the conventional way of loading a model into production. . # import libraries from transformers import pipeline, AutoTokenizer, AutoModelForMaskedLM # set up model and tokenizer fm_tokenizer = AutoTokenizer.from_pretrained(&quot;distilroberta-base&quot;) fm_model = AutoModelForMaskedLM.from_pretrained(&quot;distilroberta-base&quot;) # create chatbot fm_chatbot = pipeline(task=&quot;fill-mask&quot;, model=fm_model, tokenizer=fm_tokenizer) . Now, let&#39;s test it out. Give the model a sentence containing the mask token (&quot;&lt;mask&gt;&quot;) in the place of a missing word: . . Note: The input must contain the mask token or the pipeline will raise an error. . # input sentence with missing word sentence = &quot;Paris is the &lt;mask&gt; of France.&quot; # get the model&#39;s output result = fm_chatbot(&quot;Paris is the &lt;mask&gt; of France.&quot;) result . [{&#39;score&#39;: 0.6790177226066589, &#39;token&#39;: 812, &#39;token_str&#39;: &#39; capital&#39;, &#39;sequence&#39;: &#39;Paris is the capital of France.&#39;}, {&#39;score&#39;: 0.05177992954850197, &#39;token&#39;: 32357, &#39;token_str&#39;: &#39; birthplace&#39;, &#39;sequence&#39;: &#39;Paris is the birthplace of France.&#39;}, {&#39;score&#39;: 0.03825283423066139, &#39;token&#39;: 1144, &#39;token_str&#39;: &#39; heart&#39;, &#39;sequence&#39;: &#39;Paris is the heart of France.&#39;}, {&#39;score&#39;: 0.024348977953195572, &#39;token&#39;: 29778, &#39;token_str&#39;: &#39; envy&#39;, &#39;sequence&#39;: &#39;Paris is the envy of France.&#39;}, {&#39;score&#39;: 0.022851353511214256, &#39;token&#39;: 1867, &#39;token_str&#39;: &#39; Capital&#39;, &#39;sequence&#39;: &#39;Paris is the Capital of France.&#39;}] . The model returned five sentences containing the five words most likely to fill in the mask. . We can select only certain results if needed: . # show all model results from the sentence &quot;Paris is the &lt;mask&gt; of France.&quot; result . [{&#39;score&#39;: 0.6790177226066589, &#39;token&#39;: 812, &#39;token_str&#39;: &#39; capital&#39;, &#39;sequence&#39;: &#39;Paris is the capital of France.&#39;}, {&#39;score&#39;: 0.05177992954850197, &#39;token&#39;: 32357, &#39;token_str&#39;: &#39; birthplace&#39;, &#39;sequence&#39;: &#39;Paris is the birthplace of France.&#39;}, {&#39;score&#39;: 0.03825283423066139, &#39;token&#39;: 1144, &#39;token_str&#39;: &#39; heart&#39;, &#39;sequence&#39;: &#39;Paris is the heart of France.&#39;}, {&#39;score&#39;: 0.024348977953195572, &#39;token&#39;: 29778, &#39;token_str&#39;: &#39; envy&#39;, &#39;sequence&#39;: &#39;Paris is the envy of France.&#39;}, {&#39;score&#39;: 0.022851353511214256, &#39;token&#39;: 1867, &#39;token_str&#39;: &#39; Capital&#39;, &#39;sequence&#39;: &#39;Paris is the Capital of France.&#39;}] . # show only the most likely sentence - the one with the highest score result[0][&#39;sequence&#39;] . &#39;Paris is the capital of France.&#39; . We can also give a summary of the most likely tokens by iterating through the model&#39;s output: . # counter for indexing into the model&#39;s output i = 0 # string to hold the most likely words print_string = &quot;&quot; while i &lt; len(result): # if we have reached the last word, insert a period if i == len(result) - 1: print_string += result[i][&#39;token_str&#39;] + &quot;.&quot; # otherwise, insert a comma and space else: print_string += result[i][&#39;token_str&#39;] + &quot;, &quot; i += 1 # show results print(&quot;The most likely words are:&quot; + print_string) . The most likely words are: capital, birthplace, heart, envy, Capital. . Model Caveats . Since this model gets its data from the Internet, the output of certain phrases may include harmful stereotypes. A good example is shown in the Bias, Risks, and Limitations section of the model&#39;s information page, where the creators compare the model&#39;s responses to the phrases, &quot;The man worked as a &lt;mask&gt;&quot;, and, &quot;The woman worked as a &lt;mask&gt;&quot;. . Text-Generating Models . &quot;Generating text is the task of producing new text. These models can, for example, fill in incomplete text or paraphrase.&quot; - HuggingFace Guide on Text Generation Tasks . For our video game, we will use the text-generating model gpt2 to complete the phrase, &quot;Once upon a time,&quot;. . Let&#39;s set up the model and tokenizer, and pass them to the pipeline object along with task=&quot;text-generation&quot;: . from transformers import AutoTokenizer, AutoModelForCausalLM, set_seed # set up model and tokenizer tg_tokenizer = AutoTokenizer.from_pretrained(&quot;gpt2&quot;) tg_model = AutoModelForCausalLM.from_pretrained(&quot;gpt2&quot;) # create chatbot tg_chatbot = pipeline(task=&quot;text-generation&quot;, model=tg_model, tokenizer=tg_tokenizer, do_sample=True) . Above, we set do_sample=True. This is not required for text generation, but it enables various decoding strategies when new text is generated. From the HuggingFace transformers documentation: . &quot;do_sample: if set to True, this parameter enables decoding strategies such as multinomial sampling, beam-search multinomial sampling, Top-K sampling and Top-p sampling. All these strategies select the next token from the probability distribution over the entire vocabulary with various strategy-specific adjustments.&quot; . Next, let&#39;s ask the model to complete a story starting with &quot;Once upon a time,&quot;. Note that we since the generation relies on randomness, we need to set a seed for reproducibility: . # set the seed for reproducibility set_seed(50) # have the model fill in the story story = tg_chatbot(&quot;Once upon a time,&quot;) # show results story . Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation. c: Users Christina Desktop Python Digital Engineering Fellowship 2023 Christina-Kampel-Draft-2023 ai-game-env lib site-packages transformers generation utils.py:1346: UserWarning: Using `max_length`&#39;s default (50) to control the generation length. This behaviour is deprecated and will be removed from the config in v5 of Transformers -- we recommend using `max_new_tokens` to control the maximum length of the generation. warnings.warn( . [{&#39;generated_text&#39;: &#39;Once upon a time, in the case of Mr. Pate, the most important part of our work, and especially when the subject of the present discussion is taken into consideration, is that the individual and the particular case are quite separate. The particular&#39;}] . To only see the generated text, do the following: . # get only the string of generated text story_text = story[0][&#39;generated_text&#39;] # show results story_text . &#39;Once upon a time, in the case of Mr. Pate, the most important part of our work, and especially when the subject of the present discussion is taken into consideration, is that the individual and the particular case are quite separate. The particular&#39; . To continue the story, we can take this output and input it back into the model: . # use the previous output as the new input for the model story2 = tg_chatbot(story_text) # get only the string of generated text story2_text = story2[0][&#39;generated_text&#39;] # show results story_text . Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation. Input length of input_ids is 50, but `max_length` is set to 50. This can lead to unexpected behavior. You should consider increasing `max_new_tokens`. . &#39;Once upon a time, in the case of Mr. Pate, the most important part of our work, and especially when the subject of the present discussion is taken into consideration, is that the individual and the particular case are quite separate. The particular&#39; . What happened here? It looks like no new text was added. . By default, the model has a max_length of 50 output tokens (words), including the input. To fix this, we could do one of two things: . Increase max_length: A good short-term solution, but not useful if we want to keep expanding on the same text, since this number includes the input text. | Set the max_new_tokens: Controls the maximum number of new words the model generates, not including the input text. A good long-term solution if we want the model to continue expanding one block of text. | # Try again, but this time using max_new_tokens story2 = tg_chatbot(story_text, max_new_tokens=20) # get only the string of generated text story2_text = story2[0][&#39;generated_text&#39;] # show results story2_text . Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation. . &#39;Once upon a time, in the case of Mr. Pate, the most important part of our work, and especially when the subject of the present discussion is taken into consideration, is that the individual and the particular case are quite separate. The particular case is one which has been dealt with by the Courts so far in this Court, without reference to&#39; . Model Caveats . In production, using gpt2 to continously expand on the same block of text can result in the model giving the same output after a certain number of iterations. This may look like: . Iteration 1: &gt; Input:&quot;Once upon a time,&quot;&gt; Output:&quot;Once upon a time, there was a snake&quot; Iteration 2: &gt; Input:&quot;Once upon a time, there was a snake&quot;&gt; Output:&quot;Once upon a time, there was a snake in the garden&quot; Iteration 3: &gt; Input:&quot;Once upon a time, there was a snake in the garden&quot;&gt; Output:&quot;Once upon a time, there was a snake in the garden in the garden&quot; . As a result, we may need to have the option to reset the story when using this model in production. . Resetting the Story . To reset the story while using the same loaded model, we need to: . Change the input text back to &quot;Once upon a time,&quot;. | Change the seed. | If the seed remains the same, the model will generate the same results as before. . Here&#39;s proof: . # Restarting the story with the same model, same seed, and original input will generate the same result as before # set the seed for reproducibility set_seed(50) # have the model fill in the story story = tg_chatbot(&quot;Once upon a time,&quot;) # show results story . Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation. c: Users Christina Desktop Python Digital Engineering Fellowship 2023 Christina-Kampel-Draft-2023 ai-game-env lib site-packages transformers generation utils.py:1346: UserWarning: Using `max_length`&#39;s default (50) to control the generation length. This behaviour is deprecated and will be removed from the config in v5 of Transformers -- we recommend using `max_new_tokens` to control the maximum length of the generation. warnings.warn( . [{&#39;generated_text&#39;: &#39;Once upon a time, in the case of Mr. Pate, the most important part of our work, and especially when the subject of the present discussion is taken into consideration, is that the individual and the particular case are quite separate. The particular&#39;}] . References and Companion Files . References: . Education at Bat: Seven Principles for Educators: https://www.gse.harvard.edu/news/uk/09/01/education-bat-seven-principles-educators . | HuggingFace: . Website: https://huggingface.co/ | Quicktour: https://huggingface.co/docs/transformers/quicktour | Pipelines API Reference: https://huggingface.co/docs/transformers/main_classes/pipelines | Models Page: https://huggingface.co/models | Transformers Documentation: https://huggingface.co/docs/transformers/generation_strategies#:~:text=do_sample%20%3A%20if%20set%20to%20True,with%20various%20strategy%2Dspecific%20adjustments. | . | Conversational Models: . HuggingFace Guide on Conversational NLP Tasks: https://huggingface.co/tasks/conversational | facebook/blenderbot-400M-distill Model Card: https://huggingface.co/facebook/blenderbot-400M-distill?text=Hi | Blenderbot tutorial video: https://www.youtube.com/watch?v=FfywuRCPmqY | Blenderbot tutorial GitHub: https://github.com/nicknochnack/Blenderbot/blob/main/Blenderbot-Tutorial.ipynb | What are Attention Masks? by Luke Salamone: https://lukesalamone.github.io/posts/what-are-attention-masks/ | . | Question-Answering Models: . HuggingFace Guide on Question-Answering Tasks: https://huggingface.co/tasks/question-answering | distilbert-base-cased-distilled-squad Model Card: https://huggingface.co/distilbert-base-cased-distilled-squad | t5-base Model Card: https://huggingface.co/t5-base | . | Fill-Mask Models: . HuggingFace Guide on Fill-Mask Tasks: https://huggingface.co/tasks/fill-mask | distilroberta-base Model Card: https://huggingface.co/distilroberta-base | Bias, Risks, and Limitations of the distilroberta-base Model: https://huggingface.co/distilroberta-base#bias-risks-and-limitations | . | Text-Generation Models: . HuggingFace Guide on Text Generation Tasks: https://huggingface.co/tasks/text-generation | gpt2 Model Card: https://huggingface.co/gpt2?text=Once+upon+a+time%2C | ChatGPT-at-Home GitHub Repository: https://github.com/Sentdex/ChatGPT-at-Home/blob/main/app.py | . | . Companion Files: . Public Repository: Intro-to-Pygame-and-AI A pygame-based video game with AI: ai_game.py | Video game playthrough (may require downloading): ai_game_playthrough.mp4 | Natural language processing models used in ai_game.py: chat_models.py | Intro to Pygame tutorial: Intro to Pygame: Pygame basics for your first video game! | A simple pygame example: simple_pygame.py | . | .",
            "url": "https://de-fellows.github.io/RexCoding/python/pygame/huggingface/transformers/pipelines/natural%20language%20processing/nlp/machine%20learning/ml/artificial%20intelligence/ai/conversational%20models/question-answering%20models/fill-mask/text-generation/2023/06/21/Pygame-with-AI.html",
            "relUrl": "/python/pygame/huggingface/transformers/pipelines/natural%20language%20processing/nlp/machine%20learning/ml/artificial%20intelligence/ai/conversational%20models/question-answering%20models/fill-mask/text-generation/2023/06/21/Pygame-with-AI.html",
            "date": " • Jun 21, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Intro to Pygame",
            "content": "Playing the Whole Game . Getting started with an unfamiliar library can be a daunting task - especially with one as large as pygame. So let&#39;s start by using the first principle of David Perkins&#39; Seven Principles of Teaching: Play the Whole Game. Try out the game below, then come back to this page. All of the elements you see in the game are broken down here. . Try This Out! . Here is a simple pygame example that uses the concepts below: . Video Game Playthrough (may require downloading): simple_pygame_playthrough.mp4 | Video Game Code: simple_pygame.py | . Why Pygame? . Pygame is a tool for developing video games using python. The library allows you to do a few things that are not otherwise easy to do: . Open a graphical user interface (GUI) window | Draw objects, shapes, and text in the window | Get player input without stopping the game (which is what would happen if input() was used) | . Pygame is best for simple games, and is good for learning the logic behind an event loop. . Installing Pygame . For installing on a variety of devices, see the official Getting Started wiki here. . For Windows, enter the following in a command prompt: . python -m pip install pygame . To test that it works correctly, try: . python -m pygame.examples.aliens . If pygame is installed properly, it should open an aliens game that looks like this: . . To test that a python file will run correctly, create a .py file and run: . import pygame print(pygame.ver) . pygame 2.4.0 (SDL 2.26.4, Python 3.9.7) Hello from the pygame community. https://www.pygame.org/contribute.html 2.4.0 . The Basic Framework . All pygame applications need this basic structure to run. . The code below has been modified from Python Simplified&#39;s video Create a Simple Video Game with Pygame - Step by Step Tutorial for Python Beginners!. . # Running this code will open an empty pygame window. Clicking the &quot;quit&quot; button on the window closes the application. # 1. Import libraries import pygame from pygame.locals import * # 2. Initialize all imported pygame modules - this will raise exceptions if it fails pygame.init() # 3. Global variable used with the event listener in step 7 running = True # 4. Clock used for controlling frame rate clock = pygame.time.Clock() # 5. Set display window size - the window is pygame&#39;s built-in GUI screen = pygame.display.set_mode((700,500)) # 6. Event loop - all motions and events that happen as the game runs are inside this loop while running: # 7. Event listener for quitting the game - when the player clicks the &quot;quit&quot; button on the window, &quot;running&quot; is set to False and the application closes for event in pygame.event.get(): if event.type == QUIT: running = False # 8. Set the frame rate to 60 FPS (frames per second) - a constant frame rate helps the game run smoother clock.tick(60) # 9. Close the application pygame.quit() . pygame 2.4.0 (SDL 2.26.4, Python 3.9.7) Hello from the pygame community. https://www.pygame.org/contribute.html . The empty window looks like this: . . Coordinates in Pygame . Pygame coordinates work a little differently than a typical graph: (0,0) is the top left corner of the window and positive values are counted right and down from this point. A point (50,100) would look like this: . . Setting the Window Title and Icon . Changing the title of the game window can be done using: . pygame.display.set_caption(&quot;My Game&quot;) . The default pygame icon can be changed into any image using a surface (see the section on Surfaces below): . # a pygame.Surface object that stores an image surface = pygame.Surface() # change the display icon pygame.display.set_icon(surface) . Event Listeners . Event listeners wait to perform an action until a certain type of event has occurred, usually player input. For example, when the player presses the left arrow key, move a character left. The general format is: . Check that a certain type of event has occurred --&gt; Do something. . In the basic framework, we used an event listener to quit the application when the player closes the window. . running = True # flag to control whether or not the game will run pygame.init() # initialize the window while running: for event in pygame.event.get(): # All events of the game are stored in the events module. We need to &quot;get&quot; them to look at them. if event.type == QUIT: # Checking if a &quot;QUIT&quot; type of event has occured, a.k.a. the player clicking the &quot;quit&quot; button running = False pygame.quit() # close the window . Surfaces . A pygame.Surface object is used for representing images in the game. For example, a surface can be an icon that the player controls, or the background of the game. Surfaces can only be moved using the coordinates of its top left corner. . There are two types of surfaces: . Display Surface: the window of the game. It is always visible, and there is only one. The pygame application will not run without one. | . # create a display surface with width=700 and height=500 screen = pygame.display.set_mode((700,500)) . Regular Surface: a surface that may or may not be visible on the screen. There can be an unlimited number of them. | . # create a surface of width=5, height=10 regular_surf = pygame.surface((5, 10)) . Image Imports . Images imported using pyame.image.load() are automatically stored as (regular) surfaces. . # create a surface from an image import img_surf = pygame.image.load(&#39;intro_to_pygame_images/image.png&#39;) . Converting to Pygame-Friendly Format . Surface.convert() and Surface.convert_alpha() are used to turn an image into a format that is easier for pygame to handle. Note that convert() makes transparent pixels appear black or white when the surface is added to the screen. To keep transparent pixels, use convert_alpha(). . The pygame modules and display screen must be initialized before these methods are called. . # initialize modules and screen pygame.init() screen = pygame.display.set_mode((700,500)) # create a surface from an image import and use convert() img_surf = pygame.image.load(&#39;intro_to_pygame_images/image.png&#39;).convert() # OR create surface and use convert_alpha() img_surf = pygame.image.load(&#39;intro_to_pygame_images/image.png&#39;).convert_alpha() # close application pygame.quit() . Surface Dimensions . To get the dimensions of a surface, use Surface.get_width() and Surface.get_height(). The pygame modules and display screen must be initialized first. . # get dimensions of image.png # initialize modules and screen pygame.init() screen = pygame.display.set_mode((700,500)) # create a surface from an image import img_surf = pygame.image.load(&#39;intro_to_pygame_images/image.png&#39;) # get dimensions width = img_surf.get_width() height = img_surf.get_height() print(width, height) # close application pygame.quit() . 120 120 . Resizing Surfaces . To resize a surface, use pygame.transform.scale(Surface, (width, height)). . # resize img_surf to width=60, height=60 img_surf_small = pygame.transform.scale(img_surf, (60,60)) . # check that the resizing worked - get new dimensions of img_surf_small # initialize modules and screen pygame.init() # get dimensions width = img_surf_small.get_width() height = img_surf_small.get_height() print(width, height) # close application pygame.quit() . 60 60 . Rectangles . A pygame.Rect object is used to store rectangular coordinates (location data). Unlike surfaces, which can only be moved using the top left corner, rectangles can be moved using a variety of attributes: . x,y top, left, bottom, right topleft, bottomleft, topright, bottomright midtop, midleft, midbottom, midright center, centerx, centery size, width, height w,h . To create a rectangle, use pygame.Rect(left, top, width, height). . # create a rectangle with the top left corner located at x=100, y=200, and with width=10 and height=20 rect = pygame.Rect(100, 200, 10, 20) . # use a keyword argument to create a rectangle with its center located at x=100, y=200, and with width=10 and height=20 rect = pygame.Rect(center=(100,200), width=10, height=20) . Drawing a Rectangle on the Screen . Use pygame.draw.rect(Surface, (R,G,B), Rect) to draw a rectangle on the display surface. The pygame modules and display screen must be initialized before creating the rectangle, and pygame.display.update() must be called after draw() in order for the rectangle to appear on the screen. . # draw a red rectangle on the screen # initialize modules, global variable, clock and screen pygame.init() running = True clock = pygame.time.Clock() screen = pygame.display.set_mode((700,500)) # create a rectangle with the top left corner located at x=100, y=200, and with width=50 and height=60 rect = pygame.Rect(100, 200, 50, 60) # event loop while running: # event listener for quitting the game for event in pygame.event.get(): if event.type == QUIT: running = False # draw rectangle on screen in red (RED=255, GREEN=0, BLUE=0) pygame.draw.rect(screen, (255, 0, 0), rect) # update the display - required for the rectangle to appear pygame.display.update() # set frame rate clock.tick(60) # close application pygame.quit() . The result: . . Storing Location Data of a Surface . The get_rect() method is used on surfaces to return a Rect object with the same size as the surface. By default, the position of the Rect is (0,0). . # create a surface from an image import - Surface stores image data img_surf = pygame.image.load(&#39;intro_to_pygame_images/image.png&#39;) # create a rectangle from the surface - Rect stores location data img_rect = img_surf.get_rect() . # create a rectangle from a surface, located 200 pixels from the left and 400 pixels from the top of the screen img_rect = img_surf.get_rect((200,400)) . Adding an Image to the Screen . The Surface.blit() method places an image onto the screen of the pygame application. It requires: . A display surface | An image surface | A destination, either a rectangle or coordinates | . This method must be done inside of the event loop. . The order of Surface.blit() calls is important - images will be placed on the screen in the order that they are called. . # place an image on the screen at the location of its rectangle screen.blit(img_surf, img_rect) . # place an image on the screen so that its top left corner is at x=100, y=200 screen.blit(img_surf, (100,200)) . Movement . Here we combine event listeners, surfaces and rectangles to move a player&#39;s icon around a screen. . Let&#39;s use the arrow keys to control the icon. We need an event listener for each arrow key, and a change in x and y as the result. Remember that pygame coordinates work differently than normal cartesian coordinates. . Note that pygame.display.update() must be called in the event loop to show the player&#39;s new position on the screen. . See the example below. . import pygame from pygame.locals import * # initialize modules and window pygame.init() running = True clock = pygame.time.Clock() screen = pygame.display.set_mode((500,500)) # player&#39;s character - a bear icon bear_surf = pygame.image.load(&#39;intro_to_pygame_images/brown_bear.png&#39;).convert_alpha() bear_loc = bear_surf.get_rect() # event loop while running: # event listeners for event in pygame.event.get(): # user quitting game if event.type == QUIT: running = False # movements for player icon - uses arrow keys and movement occurs every key press # KEYDOWN is the downward press of any key on the keyboard # move() specifies the change in x and y when the key is pressed if event.type == KEYDOWN: if event.key == K_LEFT: bear_loc = bear_loc.move([-10, 0]) if event.key == K_RIGHT: bear_loc = bear_loc.move([10, 0]) if event.key == K_UP: bear_loc = bear_loc.move([0, -10]) if event.key == K_DOWN: bear_loc = bear_loc.move([0, 10]) # add bear image to screen screen.blit(bear_surf, bear_loc) # update the display surface pygame.display.update() clock.tick(60) pygame.quit() . The result: . . There are three problems with the result: . Problem Solution . 1. When the icon is moved around the screen, old images are still visible. | In the event loop, use pygame.draw.rect() to draw a background on the screen before the icon is added. For every iteration of the event loop, the background will cover all previous icons. Simply changing the colour of the display screen using fill() would not have this effect. | . 2. The icon only moves when a key is pressed, but not when keys are held down. | Use pygame.key.get_pressed() to retrieve the current state of all keys, so that the icon continues to move when arrow keys are held down. | . 3. The icon can move beyond the visible window. | Use clamp_ip() to confine the icon&#39;s Rect object (bear_loc) to the screen&#39;s Rect object. Note that screen is a Surface object, so we need to call get_rect() on it first. | . import pygame from pygame.locals import * # initialize modules and window pygame.init() running = True clock = pygame.time.Clock() screen = pygame.display.set_mode((500,500)) # player&#39;s character - a bear icon bear_surf = pygame.image.load(&#39;intro_to_pygame_images/brown_bear.png&#39;).convert_alpha() bear_loc = bear_surf.get_rect() # event loop while running: # event listeners for event in pygame.event.get(): # user quitting game if event.type == QUIT: running = False # movements for player icon # if a key is held, the movement continues without stopping keys = pygame.key.get_pressed() if keys[pygame.K_LEFT]: bear_loc = bear_loc.move([-10, 0]) if keys[pygame.K_RIGHT]: bear_loc = bear_loc.move([10, 0]) if keys[pygame.K_UP]: bear_loc = bear_loc.move([0, -10]) if keys[pygame.K_DOWN]: bear_loc = bear_loc.move([0, 10]) # add background - using a rectangle instead of using screen.fill() ensures old images aren&#39;t left behind as an object moves pygame.draw.rect(screen, (191,180,214), pygame.Rect(0,0,800,800)) # surface, colour, Rectangle(left coord, top coord, width, height) # get rectangle of display screen screen_rect = screen.get_rect() # confine the player&#39;s icon to the rectangle of the display screen bear_loc.clamp_ip(screen_rect) # add bear image to screen screen.blit(bear_surf, bear_loc) # update the display surface pygame.display.update() clock.tick(60) pygame.quit() . The result: . . Obstacles . Let&#39;s make some obstacles that the player cannot cross, such as a wall. Do this using a pygame.Rect object. Collisions will be handled using the sides of the player rectangle and the wall rectangle. . In the event loop, use event listeners to check if a movement will cause a collision. If not, allow the movement to occur. . . Create player&#39;s character and wall: . # player&#39;s character - bear icon bear_surf = pygame.image.load(&#39;intro_to_pygame_images/brown_bear.png&#39;).convert_alpha() bear_loc = bear_surf.get_rect() # obstacle - wall wall = pygame.Rect((200,200),(10,100)) . In the event loop, check that movements are allowed: . keys = pygame.key.get_pressed() if keys[pygame.K_LEFT]: # Left movement occurs UNLESS... # player is within y-range of wall...........................and player is left of wall.....and player will collide with wall if bear_loc.bottom &gt; wall.top and bear_loc.top &lt; wall.bottom and bear_loc.left &gt;= wall.right and bear_loc.left - 10 &lt; wall.right: pass # otherwise, move left else: bear_loc = bear_loc.move([-10, 0]) if keys[pygame.K_RIGHT]: # Right movement occurs UNLESS... # player is within y-range of wall...........................and player is right of wall.....and player will collide with wall if bear_loc.bottom &gt; wall.top and bear_loc.top &lt; wall.bottom and bear_loc.right &lt;= wall.left and bear_loc.right + 10 &gt; wall.left: pass # otherwise, move right else: bear_loc = bear_loc.move([10, 0]) if keys[pygame.K_UP]: # Upward movement occurs UNLESS... # player is within x-range of wall...........................and player is below wall........and player will collide with wall if bear_loc.right &gt; wall.left and bear_loc.left &lt; wall.right and bear_loc.top &gt;= wall.bottom and bear_loc.top - 10 &lt; wall.bottom: pass # otherwise, move up else: bear_loc = bear_loc.move([0, -10]) if keys[pygame.K_DOWN]: # Downward movement occurs UNLESS... # player is within x-range of wall...........................and player is above wall........and player will collide with wall if bear_loc.right &gt; wall.left and bear_loc.left &lt; wall.right and bear_loc.bottom &lt;= wall.top and bear_loc.bottom + 10 &gt; wall.top: pass # otherwise, move down else: bear_loc = bear_loc.move([0, 10]) . After the event listeners, the wall must also be drawn: . # draw wall pygame.draw.rect(screen, (154, 146, 173), wall) . Interactive Objects . Let&#39;s make an object that writes some text when the player collides with it. . Create an object to interact with (a tree): . # surface and rectangle for interactive object tree_surf = pygame.image.load(&#39;intro_to_pygame_images/tree.png&#39;).convert_alpha() tree_loc = tree_surf.get_rect(center = (400,400)) . Create flags (boolean variables) that check the status of the interaction. This will prevent repetition of text later on: . # flag for whether the tree has been interacted with - If True, the text will appear when the player collides with the tree play_collision_text = True # flag for whether the user has responded yet - If True, the user has not responded yet accept_response = True . In the event loop, create a flag that is True when the player collides with the tree: . # flag for collision with tree - True if a collision is occurring collide_tree = pygame.Rect.colliderect(bear_loc, tree_loc) . Print some text when the player collides with the tree. Set play_collision_text to False so that the message will only print once: . # collision with tree if collide_tree and play_collision_text: # prevent text from repeating play_collision_text = False print(&quot;There is a tall tree... with something at the top!&quot;) print(&quot;Climb tree? Yes [y] or No [n]: &quot;) . Use an event listener to accept the player&#39;s responses. . The player has the option to climb the tree (&quot;y&quot; key) or not (&quot;n&quot; key). If the player chooses not to climb the tree, they should be able to change their decision later. Therefore, we should accept the player&#39;s responses until the &quot;Yes&quot; option has been fulfilled. When this happens, accept_reponse will be set to False. . The event listener should only work if: . the tree has been interacted with: play_collision_text = False | the player has not yet climbed the tree (clicked the &quot;y&quot; key): accept_response = True | . # once the tree has been interacted with, accept responses and prevent interaction from repeating if event.type == KEYDOWN and not play_collision_text and accept_response: if event.key == K_y: print(&quot;y&quot;) print(&quot;You climb to the top and find a KEY.&quot;) accept_response = False elif event.key == K_n: print(&quot;n&quot;) print(&quot;It looks too tall to climb anyway.&quot;) . At the end of the event loop, the tree should be added to the screen: . # add tree image to screen screen.blit(tree_surf, tree_loc) . Text Handling . Let&#39;s make text appear on the screen instead of printing it to the terminal. This is done by rendering a string into text using a Font object and Font.render(). . # get list of available system fonts fonts = pygame.font.get_fonts() for f in fonts: print(f) . arial arialblack bahnschrift calibri cambria cambriamath candara comicsansms consolas constantia corbel couriernew ebrima franklingothicmedium gabriola gadugi georgia impact inkfree javanesetext leelawadeeui leelawadeeuisemilight lucidaconsole lucidasans malgungothic malgungothicsemilight microsofthimalaya microsoftjhenghei microsoftjhengheiui microsoftnewtailue microsoftphagspa microsoftsansserif microsofttaile microsoftyahei microsoftyaheiui microsoftyibaiti mingliuextb pmingliuextb mingliuhkscsextb mongolianbaiti msgothic msuigothic mspgothic mvboli myanmartext nirmalaui nirmalauisemilight palatinolinotype sansserifcollection segoefluenticons segoemdl2assets segoeprint segoescript segoeui segoeuiblack segoeuiemoji segoeuihistoric segoeuisemibold segoeuisemilight segoeuisymbol segoeuivariable simsun nsimsun simsunextb sitkatext sylfaen symbol tahoma timesnewroman trebuchetms verdana webdings wingdings yugothic yugothicuisemibold yugothicui yugothicmedium yugothicuiregular yugothicregular yugothicuisemilight holomdl2assets agencyfb algerian bookantiqua arialrounded baskervilleoldface bauhaus93 bell bernardcondensed bodoni bodoniblack bodonicondensed bodonipostercompressed bookmanoldstyle bradleyhanditc britannic berlinsansfb berlinsansfbdemi broadway brushscript bookshelfsymbol7 californianfb calisto castellar centuryschoolbook centaur century chiller colonna cooperblack copperplategothic curlz dubai dubaimedium dubairegular elephant engravers erasitc erasdemiitc erasmediumitc felixtitling forte franklingothicbook franklingothicdemi franklingothicdemicond franklingothicheavy franklingothicmediumcond freestylescript frenchscript footlight garamond gigi gillsans gillsanscondensed gillsansultracondensed gillsansultra gloucesterextracondensed gillsansextcondensed centurygothic goudyoldstyle goudystout harlowsolid harrington haettenschweiler hightowertext imprintshadow informalroman blackadderitc edwardianscriptitc kristenitc jokerman juiceitc kunstlerscript widelatin lucidabright lucidacalligraphy lucidafaxregular lucidafax lucidahandwriting lucidasansregular lucidasansroman lucidasanstypewriterregular lucidasanstypewriter lucidasanstypewriteroblique magneto maiandragd maturascriptcapitals mistral modernno20 monotypecorsiva extra niagaraengraved niagarasolid ocraextended oldenglishtext onyx msoutlook palacescript papyrus parchment perpetua perpetuatitling playbill poorrichard pristina rage ravie msreferencesansserif msreferencespecialty rockwellcondensed rockwell rockwellextra script showcardgothic snapitc stencil twcen twcencondensed twcencondensedextra tempussansitc vinerhanditc vivaldi vladimirscript wingdings2 wingdings3 hpsimplified hpsimplifiedbdit hpsimplifiedit hpsimplifiedlt hpsimplifiedltit hpsimplifiedrg hpsimplifiedjpanlight hpsimplifiedjpanregular hpsimplifiedhanslight hpsimplifiedhansregular artifaktelementtruetype artifaktelementregulartruetype bankgothic bankgothicmedium cityblueprint commercialpi commercialscript countryblueprint dutch801roman dutch801 dutch801extra euroromanoblique euroroman isocpeur isocteur monospace821 panroman romantic romans sansserifboldoblique sansserif sansserifoblique stylus superfrench swiss721 swiss721outline swiss721condensed swiss721condensedoutline swiss721blackcondensed swiss721extended swiss721blackextended swiss721black swiss721blackoutline technicbold techniclite technic universalmath1 vineta acaderef aigdt amdtsymbols amgdt geniso complex gdt gothice gothicg gothici greekc greeks isocp2 isocp3 isocp isoct2 isoct3 isoct italicc italict monotxt proxy1 proxy2 proxy3 proxy4 proxy5 proxy6 proxy7 proxy8 proxy9 romanc romand romant scriptc scripts simplex syastro symap symath symeteo symusic txt cmb10 cmex10 cmmi10 cmr10 cmss10 cmsy10 cmtt10 dejavusans dejavusansoblique dejavusansdisplay dejavusansmono dejavusansmonooblique dejavuserif dejavuserifdisplay stixgeneralregular stixgeneralbold stixgeneralbolditalic stixgeneralitalic stixnonunicoderegular stixnonunicodebold stixnonunicodebolditalic stixnonunicodeitalic stixsizefivesymregular stixsizefoursymbold stixsizefoursymregular stixsizeonesymbold stixsizeonesymregular stixsizethreesymbold stixsizethreesymregular stixsizetwosymbold stixsizetwosymregular . . Create a Font object with a font and size: . # font = &quot;lucidaconsole&quot;, size = 14-point font = pygame.font.SysFont(&quot;lucidaconsole&quot;, 14) . Inside the event loop, draw the text onto a new Surface using Font.render(text, antialias, color, background). The antialias argument smoothes out the letters if True, so if a pixelated font is desired, set antialias=False. Note that this function can only render one line of text at a time. . # apply the text to a surface; make the text smooth and in red on a white background text = &quot;Have a nice day&quot; text_surf = font.render(text, True, &quot;red&quot;, &quot;white&quot;) . In the same way an image can be added to the screen, use Surface.blit() to make the text appear in the game window: . # make the text appear on the screen with the top left corner located at x=100, y=200 screen.blit(text_surf, (100,200)) . Improving Efficiency . There is no built-in way to handle multiple lines of on-screen text in pygame. If multiple lines are needed, use a function like the one below: . def write_lines(display_surface: pygame.Surface, lines: list[str], x: int, y: int, increment: int, colour: str=&quot;black&quot;): &quot;&quot;&quot; Draws lines of text on the display surface. The top left corner of the first line of text begins at position (x,y) and the y-value increases by the increment for each line. Parameters: - display_surface (pygame.Surface): surface to display text on - lines (list[str]): text to add to screen - x (int): x-value of the top left corner of the first line of text - y (int): y-value of the top left corner of the first line of text - increment (int): number of pixels the y-value will increase by for each consecutive line - colour (str): colour of text Returns: None &quot;&quot;&quot; for line in lines: text_surf = font.render(line, True, colour) display_surface.blit(text_surf, (x,y)) y += increment . Note that the increment should always be larger than the height of the font to prevent lines of text from overlapping. . Going Forward . Feeling confident in your pygame skills? Why not add characters into the game that can talk to the player through the power of AI! Check out the Pygame with AI tutorial here. . References and Companion Files . References: . The Pygame Getting Started Wiki: https://www.pygame.org/wiki/GettingStarted | Education at Bat: Seven Principles for Educators: https://www.gse.harvard.edu/news/uk/09/01/education-bat-seven-principles-educators | Create a Simple Video Game with Pygame - Step by Step Tutorial for Python Beginners! by Python Simplified on YouTube: https://www.youtube.com/watch?v=W-QOtdD3qx4 | . Companion Files: . Public Repository: Intro-to-Pygame-and-AI | A simple pygame example: simple_pygame.py | Video game playthrough (may require downloading): simple_pygame_playthrough.mp4 | Pygame with AI tutorial: Pygame with AI: Using language models in a pygame-based video game! | .",
            "url": "https://de-fellows.github.io/RexCoding/python/pygame/2023/06/21/Intro-to-Pygame.html",
            "relUrl": "/python/pygame/2023/06/21/Intro-to-Pygame.html",
            "date": " • Jun 21, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Making Learning Whole",
            "content": "Introduction . In the Spring 2022 term, the Digital Engineering Fellowship Program supported students in Schulich School of Engineering at the University of Calgary to develop learning materials that would enhance courses in the Digital Engineering Minor. . Fellows identified topics of interest that align with current Digital Engineering courses ranging from Software development, Machine Learning, Internt of Things, and Cyberphysical Systems. Subsequently, they researched the topic, build demonstrators and summarized their activity in a blog post available on this site. . To guide Fellows pedagogially, we studied Perkins Seven Principles 1 explained in this article: Education at Bat: Seven Principles for Educators | Harvard Graduate School of Education. . Below are notes from our discussions and resarch highlighting possible applications to Digital Engineering for each of the seven principles. . 1. Play the whole game . For a given topic, we find a junior version of the game that can be played, end-to-end. . In digital engineering, this can often mean to have software libraries that abstract away the nitty-gritty details and allow to implement the overall workflow with ease. For example, using sklearn to perform machine learning facilitates connecting individual steps without worrying about algorithm implementation. . Furthermore, data might be made available to skip the data collection step, maybe even cleaning the data boferhand so that the focus can be on training and evaluating a model. . 2. Make the game worthwhile playing . This topic speaks to developing an intrinsic motivation for learning. . One approach is demonstrating how a practical skill will result from the learning activity. For example, building a website, or understanding a real world puzzle. . Another approach is to use generative topics: . From Generative Topics - Learning Praxis . Generative topics propose ideas for discussion on a topic that invites students to relate it to other topics and aspects of their personal life. . From Project Zero - Generative Topics . Perkins (1992) puts forth three essential criteria by which the generativity of a topic can be judged: centrality to the discipline, richness of connections, and accessibility to the students. A generative topic, therefore, is the origin from which investigations are spawned, new concepts and understandings are produced, and connections are created. A generative topic is the parent idea pregnant with possibilities for explorations. . and: . a generative topic is concerned first and foremost with the core ideas of the discipline, building disciplinary understanding by focusing on these central ideas. . In machine learning, the hook can be learning. All students are familiar with, well, proficient at learning. How would you teach a machine to learn? How does the machine learn? Furthermore, training and test sets are equivalent to practice exam questions (training) vs real exam (test) - the goal is not to memorize and do well on the training data, the goal is to generalize well on the test data. . 3. Work on the hard parts . Drill/repetition/memory work on important topics. . This could mean practicing loading/cleaning/inspecting data using Pandas: Get many csv files and practice the workflow. . Similarly, analyzing machine learning model evaluation results could be practiced: Given train-validation scores, what is the next step? . Memorizing certain programming language elements would fall under this category as well. Starting from a blank page, implement and run Hello World in the languages you know. Do the same for other common tasks: Read/write files, gradient descent algorithm, etc. . Finally, it might mean unpacking the whole game used in principle 1 and investigate what is under the hood. What are the algorithm details? How are these implemented? Etc. . 4. Play out of town . Taking your knowledge and apply it to a different but related field. . For example: Implement a neural network going from fastai/pytorch to keras/tensorflow. . 5. Uncover the hidden game . Use “What do you see going on? What do you see that makes you think so?” . This is aiming at uncovering strategies, e.g. strategies of problem solving, “What do you do to solve problems”. Perkins mentions that simply teaching strategies is not enough, and there needs to be an element of self-management on the part of the student. . In Python programming for example, when do you use list comprehensions vs. regular loops? While there might be some clear-cut situations, you will develop your own strategies where you use tools. . Another example would be “How are introductions to programming languages structured?”. It usually starts with explaning if it is a compiled or an interpreted language and what you need to do to run a program. Then Hello World, followed by variable type, operators, structural constructs (if-else, for, etc.), functions, objects, I/O, etc. . In that sense it is about discovering higher-level patterns in the topics you learn through reflection. It seems closely related to Principle 7. Learn the game of learning. . 6. Learn from the team . This is probably the principle already in use often - Peer work, project-based learning, capstone projects, hackathons, etc. In a programming course it would be nice to add peer code review: Students review eachothers code and provide feedback. How well does this work with lower levels of proficiency? . 7. Learn the game of learning . Students take charge of their leanring path. I read this as less structure and pulling through students, more self-dicovery. Does that work in a minor with a high workload? . Learning is life-long, especially in engineering. We have to become good at learning new technologies and methodologies. . Summary . In our discussions, DE Fellows were excited to consider principles: . 1. Play the whole game | 2. Make the game worthwhile playing | 4. Play out of town | . and you will find references to these topics at the start of many of the blog posts from the Spring 2022 edition. Enjoy! . Thanks to Jeremy at fastai for introducing me to Perkins. &#8617; . |",
            "url": "https://de-fellows.github.io/RexCoding/pedagogy/2022/08/29/Perkins-Principles.html",
            "relUrl": "/pedagogy/2022/08/29/Perkins-Principles.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "From Rest API to GraphQL",
            "content": "Goals . Build a simple web application that sorts different genres of music using Rest API and Flask. Set up basic Flask web-server | Set up a database model using SCLAlchemy. | Manipulate the database. | . | Implement the above using graphQL. | . How the project relates to the Digital Engineering curriculum . In the scope of this project, we are going to focus on the fourth principle Playing out of town from Making Learning Whole: Education at Bat: Seven Principles for Educators. David Perkins focuses on the learner&#39;s ability to take their skills to the next level. He encourages learners to develop transferrable knowledge that can be used flexibly in other fields. For instance, . Students already know how to use Flask to develop a web server. | Students have worked with a different type of SQL (ORM) to manipulate databases. | Students have a former knowledge of HTTP methods. | Students are encouraged to discover how to use their previous knowledge and skills to achieve a similar output with a different approach. By the end of this article, students will: . Have an introductory knowledge of a new query language. | Learn the basic syntax of that language. | Learn how to create and query data. | Brief introduction . API stands for Application Programming Interface, A set of definitions and protocols for integrating web applications. In other words, it is a setup that allows two pieces of software to connect and communicate with each other. We know that every software differs from one another. When the two pieces of software communicate, one software will deal with whatever in the backend which is the main server. The other software will make requests to the server to retrieve data in the frontend. Rest API stands for Representational State Transfer. As the name implies, this type of API helps transfer data over the internet. This allows users to only view specific things from the backend. GraphQL is a declarative query programming language for APIs and a server-side runtime. GraphQL is designed to make APIs fast, flexible and developer-friendly. It simply gives the client the privelage of to ask for exactly what they need and only what the need. This makes it easier when dealing with more complex databases that contain huge amounts of data. GraphQL is used to query data from any number of sources. Thankfully, both Rest APIs and graphQL pair with python nicely. In this project, we will try to build an application to store information about music genres using Rest API and then we will try to implement it with graphQL. This example is inspired from Caleb Curry where you can find it here. . Setting up a basic Rest API . Let us start by creating our own Rest API with python. We will use Flask as our framework. Flask is highly recommended since it is a simpler setup than other frameworks like Django and Ruby. However, any other framework will do the job. Flask runs on localhost:5000. We are going to install the dependencies that we need to be able to work with the framework in our preferred environment. As a side note, working in a virtual environment is highly recommended as it isolates the installations. I will assume that you already know how to setup a virtual environment and will dive straight into the development of the flask app. Write the following in the terminal to install the dependencies: . # pip install flask-sqlalchemy # pip install requests . Create a file and name it RestApp.py in which we can write our initial code. Start by initializing the flask app. For now, we will return a simple string. This will give an HTTP response message of 200 OK, meaning the server is running without any problems. To familiarize yourself with more response codes, you can have a look at this Wikipedia Article. . from flask import Flask app = Flask(__name__) @app.route(&#39;/&#39;) def index(): return &quot;Music Genres!&quot; if __name__ == &quot;__main__&quot;: app.run() . * Serving Flask app &#39;__main__&#39; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: off . * Running on http://127.0.0.1:5000 (Press CTRL+C to quit) . . . In the terminal, we would like to export the flask app to be able to run it. We have to do the following every time we want to run our flask app. . # SET FLASK_ENV=development # flask run . Now we will create a class to store music genres inherited from an SQLAlchemy database model. The attribute unique here is used if we want every name to be different, and the attribute nullable is used if we do not want any columns in our table to be empty. The __repr__ method represents the class&#39;s object as a readable string. . class Music(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String, unique=True, nullable=False) description = db.Column(db.String(120)) def __repr__(self): return f&quot;{self.name} - {self.description}&quot; . Link the database (SQLAlchemy) . SQLAlchemy is a library that allows communication between python programs and relational databases. It is used as a tool to convert python classes to data tables. If we go back to the terminal and try to import the database, we will find that the database has not yet been defined. So, we need to connect to the database using a Database URI. Thus, The database will be an instance of SQLite in the same directory. . from flask_sqlalchemy import SQLAlchemy app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///music.db&#39; db = SQLAlchemy(app) . The next step is to import the database from our application to create our desired data tables in the terminal. This will create a music.db file in our repository. We will create our first entry in the database. Each piece of data is treated as an object of the class that we created. Thus, creating data is creating instances of the class Music and assigning it parameters to describe the data. Because we used the __repr__ method, we can type music, and the list of music genres will be listed in a string format. Note that it is important to import the class in the fourth line, or else the instance Music will not be defined. To test that we added a data row successfully, we can type in music into the terminal, and it will give us the data that we entered. . # from RestApp import db # db.create_all() # from RestApp import Music # db.session.add(music) # db.session.commit() . To add another music genre to the database, type the following: . # db.session.commit() # Music.query.all() . If we want to use our data with the server, we must go back to the route(/music). Here we will implement a JSON list and iterate through the music genres. This way, the output will be in the form of a list of dictionaries containing the data. We can go back to the website and reload it; the data will be displayed with one key, which is music and a pair of a list of dictionaries (i.e. name, description). . @app.route(&quot;/music&quot;) def get_music(): music = Music.query.all() output = [] for music in Music: music_info = {&#39;name&#39;: music.name, &#39;description&#39;: music.description} output.append(music_info) . If we want to grab a specific genre, an effortless way would be fetching it by its id. So to do this, we develop a new route. In this route, we will implement a new function and pass the id of a specific music genre because we are using dictionaries to store the data. . . @app.route(&#39;/music/&lt;id&gt;&#39;) def get_music_id(id): music = Music.query.get_or_404(id) # this will either fetch the genre with a specific id or return a 404 error return {&quot;name&quot;: music.name, &quot;description&quot;:music.description} . Let&#39;s test this out by going back to the browser and typing localhost5000/music/1. . . Now try to fetch a music genre with id 3. The result would be a &#39;Not Found&#39; error as we have not yet entered the third genre into our database. . . Additional HTTP Methods . When working with REST APIs, HTTP methods are usually used to manipulate our database. The most well-known HTTP methods are: . POST: creates new resources in the database | GET: retrieves a representation of an existing resource in the database | PUT: updates a resource in the database | DELETE: removes a resource from the database | These methods are known as &quot;CRUD&quot; which stands for create, read, update and delete respectively. . Introduction to GraphQL . We introduced the query language GraphQL, but the question is, what makes GraphQL more unique, and how does it differ from a REST API? GraphQL was developed internally by Facebook in 2012 before being publicly released in 2015. Facebook developed that language to solve a problem that REST APIs do not address; the need for APIs to be able to adapt to the rapid changes required by the frontend. . . REST APIs are modelled as resources. We provide various endpoints to access particular data and define which HTTP methods are used at each endpoint. On the other hand, GraphQL models the API as a graph. While the backend is still responsible for access controls and deals with how data gets passed between the frontend and the database, GraphQL removes the backend requirement of needing to create specific endpoints for each type of data needed and generates only one endpoint across all objects. It lets developers construct requests that pull data from multiple data resources in a single API call. The GraphQL special Schema Definition Language (SDL) allows for defining the types and fields of each type of data. The types defined in a GraphQL schema are treated as nodes. The client can then make queries at a specific endpoint to access data at that particular node of interest to get the specific data it wants. For more information, look at the official GraphQL documentaion. The main advantages of querying data with GraphQL are: . Reduces web-app development efforts. | Reduces bandwidth: querying only what we need and only what we need | Reduces the number of requests | . Requirements . As mentioned previously, flask is just a framework that makes it easier to build and configure web applications, and Flask_SQLAlchemy is an extension used for flask that allows us to interact with our SQL database using SQLAlchemy. Introducing Graphene, it is a library that helps us implement and integrate GraphQL APIs in python. Several other libraries can be used to integrate GraphQL APIs (for example, Ariadne). However, for this project, we will work with Graphene. . What is the difference between Ariadne and Graphene? The main difference between the two is that Ariadne uses a schema-first approach while Graphene uses a code-first approach. What does this mean? A schema-first approach is about writing the schema first and then implementing the code to satisfy the definitions of the schema. In a code_first approach, we start by coding the resolvers which are functions connecting the schema types to the backend. As a result, the schema is generated based on our code. According to Prisma&#39;s Nikolas Burk, developers usually prefer Graphene over Ariadne because there are no features supported by a schema-first approach that are not supported by a code-first approach. . Developing our GraphQL Alternative . In a different module which we will call graphQL_App.py, we will start adding to the code and integrate the graphQL method step by step. First of all, we need to install the library Graphene. Graphene comes with built-in support for SQLAlchemy. We will also need the GraphQL extension for Flask to be able to view the schema through HTTP. Note that we already installed flask and flask-sqlalchemy, so there is no need to redo the installation. Thus, we will go ahead and write the following commands in the terminal to install the remaining dependencies: . # pip install graphene-sqlalchemy # pip install flask_graphql . Now that we have installed the dependencies to work with GraphQL, we will take the code in RestApp.py and adjust it. To recap, the full code should look like this: . from flask import Flask from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///music.db&#39; db = SQLAlchemy(app) class Music(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String, unique=True, nullable=False) description = db.Column(db.String(120)) def __repr__(self): return f&quot;{self.name} - {self.description}&quot; @app.route(&#39;/&#39;) def index(): return &quot;&lt;h1&gt;Music Genres!&lt;/h&gt;&quot; @app.route(&quot;/music&quot;) def get_music(): music = Music.query.all() output = [] for genre in music : music_info = {&#39;name&#39;: genre.name, &#39;description&#39;: genre.description} output.append(music_info) return {&quot;music&quot;: output} @app.route(&#39;/music/&lt;id&gt;&#39;) def get_music_id(id): music = Music.query.get_or_404(id) # this will either fetch the drink with a specific id or return a 404 error return {&quot;name&quot;: music.name, &quot;description&quot;:music.description} if __name__ == &quot;__main__&quot;: app.run() . Let&#39;s start doing the required imports in our code: . from flask import Flask from flask_sqlalchemy import SQLAlchemy import graphene from graphene_sqlalchemy import SQLAlchemyObjectType, SQLAlchemyConnectionField from flask_graphql import GraphQLView . Proceed with creating the flask application, creating a database model, and configuring the model with Graphene. In our case, we already created a database model music.db, so there is no need to create another one. . app = Flask(__name__) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///music.db&#39; db = SQLAlchemy(app) class Music(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String, unique=True, nullable=False) description = db.Column(db.String(120)) def __repr__(self): return f&quot;{self.name} - {self.description}&quot; #################################################### class MusicObject(SQLAlchemyObjectType): class Meta: model = Music interfaces = (graphene.relay.Node, ) #################################################### @app.route(&#39;/&#39;) def index(): return &quot;&lt;h1&gt;Music Genres!&lt;/h&gt;&quot; if __name__ == &quot;__main__&quot;: app.run() . Query and Mutation Classes . A Query class: . class Query(graphene.ObjectType): node = graphene.relay.Node.Field() all_music = SQLAlchemyConnectionField(MusicObject) . A Mutation class: . class CreateMusic(graphene.Mutation): class Arguments: name = graphene.String(required=True) description = graphene.String(required=True) music = graphene.Field(lambda: MusicObject) def mutate(self, info, name, description): # method to be called when writing data music = Music( name = name, description = description ) if music: db.session.add(music) db.session.commit() return CreateMusic(music=music) # Mutation class class Mutation(graphene.ObjectType): create_music = CreateMusic.Field() . After writing our code, we can go ahead and define our schema: . schema = graphene.Schema(query=Query, mutation=Mutation) . The final part is exposing the GraphQL view using the function view_func. . app.add_url_rule( &#39;/graphql&#39;, view_func=GraphQLView.as_view( &#39;graphql&#39;, schema=schema, graphiql=True ) ) . If we run our code by typing python graphQL_App.py in the terminal and then go back to the browser to type localhost:5000/graphql in the search bar, the following view will appear: . . Querying the database . Now we can make queries to our database through the GraphiQL integrated developement environment (IDE). A Query is the equivalent to a GET request when working with REST APIs. We can request data in a Query and receive data in a Response containing only the requested data. Looking at the example below, the response on the right has the same shape as the query itself, making it easier to identify the fields that are returned. . . We can even be more specific and request only the names of the genres. . Modifying the database . GraphQL Queries can be implemented in a sense to cause modifications to the data in the server. By convention, any operation that causes a data write in GraphQL is called a mutation. Mutations are the equivalent of the POST, PUT, and DELETE methods. In this example, the mutation class will refer to another class, CreateMusic. Refer to the code under A mutation class. Let&#39;s test our mutation class by creating a new entry. . mutation{ createMusic(name:&quot;Jazz&quot;, description:&quot;propulsive syncopated rhythms&quot;){ music{ name description } } } . Conclusion . Congratulations on reaching this far! This mini-tutorial introduced some basic concepts about GraphQL and how it compares to REST APIs. We demonstrated how to build a simple web application, and allowing the client to provide custom data using URL parameters and interactivity with databases using SQLAlchemy. As a next step, a good recommendation would be to work on projects involving multiple relational databases and discover how to query them using GraphQL. . References . Using GraphQL with python – A complete guide. Apollo GraphQL Blog. (n.d.). Retrieved July 1, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.apollographql.com/blog/graphql/python/complete-api-guide/ Gwalugano, K. (2021, December 6). Build a graphql API with Python, Flask, and Ariadne. LogRocket Blog. Retrieved July 1, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://blog.logrocket.com/build-graphql-api-python-flask-ariadne/ Turning a rest API into graphql using StepZen: Stepzen Blog. StepZen. (n.d.). Retrieved July 1, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://stepzen.com/blog/rest-to-graphql Ansurkar, A. (2020, June 4). Getting started with graphql and Flask. Medium. Retrieved July 1, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://python.plainenglish.io/getting-started-with-graphql-and-flask-13a99513e764 Dyouri, A. (2020, April 16). How to make a web application using flask in python 3. DigitalOcean. Retrieved July 1, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.digitalocean.com/community/tutorials/how-to-make-a-web-application-using-flask-in-python-3 Getting started. Graphene. (n.d.). Retrieved July 1, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://docs.graphene-python.org/en/latest/quickstart/ Bruno KrebsR&amp;D Content ArchitectI am passionate about developing highly scalable. (2017, November 9). SQLAlchemy orm tutorial for python developers. Auth0. Retrieved July 3, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://auth0.com/blog/sqlalchemy-orm-tutorial-for-python-developers/ Queries and mutations. GraphQL. (n.d.). Retrieved July 3, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://graphql.org/learn/queries/ Dechalert, A. (2020). What&#39;s the difference between REST and GraphQl . Retrieved July 4, 2022, from &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.tabnine.com/blog/rest-api-vs-graphql/. .",
            "url": "https://de-fellows.github.io/RexCoding/python/graphql/flask/sqlalchemy/graphene/2022/06/29/Rest-GraphQL.html",
            "relUrl": "/python/graphql/flask/sqlalchemy/graphene/2022/06/29/Rest-GraphQL.html",
            "date": " • Jun 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "SOLID principles in Java",
            "content": "SOLID principles code translation in Java . Published by Saman Pordanesh . Introduction . SOLID is an acronym for the first five object-oriented design (OOD) principles. These principles establish practices that lend to developing software with considerations for maintaining and extending as the project grows. Adopting these practices can also contribute to avoiding code smells, refactoring code, and Agile or Adaptive software development. SOLID stands for: S - Single-responsiblity Principle O - Open-closed Principle L - Liskov Substitution Principle I - Interface Segregation Principle D - Dependency Inversion Principle | You need to watch the video first, understand all principles, and then look at the translation codes in Java. This documentation will help you to understand the translation better. | This translation is based on the final code source of Solid Principles lessons in python programming languages (dependency-inversion-after.py) | We need a separate class with the main function to run the program, despite Python, which you can each .py file individually. Main.java is the file with the main function for that purpose. | Standard naming on java is different. You can find more information here. | . Directories changes . This is one of the most significant changes we made to our translation. A Java project with an exact directory with all dependencies can be good practice for OOP designing. | We defined a package name for this project as edu.def.solid (package naming standards) and its specific directory under the src folder. This package name keeps all project components connected to gather when we implement them on different .java files. | However, packages are not necessary, you could use a default package, or even have all classes in the same file; this is more Java best practice. | More information about Java’s project directory standards is here. | . SOLID Principles - Code progression . First, please consider the original code OrderOriginal.java and see how the code looks like, before implementing SOLID Principles. | Applying the S (Single Responsibility Principle) order has too many responsibilities, such as adding a new class PaymentProcessor and separating out two different pay() methods. | By applying O (Open/Closed Principle), we added an extra payment method which would require changing PaymentProcessor class. Making an interfaces from PaymentProcessor is one of them, which gives us the ability to specialize inherited classes in terms of payment methods; Like adding PaypalProcessor class which is inheriting PaymentProcessor interfaces. | Applying L (Liskov Substitution Principle) on PaypalProcessor, securityCode will be substituted by emailAddress as a class parameter, not a function’s argument anymore. Also, it will be valued at the class’s constructor and not on the pay() method. | By refactoring because of I (Interface segregation), we added SMS authentication to PaymentProcessor. Before that there was a problem (Liskov violation) with credit payment, that was no SMS authorization. | Applying I (Interface segregation) with inheritance. Create two interfaces: PaymentProcessor with pay () method and PaymentProcessorSMS interface which inherits from PaymentProcessor, as well as adding authSMS() method. | Applying I (Interface segregation) with composition. Create two interfaces: PaymentProcessor with pay() , and create a SMSAuthorizer class which is passed to all class’s constructors that need a kind of SMS authentication (aggregation). | Applying D (Dependency inversion). Desire to add another type of authorizer. Some processor classes depend on SMSAuthorizer. We created an interface Authorizer to have a more general interface for authorizing by SMS, Google or NotRobot. Also, a new NotARobotAuthorizer was added. | Compiling Instruction . Run the command prompt inside the src folder. | Run the following command to compile all .java files: javac edu/def/solid/*.java . | To execute the program, we should run the Main.java file from the command prompt. To do this, from the same directory, run the following command on the command prompt: java edu.def.solid.Main . If your main function is in a different class, put the name of that class instead of Main at the end of the command . | You can find more about compiling instruction here | . Classes changes . Order . Python version . class Order: def __init__(self): self.items = [] self.quantities = [] self.prices = [] self.status = &quot;open&quot; def add_item(self, name, quantity, price): self.items.append(name) self.quantities.append(quantity) self.prices.append(price) def total_price(self): total = 0 for i in range(len(self.prices)): total += self.quantities[i] * self.prices[i] return total . Java version . package edu.def.solid; public class Order { private String[] items; private int[] quantities; private int[] prices; private String status = &quot;open&quot;; int numberOfItems = 0; Order(int numberOfItems){ items = new String[numberOfItems]; quantities = new int[numberOfItems]; prices = new int[numberOfItems]; } public void addItem(String name, int quantity, int price){ this.items[numberOfItems] = name; this.quantities[numberOfItems] = quantity; this.prices[numberOfItems] = price; numberOfItems++; } public int totalPrice(){ int total = 0; for (int i = 0; i &lt; numberOfItems; i++){ total += this.quantities[i] * this.prices[i]; } return total; } public void setStatus(String status) { this.status = status; } public String getStatus() { return status; } } . In this class, we need to clarify each array’s size as a Java programming rule. We can do it at the initializer by passing the number of items on the class constructor. | We implemented all variables (items, quantities, …) as class attributes on Java with private visibility to protect them from direct access out of the class. Also, status has a default value of “open”. | A variable like numberOfItems is needed to keep track of the arrays and access them later, as Java doesn’t automatically detect where should add a new item in the array (nothing like append in python). In addition, we should keep updating this variable by adding every single item (in the addItem function). | getters and setters for each private parameter, are not required; You can access fields directly by making parameters public in Java as well, but it’s (private parameters) frequently done in Java as an OOP principle. We followed that principle here and as we will need to access status in other classes, we defined getter and setter for this class’s parameter. | Authorizer . Python version . class Authorizer(ABC): @abstractmethod def is_authorized(self) -&gt; bool: pass . Java version . package edu.def.solid; public interface Authorizer { public boolean isAuthorized(); } . This class was an abstract class on the python version. Abstracts are usually used when we want to implement a specific function with all its functionalities that all children will use in the future. But when we need only the prototype (function naming, return type and arguments only), which will be implemented by each child later, we use interfaces in Java programming. As a result, we implement the Authorizer class as an interface class containing the isAuthotized function prototype. . | A class in Java can inherit an interface by the “implements” keyword after the class name. . | public class AuthorizerSMS implements Authorizer{ ... . Also, all interface methods should be overridden in this child class (implement them completely) . @Override public boolean isAuthorized() { return this.authorized; } . AuthorizerSMS . Python version . class Authorizer_SMS(Authorizer): def __init__(self): self.authorized = False def verify_code(self, code): print(f&quot;Verifying SMS code {code}&quot;) self.authorized = True def is_authorized(self) -&gt; bool: return self.authorized . Java version . package edu.def.solid; public class AuthorizerSMS implements Authorizer{ private boolean authorized = false; public void verifyCode(int code){ System.out.print(&quot;Verifying SMS code &quot; + code); this.authorized = true; } @Override public boolean isAuthorized() { return this.authorized; } } . We defined the variable authorized as a private class attribute. | The isAuthorized method was overridden based on its interface, inheriting that (Authorizer). . | At the verifyCode method, we appended the variable to the printed text by the “+**” sign, although in python, a formatting printing method was used (the **f char at the start of the string) | AuthorizerGoogle . Python version . class Authorizer_Google(Authorizer): def __init__(self): self.authorized = False def verify_code(self, code): print(f&quot;Verifying Google auth code {code}&quot;) self.authorized = True def is_authorized(self) -&gt; bool: return self.authorized . Java version . package edu.def.solid; public class AuthorizerGoogle implements Authorizer { private boolean authorized = false; public void verifyCode(int code){ System.out.print(&quot;Verifying Google code &quot; + code); this.authorized = true; } @Override public boolean isAuthorized() { return this.authorized; } } . The same points as AuthorizerSMS . AuthorizerRobot . Python version . class Authorizer_Robot(Authorizer): def __init__(self): self.authorized = False def not_a_robot(self): self.authorized = True def is_authorized(self) -&gt; bool: return self.authorized . Java version . package edu.def.solid; public class AuthorizerRobot implements Authorizer { private boolean authorized = false; public void notARobot(){ this.authorized = true; } @Override public boolean isAuthorized() { return this.authorized; } } . The same points as AuthorizerSMS . PaymentProcessor . Python version . class PaymentProcessor(ABC): @abstractmethod def pay(self, order): pass . Java version . package edu.def.solid; public interface PaymentProcessor { public void pay(Order order) throws Exception; } . this class is an interface and acts the same as the Authorizer class. This is an interface which imposes the implementation of a specific method on each child, which will be inherent in this interface. | In addition, be careful that the order argument in the payment method is in the type of Order class. (We call it non-primitive data type) | We have an Exception method under a specific condition in the python. In Java, we must specify the “throws Exception” keyword on the function’s prototype and interface. | DebitPaymentProcessor . Python version . class DebitPaymentProcessor(PaymentProcessor): def __init__(self, security_code, authorizer: Authorizer): self.security_code = security_code self.authorizer = authorizer def pay(self, order): if not self.authorizer.is_authorized(): raise Exception(&quot;Not authorized&quot;) print(&quot;Processing debit payment type&quot;) print(f&quot;Verifying security code: {self.security_code}&quot;) order.status = &quot;paid&quot; . Java version . package edu.def.solid; public class DebitPaymentProcessor implements PaymentProcessor{ private int securityCode; private Authorizer authorizer; DebitPaymentProcessor(int securityCode, Authorizer authorizer){ this.securityCode = securityCode; this.authorizer = authorizer; } @Override public void pay(Order order) throws Exception { if (!authorizer.isAuthorized()){ throw new Exception(&quot;Not authorized&quot;); } System.out.println(&quot;Processing debit payment type&quot;); System.out.println(&quot;Verifying security code: &quot; + this.securityCode); order.setStatus(&quot;paid&quot;); } } . We have a constructor to specify two-class parameter values, securitycode and authorizer. Notice that authorizer is a non-primitive data type in the type of Authorizer. | We specified all parameters as private because of the Java OOP rules and without getter and setter, as they are being used only for internal purposes. | The pay method is an overridden method from the PaymentProcessor interface. It shows us that this class inherits the PaymentProcessor interface. | The pay method in this class throws an exception, so we need “throws Exception” keyword at the method’s prototype. | CreditPaymentProcessor . Python version . class CreditPaymentProcessor(PaymentProcessor): def __init__(self, security_code): self.security_code = security_code def pay(self, order): print(&quot;Processing credit payment type&quot;) print(f&quot;Verifying security code: {self.security_code}&quot;) order.status = &quot;paid&quot; . Java version . package edu.def.solid; public class CreditPaymentProcessor implements PaymentProcessor { private int securityCode; CreditPaymentProcessor(int securityCode){ this.securityCode = securityCode; } @Override public void pay(Order order){ System.out.println(&quot;Processing credit payment type&quot;); System.out.println(&quot;Verifying security code: &quot; + this.securityCode); order.setStatus(&quot;paid&quot;); } } . The same points of debitPaymentProcessor will apply for this class, except we don’t have the authorizer parameter and any exceptions for the pay method. . PaypalPaymentProcessor . Python version . class PaypalPaymentProcessor(PaymentProcessor): def __init__(self, email_address, authorizer: Authorizer): self.email_address = email_address self.authorizer = authorizer def pay(self, order): if not self.authorizer.is_authorized(): raise Exception(&quot;Not authorized&quot;) print(&quot;Processing paypal payment type&quot;) print(f&quot;Using email address: {self.email_address}&quot;) order.status = &quot;paid&quot; . Java version . package edu.def.solid; public class PaypalPaymentProcessor implements PaymentProcessor{ private String emailAddress; private Authorizer authorizer; PaypalPaymentProcessor(String emailAddress, Authorizer authorizer){ this.emailAddress = emailAddress; this.authorizer = authorizer; } @Override public void pay(Order order) throws Exception { if (!authorizer.isAuthorized()){ throw new Exception(&quot;Not authorized&quot;); } System.out.println(&quot;Processing paypal payment type&quot;); System.out.println(&quot;Using email address: &quot; + this.emailAddress); order.setStatus(&quot;paid&quot;); } } . The same points of debitPaymentProcessor will apply to this class. Only some changes about authentication and change from security code to email verification. .",
            "url": "https://de-fellows.github.io/RexCoding/python/java/oop/2022/06/27/9-SolidPrinciples.html",
            "relUrl": "/python/java/oop/2022/06/27/9-SolidPrinciples.html",
            "date": " • Jun 27, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Object Pool code translation in Java",
            "content": "Object Pool code translation in Java . Published by Saman Pordanesh . General Instructions . Object pool pattern is a software creational design pattern which is used in situations where the cost of initializing a class instance is very high. | You need to watch the video first, understand all principles, and then look at the translation codes in Java. This documentation will help you to understand the translation better. | This translation is based on the final code source of the Object Creation lessons in python programming languages (object-pool.py). We skipped Object Pool Context and Singleton lessons in this translation for just focusing on Object Pool. | We need a separate class with the main function to run the program, despite Python, in which you can run each .py file individually. Main.java is the file with the main function for that purpose. | Standard naming on Java is different. You can find more information here. | . Directories changes . This is one of the most significant changes we made to our translation. A Java project with the same directory with all dependencies can be good practice for OOP designing. | We defined a package name for this project as edu.def.op (package naming standards) and its specific directory under the src folder. This package name keeps all project components connected to gather when we implement them on different .java files. | However, packages are unnecessary; you could use a default package or even have all classes in the same file; this is more Java best practice. | More information about Java’s project directory standards is here. | . Implementational Instruction . this lesson will be an easy one in terms of translation. We recommend focusing on Object Pool definition and principles more. You can find good resources on the internet. In addition, these two articles may help 1, 2. | We will create one .java file per class under edu.def.op package. They can be interfaces and child classes or simple classes. | Main.java contains our main () method to run the program. | Note that all steps here are entirely for the best OOP practice in Java programming; They can be done more straightforwardly, but not the best OOP ways. | Compiling Instruction . Run the command prompt inside the src folder. | Run the following command to compile all .java files: javac edu/def/op/*.java . | To execute the program, we should run the Main.java file from the command prompt. To do this, from the same directory, run the following command on the command prompt: java edu.def.op.Main . | If your main function is in a different class, but the name of that class instead of Main at the end of the command | You can find more about compiling instructions here. | . Classes changes . Reusable . Python version . class Reusable: def test(self): print(f&quot;Using object {id(self)}&quot;) . Java version . package edu.def.op; public class Reusable { public void test(){ System.out.println(&quot;Using object &quot; + System.identityHashCode(this)); } } . Not any notable differences. | Controller . Python version . class ReusablePool: def __init__(self, size): self.size = size self.free: List[Reusable] = [] self.in_use: List[Reusable] = [] for _ in range(0, size): self.free.append(Reusable()) def acquire(self) -&gt; Reusable: assert len(self.free) &gt; 0 r = self.free[0] self.free.remove(r) self.in_use.append(r) return r def release(self, r: Reusable): self.in_use.remove(r) self.free.append(r) . Java version . package edu.def.op; import java.util.ArrayList; public class ReusablePool { private int size; private ArrayList&lt;Reusable&gt; free; private ArrayList&lt;Reusable&gt; inUse; ReusablePool(int size){ this.size = size; this.free = new ArrayList&lt;&gt;(); this.inUse = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; size; i++){ this.free.add(new Reusable()); } } public Reusable acquire(){ assert this.free.size() &gt; 0; Reusable r = this.free.get(0); this.free.remove(r); this.inUse.add(r); return r; } public void release(Reusable r){ this.inUse.remove(r); this.free.add(r); } } . In this class, we define all our parameters in the constructor. We just passed a value for size; the two ArrayLists will be designated empty arrays. |",
            "url": "https://de-fellows.github.io/RexCoding/python/java/oop/2022/06/24/10-ObjectPool.html",
            "relUrl": "/python/java/oop/2022/06/24/10-ObjectPool.html",
            "date": " • Jun 24, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "MVC in Java",
            "content": "MVC (Model-View-Controller) code translation in Java . Published by Saman Pordanesh . General Introduction . MVC (Model-View-Controller) is a pattern in software design commonly used to implement user interfaces, data, and controlling logic. It emphasizes the separation between the software’s business logic and display. For more, click here. | You need to watch the video first, understand all principles, and then look at the translation codes in Java. This documentation will help you to understand the translation better | This translation is based on the final code source of the MVC lessons in python programming languages (mvc-after-strategy.py). | Point: This translation is much more different from the original Python version’s structure, libraries, and functionalities in this Java version. It’s caused as we have two different libraries for UI (user interface) in Python and Java, which follow different structures. | We need a separate class with the main function to run the program, despite Python, in which you can run each .py file individually. Main.java is the file with the main function for that purpose. | Standard naming on Java is different. You can find more information here. | . Directories changes . This is one of the most significant changes we made to our translation. A Java project with the same directory with all dependencies can be good practice for OOP designing. | We defined a package name for this project as edu.def.mvc (package naming standards) and its specific directory under the src folder. This package name keeps all project components connected to gather when we implement them on different .java files. In addition, we have a sub package edu.def.mvc.uuid for the UUID interface and its children, as far as the strategy is concerned. (Have different strategies for generating different UUIDs) | However, packages are unnecessary; you could use a default package or even have all classes in the same file; this is more Java best practice. | More information about Java’s project directory standards is here. | . Implementational Instruction . We will create one .java file per class under edu.def.mvc package. They can be interfaces and child classes or simple classes. In addition, in this lesson, we have a sub-package “edu.def.mvc.uuid” in a separate folder on the main package directory to hold a class category that behaves similarly. Learn more about sub-packages here. | In this project, we use Java GUI libraries AWT and Swing, which have a different structure and functionality than Python’s Tkinter library for the same purpose. E.g., we don’t need a loop in the Java version to run the UI, although we need it in the Python version. Complete tutorial about Java GUI with Swing here. | We have three MVC classes: Model.java, Controller.java and View.java**. In addition, we have a class called **SwingView.java, which implements View.java and handle all user interface codes. From that class, we combine all MVC principles to run an application. Finally, the interface GenerateUuid.java and its children Uuid.java, Uuid4.java and UuidString.java are classes to generate different UUIDs, depending on which one we choose on the main () method. | Main.java contains our main () method to run the program. | Note that all steps here are entirely for the best OOP practice in Java programming; They can be done more straightforwardly, but not the best OOP ways. | Compiling Instruction . Run the command prompt inside the src folder. | Run the following command to compile all .java files: javac edu/def/mvc/*.java . | To execute the program, we should run the Main.java file from the command prompt. To do this, from the same directory, run the following command on the command prompt: java edu.def.mvc.Main . | If your main function is in a different class, but the name of that class instead of Main at the end of the command | You can find more about compiling instructions here. | . Classes changes . Model . Python version . class Model: def __init__(self): self.uuid = [] . Java version . package edu.def.mvc; import java.util.ArrayList; import java.util.UUID; /** @author Saman Pordanesh &lt;a href=&quot;mailto:sina.pordanesh@yahoo.com&quot;&gt; sina.pordanesh@yahoo.com&lt;/a&gt; @version 1.0 @since 1.0 */ /** * This is the Model class which should act as a database in this program. * This model is pretty simple, and we can hold the whole data on a simple ArrayList. * In complicated versions, Model class should connect with an external database. */ public class Model { private ArrayList&lt;UUID&gt; uuids; Model(){ uuids = new ArrayList&lt;&gt;(); } public void setUuids(ArrayList&lt;UUID&gt; uuids) { this.uuids = uuids; } public ArrayList&lt;UUID&gt; getUuids() { return uuids; } public void addUuid(UUID uuid){ this.uuids.add(uuid); } public void clearModel(){ this.uuids.clear(); } } . This class required an ArrayList to act as a data holder. We will keep all generated UUIDs in this ArrayList and use them through the program. | As the ArrayList is a private parameter and we need access to it in other classes, we have getter and setter methods for this purpose. In addition, addUuid () is used to add a generated UUID to the model and clearModel () is used to clear the whole model when needed. However, by making the ArrayList a public parameter, we won’t need getter, setter, add and clean functions, but all of them are for best OOP practices. | Controller . Python version . class Controller: def __init__(self, model, view, generate_uuid): self.model = model self.view = view self.generate_uuid = generate_uuid def start(self): self.view.setup(self) self.view.start_main_loop() def handle_click_generate_uuid(self): # generate a uuid and add it to the list self.model.uuid.append(self.generate_uuid()) self.view.append_to_list(self.model.uuid[-1]) def handle_click_clear_list(self): # clear the uuid list in the model and the view self.model.uuid = [] self.view.clear_list() . Java version . /** @author Saman Pordanesh &lt;a href=&quot;mailto:sina.pordanesh@yahoo.com&quot;&gt; sina.pordanesh@yahoo.com&lt;/a&gt; @version 1.0 @since 1.0 */ package edu.def.mvc; import edu.def.mvc.uuid.GenerateUuid; import java.util.UUID; /** * Controller class */ public class Controller { private Model model; private View view; private GenerateUuid generateUuid; Controller(Model model, View view, GenerateUuid uuid){ this.model = model; this.view = view; this.generateUuid = uuid; } //start the initial UI public void start(){ this.view.setup(this); } //handle &quot;Generate UUID&quot; button and public void handleClickGenerateUuid(){ this.model.addUuid(this.generateUuid.generateUuid()); } //handle &quot;Clear list&quot; button and public void handleClickClearList(){ this.model.clearModel(); this.view.clearList(); } //getting the Model object to use its data public Model getModel() { return model; } } . This class controls all actions in the program and acts as a connector between View and Model as well (as you can see, we have both View and Model objects as parameters of this class). | We have a parameter of the GeneratedUuid interface. We pass the GeneratedUuid children to the Controller class by its constructor to define which kind of UUID we want to generate in the application. | In the start () method, we call the setup () method of the View object to start GUI’s engine. | The following method is handleClickGenerateUuid () when the user clicks on the “Generate UUID” button. This method should generate a UUID by generateUuid object and adding it to the model. | The method handleClickClearList () handles the functionality of the “Clear List” button and clears the model entirely. | View . Python version . class View(ABC): @abstractmethod def setup(self, controller): pass @abstractmethod def append_to_list(self, item): pass @abstractmethod def clear_list(self): pass @abstractmethod def start_main_loop(self): pass . Java version . /** @author Saman Pordanesh &lt;a href=&quot;mailto:sina.pordanesh@yahoo.com&quot;&gt; sina.pordanesh@yahoo.com&lt;/a&gt; @version 1.0 @since 1.0 */ package edu.def.mvc; import javax.swing.*; import java.util.UUID; public abstract class View { public abstract void setup(Controller controller); public abstract void appendToList(UUID item); public abstract void clearList(); public abstract void startMainLoop(); } . This class is an abstract with four methods to handle the view of the application. | The setup () method will use to contain and start a GUI engine. | The method appendToList () is a method to run and handle the “Generate UUID” button view on the application. | Also, the method clearList () is a method to run and handle the “Clear List” button view on the application. | Finally, startMainLoop() contains a method to make the frame visible. Unlike Python, in the Java version of GUI, we don’t need a loop to run the application. | SwingView (as TkView in the Python version) . Python version . class TkView(View): def setup(self, controller): # setup tkinter self.root = tk.Tk() self.root.geometry(&quot;400x400&quot;) self.root.title(&quot;UUIDGen&quot;) # create the gui self.frame = tk.Frame(self.root) self.frame.pack(fill=tk.BOTH, expand=1) self.label = tk.Label(self.frame, text=&quot;Result:&quot;) self.label.pack() self.list = tk.Listbox(self.frame) self.list.pack(fill=tk.BOTH, expand=1) self.generate_uuid_button = tk.Button(self.frame, text=&quot;Generate UUID&quot;, command=controller.handle_click_generate_uuid) self.generate_uuid_button.pack() self.clear_button = tk.Button(self.frame, text=&quot;Clear list&quot;, command=controller.handle_click_clear_list) self.clear_button.pack() def append_to_list(self, item): self.list.insert(tk.END, item) def clear_list(self): self.list.delete(0, tk.END) def start_main_loop(self): # start the loop self.root.mainloop() . Java version . /** @author Saman Pordanesh &lt;a href=&quot;mailto:sina.pordanesh@yahoo.com&quot;&gt; sina.pordanesh@yahoo.com&lt;/a&gt; @version 1.0 @since 1.0 */ package edu.def.mvc; import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.util.UUID; /** * this class handles all three MVC classes to generate a UI application. * It uses Swing &amp; AWT libraries for generating GUI. */ class SwingView extends View implements ActionListener { JFrame frame; TextArea display; JButton createButton; JButton clearButton; Controller controller; @Override public void setup(Controller controller) { // A controller object to control all principles in the program // from a unique class. this.controller = controller; this.frame = new JFrame(); // Create a list for holding all generated uuids // responsive to add and clear by two &quot;generateButton&quot; and // &quot;clearButton&quot; buttons. this.display = new TextArea(&quot;&quot;, 20, 80); this.display.setEditable(false); this.startMainLoop(); // Create two button for generating uuid and append to the list (generateButton) // and clear the least (clearButton) this.createButton = new JButton(&quot;Generate UUID&quot;); this.createButton.addActionListener(this); this.clearButton = new JButton(&quot;Clear List&quot;); this.clearButton.addActionListener(this); JPanel buttonPanel = new JPanel(); buttonPanel.setLayout(new GridLayout(0,2)); buttonPanel.add(this.createButton); buttonPanel.add(this.clearButton); Container content = this.frame.getContentPane(); content.setLayout(new BorderLayout()); content.add(&quot;Center&quot;, this.display); content.add(&quot;South&quot;, buttonPanel); this.frame.setPreferredSize(new Dimension(300, 200)); this.frame.setTitle(&quot;UUID generator&quot;); this.frame.pack(); } @Override public void appendToList(UUID item) { this.display.append(item.toString() + &quot; n&quot;); } @Override public void clearList() { this.display.setText(&quot;&quot;); } @Override public void startMainLoop() { this.frame.setVisible(true); } @Override public void actionPerformed(ActionEvent e) { if(e.getSource() == this.createButton) { this.controller.handleClickGenerateUuid(); Model model = controller.getModel(); this.appendToList(model.getUuids().get(model.getUuids().size()-1)); }else if (e.getSource() == this.clearButton) { this.controller.handleClickClearList(); this.clearList(); } } } . Java’s GUI and Swing library principles are out of this course’s scope. We recommend reading more about Swing library. Also, this and this video may help you to understand better. | As we said, this class inherits the View abstract. As a result, we need to override all methods of that abstract in this child class. | GenerateUuid (plus all three children who are inheriting this interface) . Python version . # functional strategy def generate_uuid1(): return uuid.uuid1() def generate_uuid4(): return uuid.uuid4() def generate_simple_id(): return &#39;&#39;.join(random.choices(string.ascii_lowercase, k=30)) class Model: def __init__(self): self.uuid = [] . Java version . /** @author Saman Pordanesh &lt;a href=&quot;mailto:sina.pordanesh@yahoo.com&quot;&gt; sina.pordanesh@yahoo.com&lt;/a&gt; @version 1.0 @since 1.0 */ package edu.def.mvc.uuid; import java.util.UUID; /** * Interface for all UUIDs generators classes. * Only contains one method for generating a kind of UUIDs. */ public interface GenerateUuid { public UUID generateUuid(); } . //For UUID1 public class Uuid1 implements GenerateUuid{ @Override public UUID generateUuid() { byte[] byteName = { 50, 40, 30, 20, 10 }; return UUID.nameUUIDFromBytes(byteName); } } . //For UUID4 public class Uuid4 implements GenerateUuid{ @Override public UUID generateUuid() { return UUID.randomUUID(); } } . //For UUIDString public class UuidString implements GenerateUuid{ @Override public UUID generateUuid() { return UUID.fromString(&quot;38400000-8cf0-11bd-b23e-10b96e4ef00d&quot;); } } . This interface and its children under a sub package were substituted for three functions in Python language, which are responsible for generating different UUIDs. While this structure could be much simpler without any interface, inheritance, or sub-package, we are following OOP principles for the best practice. | This interface has one method that will be overridden through different child classes. | The generateUuid () method generates different kinds of UUID, which the Java programming language allows us to generate. | We created three other classes based on this interface which are Uuid1.java, Uuid4.java and UuidString.java**, and each of them will generate a different **UUID string. | To generate those UUIDs, we used a native Java library called “java.util.UUID”. We highly recommend reading about it here. |",
            "url": "https://de-fellows.github.io/RexCoding/python/java/oop/2022/06/19/8-MVC.html",
            "relUrl": "/python/java/oop/2022/06/19/8-MVC.html",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Template Method & Bridge in Java",
            "content": "Template Method &amp; Bridge code translation in Java . Published by Saman Pordanesh . General Introduction . The Template Method design pattern is to define an algorithm as a skeleton of operations and leave the details to be implemented by the child classes. The parent class preserves the overall structure and sequence of the algorithm. Also, In computer science, bridging describes systems that map the runtime behaviour of different programming languages so they can share common resources. | You need to watch the video first, understand all principles, and then look at the translation codes in Java. This documentation will help you to understand the translation better | This translation is based on the final code source of the Template method and Bridge lessons in python programming languages (with-bridge.py). That is the complete file, which contains all principles such as Abstraction, Inheritance, etc. | We need a separate class with the main function to run the program, despite Python, in which you can run each .py file individually. Main.java is the file with the main function for that purpose. | Standard naming on Java is different. You can find more information here. | There is a UML.png file in this repository’s folder, which shows relationships between different classes. Please check it as a good reference for understanding this code. | . Directories changes . This is one of the most significant changes we made to our translation. A Java project with the same directory with all dependencies can be good practice for OOP designing. | We defined a package name for this project as edu.def.tmab (package naming standards) and its specific directory under the src folder. This package name keeps all project components connected to gather when we implement them on different .java files. | However, packages are unnecessary; you could use a default package or even have all classes in the same file; this is more Java best practice. | More information about Java’s project directory standards is here. | . Implementational Instruction . We will create one .java file per class under edu.def.tmab package. They can be interfaces, abstractions, child classes or simple classes. | After that, we will translate all classes to their belonging files based on the Python source. We will compare them with the original version in the following section. | This article will introduce the Abstract class and method. The abstract is a kind of parent class with both methods and parameters. Methods can be in two different categories; Abstract methods are those that we implement in the abstract class, and all children will inherit them the same as the parent. The other kind of method is just a prototype that shows the return type, name and arguments needed. Still, we will implement the content of the method on each child individually using the override keyword. We implement an abstract class by using the “abstract” keyword at the start of the class definition. | Main.java contains our main() method to run the program. | Note that all steps here are entirely for the best OOP practice in Java programming; They can be done more straightforwardly, but not the best OOP ways. | Compiling Instruction . Run the command prompt inside the src folder. | Run the following command to compile all .java files: javac edu/def/tmab/*.java . | To execute the program, we should run the Main.java file from the command prompt. To do this, from the same directory, run the following command on the command prompt: java edu.def.tmab.Main . | If your main function is in a different class, but the name of that class instead of Main at the end of the command | You can find more about compiling instructions here. | . Classes changes . Exchange . Python version . class Exchange(ABC): @abstractmethod def connect(self): pass @abstractmethod def get_market_data(self, coin: str) -&gt; List[float]: pass . Java version . package edu.def.tmab; import java.util.ArrayList; public interface Exchange { public void connect(); public ArrayList&lt;Float&gt; getMarketData(String coin); } . This class is defined as an interface class, although it was described as an abstract one on the Python version. The reason is that we don’t have an interface class specifically on Python programming languages. Please read about the differences between interface and abstract class. | In this class, we define the prototype of each method that a child will inherit. Then, we will override it at the child class later. | Binance . Python version . class Binance(Exchange): def connect(self): print(f&quot;Connecting to Binance exchange...&quot;) def get_market_data(self, coin: str) -&gt; List[float]: return [10, 12, 18, 14] . Java version . package edu.def.tmab; import java.util.ArrayList; public class Binance implements Exchange{ @Override public void connect() { System.out.println(&quot;Connecting to Binance exchange...&quot;); } @Override public ArrayList&lt;Float&gt; getMarketData(String coin) { return new ArrayList&lt;&gt;(); } } . This is a child class which inherits the interface Exchange. As you can see, we override both interface methods in this class. Also, we don’t have any limitations to adding more parameters and methods in this class beyond the inherited interface. | In the getMarketData() method, we initialized the ArrayList by some numbers differently from Python. This is the proper way to do that In Java. You can find more here. (“f” in front of each number means “float” data type) | Coinbase . Python version . class Coinbase(Exchange): def connect(self): print(f&quot;Connecting to Coinbase exchange...&quot;) def get_market_data(self, coin: str) -&gt; List[float]: return [10, 12, 18, 20] . Java version . package edu.def.tmab; import java.util.ArrayList; public class Coinbase implements Exchange{ @Override public void connect() { System.out.println(&quot;Connecting to Binance exchange...&quot;); } @Override public ArrayList&lt;Float&gt; getMarketData(String coin) { return new ArrayList&lt;&gt;(); } } . The same point as the Binance class. . TradingBot . Python version . class TradingBot(ABC): def __init__(self, exchange: Exchange): self.exchange = exchange def check_prices(self, coin: str): self.exchange.connect() prices = self.exchange.get_market_data(coin) should_buy = self.should_buy(prices) should_sell = self.should_sell(prices) if should_buy: print(f&quot;You should buy {coin}!&quot;) elif should_sell: print(f&quot;You should sell {coin}!&quot;) else: print(f&quot;No action needed for {coin}.&quot;) @abstractmethod def should_buy(self, prices: List[float]) -&gt; bool: pass @abstractmethod def should_sell(self, prices: List[float]) -&gt; bool: pass . Java version . package edu.def.tmab; import java.util.ArrayList; public abstract class TradingBot { private Exchange exchange; TradingBot(Exchange exchange){ this.exchange = exchange; } public void checkPrices(String coin){ this.exchange.connect(); ArrayList&lt;Float&gt; prices = this.exchange.getMarketData(coin); boolean shouldBuy = this.shouldBuy(prices); boolean shouldSell = this.shouldSell(prices); if (shouldBuy){ System.out.println(&quot;You should buy &quot; + coin + &quot;!&quot;); } else if (shouldSell) { System.out.println(&quot;You should sell &quot; + coin + &quot;!&quot;); } else { System.out.println(&quot;No action needed for &quot; + coin + &quot;.&quot;); } } public abstract boolean shouldBuy(ArrayList&lt;Float&gt; prices); public abstract boolean shouldSell(ArrayList&lt;Float&gt; prices); } . This class is an Abstract class, as we discussed at Implementation Instruction. You can see the “abstract” keyword in the class implementation, which is necessary for implementation. | As you can see, we have both implemented method and abstract method (only prototype) methods in this class. We will override all abstract methods for the children who will inherit from. In terms of the implemented method, all children will inherit them precisely with the same functionality we defined for the method in the abstraction class. We won’t override them later. | checkPrices() is a local method, but shouldBuy() and shouldSell() are abstract methods. | As we said before, an abstract class acts like a regular class and can have local methods, parameters, a constructor, and abstract methods. | AverageTrader . Python version . class AverageTrader(TradingBot): def list_average(self, l: List[float]) -&gt; float: return sum(l) / len(l) def should_buy(self, prices: List[float]) -&gt; bool: return prices[-1] &lt; self.list_average(prices) def should_sell(self, prices: List[float]) -&gt; bool: return prices[-1] &gt; self.list_average(prices) . Java version . package edu.def.tmab; import java.util.ArrayList; public class AverageTrader extends TradingBot{ /** * in java, when a class inherits an abstraction parent, we should have the constructor for the parent on the child class as well. The keyword for it is &quot;super&quot;. * @param exchange */ AverageTrader(Exchange exchange) { super(exchange); } public float listAverage(ArrayList&lt;Float&gt; list){ //we don&#39;t have any function to calculate sum of the // item on a list automatically. float sum = 0; for (float item: list){ sum += item; } return sum/list.size(); } @Override public boolean shouldBuy(ArrayList&lt;Float&gt; prices) { // &quot;(prices.size() - 1)&quot; on get() method means getting the last item of the list. return prices.get(prices.size() - 1) &lt; this.listAverage(prices); } @Override public boolean shouldSell(ArrayList&lt;Float&gt; prices) { // &quot;(prices.size() - 1)&quot; on get() method means getting the last item of the list. return prices.get(prices.size() - 1) &gt; this.listAverage(prices); } } . This child inherits the TradingBot abstraction class through the “extends” keyword. | The critical point is that we should first feed the parent’s constructor from this class’s constructor. It can be done by a super() method which takes arguments if the parent’s constructor needs any. You can find out more here. Also, we can initialize more parameters in this constructor if the class has any local ones. | As it is clear, we have two overridden methods, shouldBuy() and shouldSell() , which are abstract methods that belong to the abstract parent. In addition, we have a local method listAverage() . | MinMaxTrader . Python version . class MinMaxTrader(TradingBot): def should_buy(self, prices: List[float]) -&gt; bool: return prices[-1] == min(prices) def should_sell(self, prices: List[float]) -&gt; bool: return prices[-1] == max(prices) . Java version . package edu.def.tmab; import java.util.ArrayList; import java.util.Collections; import java.util.Objects; public class MinMaxTrader extends TradingBot{ /** * in java, when a class inherits an abstraction parent, we should have the constructor for the parent on the child class as well. The keyword for it is &quot;super&quot;. * @param exchange */ MinMaxTrader(Exchange exchange) { super(exchange); } @Override public boolean shouldBuy(ArrayList&lt;Float&gt; prices) { // &quot;(prices.size() - 1)&quot; on get() method means getting the last item of the list. //Also, Collections.min() will find the maximum item in a list return Objects.equals(prices.get(prices.size() - 1), Collections.min(prices)); } @Override public boolean shouldSell(ArrayList&lt;Float&gt; prices) { // &quot;(prices.size() - 1)&quot; on get() method means getting the last item of the list. //Also, Collections.max() will find the maximum item in a list. return prices.get(prices.size() - 1) == Collections.max(prices); } } . The same points as AverageTrader class. .",
            "url": "https://de-fellows.github.io/RexCoding/python/java/oop/2022/06/19/6-TemplateMethodAndBridge.html",
            "relUrl": "/python/java/oop/2022/06/19/6-TemplateMethodAndBridge.html",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "The Strategy Pattern in Java",
            "content": "The Strategy Pattern code translation in Java . Published by Saman Pordanesh . General Introduction . Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable. | You need to watch the video first, understand all principles, and then look at the translation codes in Java. This documentation will help you to understand the translation better | This translation is based on the final code source of Strategy Pattern lessons in python programming languages (strategy-after.py) Point: This part was done in two different (oop &amp; functional) methods. This translation is based on the oop method, and we didn’t translate the functional one, as that method doesn’t work in Java very well, although in Python may work well. | We need a separate class with the main function to run the program, despite Python, in which you can run each .py file individually. Main.java is the file with the main function for that purpose. | Standard naming on java is different. You can find more information here. | . Directories changes . This is one of the most significant changes we made to our translation. A Java project by an exact directory with all dependencies can be a good practce OOP designing. | We defined a package name for this project as edu.def.sp (package naming standards) and its specific directory under the src folder. This package name keeps all project components connected to gather when we implement them on different .java files. | However, packages are not necessary, you could use a default package, or even have all classes in the same file; this is more Java best practice. | More information about Java’s project directory standards is here. | . Implementational Instruction . We will create one .java file per class under edu.def.sp package. | As we have different ordering methods, we’ll define one class per each ordering way. They all inherit an interface (TicketOrderingStrategy.java) that contains only one ordering method (createOrdering.java). | As mentioned, one class for each ordering method is needed, which will be: FIFOOrderingStrategy.java – FILOOrderingStrategy.java - RandomOrderingStrategy.java – BlackHoleStrategy.java . | When creating other classes (SuportTicket.java &amp; CustomSupport.java), we need Main.java to contain our main function to run the program. | After that, we will translate all classes to their belonging files based on the Python source. We will compare them with the original version in the following section. | Compiling Instruction . Run the command prompt inside the src folder. | Run the following command to compile all .java files: javac edu/def/sp/*.java . | To execute the program, we should run the Main.java file from the command prompt. To do this, from the same directory, run the following command on the command prompt: java edu.def.sp.Main . If your main function is in a different class, put the name of that class instead of Main at the end of the command . | You can find more about compiling instruction here | . Classes changes . SupportTicket . Python version . class SupportTicket: def __init__(self, customer, issue): self.id = generate_id() self.customer = customer self.issue = issue def generate_id(length=8): # helper function for generating an id return &#39;&#39;.join(random.choices(string.ascii_uppercase, k=length)) . Java version . package edu.def.sp; import java.util.Random; public class SupportTicket { private String id; private String customer; private String issue; SupportTicket(String customer, String issue){ this.id = getSaltString(&quot;uppercase&quot;, 8); this.customer = customer; this.issue = issue; } public String getId() { return id; } public String getCustomer() { return customer; } public String getIssue() { return issue; } /** * As we dont have a simple function to arrange a random string on Java, we are implementing * this helper method to help us create one. * It acts like &quot;random.choices&quot; in Python * @param ascii * @return */ private String getSaltString(String ascii, int length) { //char sets based on the incoming argument String SALTCHARS; switch (ascii){ case &quot;uppercase&quot;: SALTCHARS = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;; break; case &quot;lowercase&quot;: SALTCHARS = &quot;abcdefghijklmnopqrstuvwxyz&quot;; break; case &quot;digits&quot;: SALTCHARS = &quot;1234567890&quot;; break; default: SALTCHARS = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890&quot;; } StringBuilder salt = new StringBuilder(); Random rnd = new Random(); while (salt.length() &lt; length) { // length of the random string. int index = (int) (rnd.nextFloat() * SALTCHARS.length()); salt.append(SALTCHARS.charAt(index)); } return salt.toString(); } } . This is a class for creating tickets with three parameters id, customer, issue, and three getters for each parameter. As we are defining the parameter values on the constructor and won’t need to change them separately later, we don’t have a setter method for any parameter. Aslo, we can access parameters directly by making them public, but we use private parameters as an OOP designing principle. | The constructor received two arguments for customer and issue, but Id will be valued by generating a random string generator. | The only private method used to generate a random string with a specified size (we need to define this function as we don’t have any predefined method to do that in Java, although Python has). | TicketOrderingStrategy . Python version . class TicketOrderingStrategy(ABC): @abstractmethod def create_ordering(self, list: List[SupportTicket]) -&gt; List[SupportTicket]: pass . Java version . package edu.def.sp; import java.util.ArrayList; public interface TicketOrderingStrategy { /** * A function which receives a list and return another list based on the ordering type. * @param list: an argument of ArrayList data type which contains SupportTicket objects * @return: the same data type of incoming argument, but with different ordering */ public ArrayList&lt;SupportTicket&gt; createOrdering(ArrayList&lt;SupportTicket&gt; list); } . This is the interface we discussed at instruction, which all other ordering classes will inherit. We will override this interface’s createOrdering() method in all those classes. | As we can see, the creatingOrdering() method’s prototype defines which arguments are needed for this method and what will be its return value data type. | FIFOOrderingStrategy . Python version . class FIFOOrderingStrategy(TicketOrderingStrategy): def create_ordering(self, list: List[SupportTicket]) -&gt; List[SupportTicket]: return list.copy() . Java version . package edu.def.sp; import java.util.ArrayList; public class FIFOOrderingStrategy implements TicketOrderingStrategy{ @Override public ArrayList&lt;SupportTicket&gt; createOrdering(ArrayList&lt;SupportTicket&gt; list) { return (ArrayList&lt;SupportTicket&gt;) list.clone(); } } . This class is one of the ordering ways classes implemented(inherited) from the TicketSupportingStrategy interface. | We have overridden the interface’s method as our desire for this class of ordering. | The list is already in order in this ordering method (first in, first out) der. You need to return it by creating a copy through the clone method. | Clone: clone() is a method to deeply copy an object in Java programming languages. When we use the “=” sign to copy an object, we are putting the address of the source (obj1) object to the destination (obj2); this means that if we change the boj1’s value, obj2’s value will be adjusted consequently. But with the clone() method, we can create an independent copy of obj1 and assign it to the obj2, although still, we can do more about making a completely separate copy, which is out of the scope of this article. Please click here for more. | FILOOrderingStrategy . Python version . class FILOOrderingStrategy(TicketOrderingStrategy): def create_ordering(self, list: List[SupportTicket]) -&gt; List[SupportTicket]: list_copy = list.copy() list_copy.reverse() return list_copy . Java version . package edu.def.sp; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; public class FILOOrderingStrategy implements TicketOrderingStrategy{ @Override public ArrayList&lt;SupportTicket&gt; createOrdering(ArrayList&lt;SupportTicket&gt; list) { //clone() reates a partial deep copy of the object ArrayList&lt;SupportTicket&gt; listCopy = (ArrayList&lt;SupportTicket&gt;) list.clone(); //a function to reverse an ArrayList Collections.reverse(listCopy); return listCopy; } } . Most of the FIFOOrderingStrategy’s points are applicable here. . In this ordering class, after making a copy of the list by clone, we should reverse the list because of our ordering way (first in, last out). We did it using the Collection class and its method reverse(), which reversed the list and returned it. | RandomOrderingStrategy . Python version . class RandomOrderingStrategy(TicketOrderingStrategy): def create_ordering(self, list: List[SupportTicket]) -&gt; List[SupportTicket]: list_copy = list.copy() random.shuffle(list_copy) return list_copy . Java version . package edu.def.sp; import java.util.ArrayList; import java.util.Collections; public class RandomOrderingStrategy implements TicketOrderingStrategy{ @Override public ArrayList&lt;SupportTicket&gt; createOrdering(ArrayList&lt;SupportTicket&gt; list) { ArrayList&lt;SupportTicket&gt; listCopy = (ArrayList&lt;SupportTicket&gt;) list.clone(); //shuffle the list randomly Collections.shuffle(listCopy); return listCopy; } } . Most of the FIFOOrderingStrategy’s points are applicable here. . In this ordering class, after making a copy of the list by clone, we should shuffle the list because of our ordering way (random). We did it using a class called Collection and its method shuffle(), which shuffled the list and returned it. | BlackHoleStrategy . Python version . class BlackHoleStrategy(TicketOrderingStrategy): def create_ordering(self, list: List[SupportTicket]) -&gt; List[SupportTicket]: return [] . Java version . package edu.def.sp; import java.util.ArrayList; public class BlackHoleStrategy implements TicketOrderingStrategy{ @Override public ArrayList&lt;SupportTicket&gt; createOrdering(ArrayList&lt;SupportTicket&gt; list) { //just return an empty ArrayList return new ArrayList&lt;&gt;(); } } . Most of the FIFOOrderingStrategy’s points are applicable here. . This class returns an empty ArrayList&lt;&gt;() when we’ll need it for any reason. | CustomerSupport . Python version . class CustomerSupport: def __init__(self, processing_strategy: TicketOrderingStrategy): self.tickets = [] self.processing_strategy = processing_strategy def create_ticket(self, customer, issue): self.tickets.append(SupportTicket(customer, issue)) def process_tickets(self): # create the ordered list ticket_list = self.processing_strategy.create_ordering(self.tickets) # if it&#39;s empty, don&#39;t do anything if len(ticket_list) == 0: print(&quot;There are no tickets to process. Well done!&quot;) return # go through the tickets in the list for ticket in ticket_list: self.process_ticket(ticket) def process_ticket(self, ticket: SupportTicket): print(&quot;==================================&quot;) print(f&quot;Processing ticket id: {ticket.id}&quot;) print(f&quot;Customer: {ticket.customer}&quot;) print(f&quot;Issue: {ticket.issue}&quot;) print(&quot;==================================&quot;) . Java version . package edu.def.sp; import java.util.ArrayList; public class CustomerSupport { private ArrayList&lt;SupportTicket&gt; tickets; private TicketOrderingStrategy processingStrategy; CustomerSupport(TicketOrderingStrategy processingStrategy){ tickets = new ArrayList&lt;&gt;(); this.processingStrategy = processingStrategy; } public void createTicket(String customer, String issue){ tickets.add(new SupportTicket(customer, issue)); } public void processTickets(){ ArrayList&lt;SupportTicket&gt; ticketList = this.processingStrategy.createOrdering(this.tickets); if (ticketList.size() == 0){ System.out.println(&quot;There are no tickets to process. Well done!&quot;); return; } for (SupportTicket ticket: ticketList){ this.processTicket(ticket); } } /** * As it has only internal usage, we can define this function as a private one. * @param ticket */ private void processTicket(SupportTicket ticket){ System.out.println(&quot;==================================&quot;); System.out.println(&quot;Processing ticket id: &quot; + ticket.getId()); System.out.println(&quot;Customer: &quot; + ticket.getCustomer()); System.out.println(&quot;Issue: &quot; + ticket.getIssue()); System.out.println(&quot;==================================&quot;); } } . This class is the heart of the application; create customers ArrayList, add tickets to it, process tickets and show them to the user by any request. | We have two private parameters whose value will be assigned to them in the class’s constructor. | In the constructor, we pass an object of the TicketOrderingStrategy interface, which is a non-primitive data type. This object will define the ordering in this class. Also, we are creating a new ArrayList object in this constructor. | In the createTickets () public method, we create a SupportTicket object and add it to the tickets ArrayList. | In the proccessTicket() method, we are ordering the ticket ArrayList by passing this list to the processingStrategy object’s method (createOrdering()). This will return the desired ordered list, and the ticket - ArrayList will be replaced. Then, we will start to print each list entry by passing them to the processTicket() method. |",
            "url": "https://de-fellows.github.io/RexCoding/python/java/oop/2022/06/19/3-StrategyPattern.html",
            "relUrl": "/python/java/oop/2022/06/19/3-StrategyPattern.html",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Dependency Inversion in Java",
            "content": "Dependency Inversion principles code translation in Java . Published by Saman Pordanesh . General Introduction . This topic discusses how we can implement some object-oriented definitions like Abstraction or Interfaces in a language like a python which doesn’t have these definitions locally. As Java is a strong OOP language, we already have these definitions for it. We will implement the translation of the video’s code here to understand how these principles work on Java. | You need to watch the video first, understand all principles, and then look at the translation codes in Java. This documentation will help you to understand the translation better | This translation is based on the final code source of Dependency Inversion lessons in python programming languages (dependency-inversion-after.py) | We need a separate class with the main function to run the program, despite Python, in which you can run each .py file individually. Main.java is the file with the main function for that purpose. | Standard naming on java is different. You can find more information here. | . Directories changes . This is one of the most significant changes we made to our translation. A Java project with an exact directory with all dependencies can be good practice for OOP designing. | We defined a package name for this project as edu.def.di (package naming standards) and its specific directory under the src folder. This package name keeps all project components connected to gather when we implement them on different .java files. | However, packages are not necessary, you could use a default package, or even have all classes in the same file; this is more Java best practice. | More information about Java’s project directory standards is here. | . Implementational Instruction . we create one .java file per each class under edu.def.di package. | We are going to discuss Switchable class more here. This class is an interface class and we use the “interface” keyword instead of “class”. But why this is an interface? The answer is that this class just contains the prototypes of methods without any implementation. It is an index which shows a specific structure but can have different functionality when we override it on the child class. Please read about the interface on OOP and interface on java. | When we created other classes (LightBulb.java, Fan.java, ElectricPowerSwitch.java), we need Main.java to contain our main function to run the program. | After that, we will start to translate all classes to their belonging files based on the Python source. We will compare all of them with the original version in the following section. | Compiling Instruction . Run the command prompt inside the src folder. | Run the following command to compile all .java files: javac edu/def/di/*.java . | To execute the program, we should run the Main.java file from the command prompt. To do this, from the same directory, run the following command on the command prompt: java edu.def.di.Main . If your main function is in a different class, put the name of that class instead of Main at the end of the command . | You can find more about compiling instruction here | . Classes changes . Switchable . Python version . class Switchable(ABC): @abstractmethod def turn_on(self): pass @abstractmethod def turn_off(self): pass . Java version . package edu.def.di; public interface Switchable { void turnOn(); void turnOff(); } . This class is the main lesson for this session, as we are talking about interface and Switchable is an interface class. As we can see, we implemented it with “interface” keyword and it just contains prototype of each method, without any implementation or parameter. | As we don’t have interface in python, this class needs to inherit ABC class to act like an abstract class, although in Java we already have abstract and interface definitions locally. (in python version he used “@abstractmethod” keyword to show that they are abstract methods. Also, there are differences between abstract and interface which recommend learning about them.) | Its child classes will inherit all methods from it, and we will implement all methods at child classes under the “@Override” keyword. | As we talked about it before, we don’t need any implementation for both turnOn and turnOff methods at the interface. | LightBulb . Python version . class LightBulb(Switchable): def turn_on(self): print(&quot;LightBulb: turned on...&quot;) def turn_off(self): print(&quot;LightBulb: turned off...&quot;) . Java version . package edu.def.di; public class LightBulb implements Switchable{ @Override public void turnOn() { System.out.println(&quot;LightBulb: turned on...&quot;); } @Override public void turnOff() { System.out.println(&quot;LightBulb: turned off...&quot;); } } . This is one of the Switchable children which is inheriting all methods from its parent class. | “Implements Switchable” is the keyword for inheritance. | As its obvious, all methods from interface parent are being overriding in this class, although we can have more methods and parameters in this class which don’t have any connection whith the parent class. | Notice that in python version we simply use general inheritance implementation and redefine all methods without any keyword. | Fan . Python version . class Fan(Switchable): def turn_on(self): print(&quot;Fan: turned on...&quot;) def turn_off(self): print(&quot;Fan: turned off...&quot;) . Java version . package edu.def.di; public class Fan implements Switchable{ @Override public void turnOn() { System.out.println(&quot;Fan: turned on...&quot;); } @Override public void turnOff() { System.out.println(&quot;Fan: turned off...&quot;); } } . The same points as LightBulb class. . ElectricPowerSwitch . Python version . class ElectricPowerSwitch: def __init__(self, c: Switchable): self.client = c self.on = False def press(self): if self.on: self.client.turn_off() self.on = False else: self.client.turn_on() self.on = True . Java version . package edu.def.di; public class ElectricPowerSwitch { private Switchable client; private boolean on = false; ElectricPowerSwitch(Switchable client){ this.client = client; } public void press(){ if (on){ client.turnOff(); on = false; } else { client.turnOn(); on = true; } } } . This is a general class with specific functionality to act as an electric device. We will define the kind of device by passing related object to this class (this is an Aggregation relationship. More here). | We have two parameters. The first one (client) is a non-primary data type with type of Switchable and we will define its value on the class constructor. The second one (on) is a primary data type Boolean with a default value of false. In addition a public method press. |",
            "url": "https://de-fellows.github.io/RexCoding/python/java/oop/2022/06/19/2-DependencyInversion.html",
            "relUrl": "/python/java/oop/2022/06/19/2-DependencyInversion.html",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Cohesion and Coupling in Java",
            "content": "Cohesion and Coupling principles code translation in Java . Published by Saman Pordanesh . Introduction . Cohesion is used to indicate the degree to which a class has a single, well-focused purpose. Coupling is all about how classes interact with each other; on the other hand, cohesion focuses on how the single class is designed. Higher the cohesiveness of the class, the better is the OO design. Benefits of Higher Cohesion: Highly cohesive classes are much easier to maintain and less frequently changed. | Such classes are more usable than others as they are designed with a well-focused purpose. | . | You need to watch the video first, understand all principles, and then look at the translation codes in Java. This documentation will help you to understand the translation better | This translation is based on the final code source of Cohesion and Coupling lessons in python programming languages (coupling-cohesion-after.py) | We need a separate class with the main function to run the program, despite Python, in which you can run each .py file individually. Main.java is the file with the main function for that purpose. | Standard naming on java is different. You can find more information here. | . Directories changes . This is one of the most significant changes we made to our translation. A Java project with an exact directory with all dependencies can be good practice for OOP designing. | We defined a package name for this project as edu.def.cac (package naming standards) and its specific directory under the src folder. This package name keeps all project components connected to gather when we implement them on different .java files. | However, packages are not necessary, you could use a default package, or even have all classes in the same file; this is more Java best practice. | More information about Java’s project directory standards is here. | . Compiling Instruction . Run the command prompt inside the src folder. | Run the following command to compile all .java files: javac edu/def/cac/*.java . | To execute the program, we should run the Main.java file from the command prompt. To do this, from the same directory, run the following command on the command prompt: java edu.def.cac.Main . If your main function is in a different class, put the name of that class instead of Main at the end of the command . | You can find more about compiling instruction here | . Classes changes . VehicleInfo . Python version . class VehicleInfo: def __init__(self, brand, electric, catalogue_price): self.brand = brand self.electric = electric self.catalogue_price = catalogue_price def compute_tax(self): tax_percentage = 0.05 if self.electric: tax_percentage = 0.02 return tax_percentage * self.catalogue_price def print(self): print(f&quot;Brand: {self.brand}&quot;) print(f&quot;Payable tax: {self.compute_tax()}&quot;) . Java version . package edu.def.cac; /** * A class with 3 private parameters and two public * methods. Also, a constructor with 3 arguments. */ public class VehicleInfo { private String brand; private boolean electric; private int cataloguePrice; VehicleInfo(String brand, boolean electric, int cataloguePrice){ this.brand = brand; this.electric = electric; this.cataloguePrice = cataloguePrice; } /** * * @return a double which is the computed tax. */ public double computeTax(){ double taxPercentage = 0.05; if (electric){ taxPercentage = 0.02; } return taxPercentage * cataloguePrice; } /** * */ public void print(){ System.out.println(&quot;Brand: &quot; + this.brand); System.out.println(&quot;Payable tax: &quot; + this.computeTax()); } } . we defined three private parameters in this class, and their values will be determined by the class instructor when we initialize the class. getters and setters for each private parameter, are not required, you can access fields directly by making parameters public in Java as well, but it’s (private parameters) frequently done in Java as an OOP principle. Still, as we won’t need direct access to any parameters in future, we do not implement them here (it’s acceptable). | Be careful that we specify all data types when we initialize them, although it’s unnecessary for python. | We can add strings together for printing by the “+” sign, although we used formatted string to do that on python. | Vehicle . Python version . class Vehicle: def __init__(self, id, license_plate, info): self.id = id self.license_plate = license_plate self.info = info def print(self): print(f&quot;Id: {self.id}&quot;) print(f&quot;License plate: {self.license_plate}&quot;) self.info.print() . Java version . package edu.def.cac; /** * Public class Vehicle with 3 private parameters * and one public method. Plus a constructor with * 3 arguments. */ public class Vehicle { private String id; private String licensePlate; private VehicleInfo info; Vehicle(String id, String licensePlate, VehicleInfo info){ this.id = id; this.licensePlate = licensePlate; this.info = info; } public void print(){ System.out.println(&quot;Id: &quot; + this.id); System.out.println(&quot;License plate: &quot; + this.licensePlate); this.info.print(); } } . A simple class which has three parameters. As we explained in the previous class, we defined all of them as “private” without any getter and setter. | The same point about joining strings together for printing in the print function. | VehicleRegistry . Python version . class VehicleRegistry: def __init__(self): self.vehicle_info = { } self.add_vehicle_info(&quot;Tesla Model 3&quot;, True, 60000) self.add_vehicle_info(&quot;Volkswagen ID3&quot;, True, 35000) self.add_vehicle_info(&quot;BMW 5&quot;, False, 45000) self.add_vehicle_info(&quot;Tesla Model Y&quot;, True, 75000) def add_vehicle_info(self, brand, electric, catalogue_price): self.vehicle_info[brand] = VehicleInfo(brand, electric, catalogue_price) def generate_vehicle_id(self, length): return &#39;&#39;.join(random.choices(string.ascii_uppercase, k=length)) def generate_vehicle_license(self, id): return f&quot;{id[:2]}-{&#39;&#39;.join(random.choices(string.digits, k=2))}-{&#39;&#39;.join(random.choices(string.ascii_uppercase, k=2))}&quot; def create_vehicle(self, brand): id = self.generate_vehicle_id(12) license_plate = self.generate_vehicle_license(id) return Vehicle(id, license_plate, self.vehicle_info[brand]) . Java version . package edu.def.cac; import java.util.HashMap; import java.util.Random; public class VehicleRegistry { /** * We use HashMap in java when we want to have a data structure as shows Key -&gt; Value * here, the key is the car&#39;s brand and its is a VehicleInfo object */ HashMap&lt;String, VehicleInfo&gt; vehicleInfo = new HashMap&lt;&gt;(); VehicleRegistry(){ //Saturating the HashMap on constructor this.addVehicleInfo(&quot;Tesla Model 3&quot;, true, 60000); this.addVehicleInfo(&quot;Volkswagen ID3&quot;, true, 35000); this.addVehicleInfo(&quot;BMW 5&quot;, false, 45000); this.addVehicleInfo(&quot;Tesla Model Y&quot;, true, 75000); } public void addVehicleInfo(String brand, boolean electric, int cataloguePrice){ /*create an entry for the HashMap which the Key is String type and the Vale is a non-primary data type VehicleInfo */ this.vehicleInfo.put(brand, new VehicleInfo(brand, electric, cataloguePrice)); } public String generateVehicleId(int length){ return getSaltString(&quot;uppercase&quot;, length); } public String generateVehicleLicense(String id){ return id.substring(0, 2) + &quot;-&quot; + getSaltString(&quot;digits&quot;, 2) + &quot;-&quot; + getSaltString(&quot;uppercase&quot;, 2); } public Vehicle createVehicle(String brand){ String id = generateVehicleId(12); String licensePlate = generateVehicleLicense(id); return new Vehicle(id, licensePlate, vehicleInfo.get(brand)); } /** * As we dont have a simple function to arrange a random string on Java, we are implementing * this helper method to help us create one. * It acts like &quot;random.choices&quot; in Python * @param ascii * @return */ protected String getSaltString(String ascii, int length) { //char sets based on the incoming argument String SALTCHARS; switch (ascii){ case &quot;uppercase&quot;: SALTCHARS = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;; break; case &quot;lowercase&quot;: SALTCHARS = &quot;abcdefghijklmnopqrstuvwxyz&quot;; break; case &quot;digits&quot;: SALTCHARS = &quot;1234567890&quot;; break; default: SALTCHARS = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890&quot;; } StringBuilder salt = new StringBuilder(); Random rnd = new Random(); while (salt.length() &lt; length) { // length of the random string. int index = (int) (rnd.nextFloat() * SALTCHARS.length()); salt.append(SALTCHARS.charAt(index)); } return salt.toString(); } } . In this class, we are using vehicleInfo HashMap as an alternative data structure for Python’s dictionary. HashMap is a data structure which allows us to define a key for a specific value and get access to that value with the key in future (key -&gt; value). In this class, we use a car’s brand as a key and attach it to belonging vehicle information (value). As a result, we will be able to access each car’s brand information through key -&gt; value. In addition, this parameter is a private one. | ` `We initialized vehicleInfo with some data at the class construction VehicleRegistry. This isn’t a good and professional way to saturate a hash map, but it works in this example just for educational purposes. | The function addVehicleInfo is for adding new data to the vehicleInfo HashMap by getting three arguments. The first argument will be the key on the HashMap, and the others will be used to initialize an object from VehicleInfo class. As you can see, vehicleInfo.put(key, value) is a function to add an entry to the HashMap. | At the function generateVicleId, we see a significant difference between the Java version and the Python one. We need to define the getSaltString helper method to generate random strings based on the three categories of ASCII characters (uppercase, lowercase, digits). However, we already have a predefined function to do this in Python. In this function, we need to return a random string of uppercase characters with the size of length, which is the function’s argument. . | At generateVehicleLicense, we create a specific string format. By the substring() method, we can split a particular part of a string. It’s identical to Python’s string[start, end] method. | As we said before, getSaltString is a helper method to generate random strings based on specific size and type. You can find more here. | Application . Python version . class Application: def register_vehicle(self, brand: string): # create a registry instance registry = VehicleRegistry() vehicle = registry.create_vehicle(brand) # print out the vehicle information vehicle.print() . Java version . package edu.def.cac; public class Application { /** * to put all different components togather and create an application for a specific brand of car. * @param brand: main input to create an application. */ public void registerVehicle(String brand){ VehicleRegistry registry = new VehicleRegistry(); Vehicle vehicle = registry.createVehicle(brand); vehicle.print(); } } . This class, with a simple public function, is created to put all other classes and their method together to lunch an application. The only argument that the registerVehicle method needs is a car’s brand string. |",
            "url": "https://de-fellows.github.io/RexCoding/python/java/oop/2022/06/19/1-CohesionAndCoupling.html",
            "relUrl": "/python/java/oop/2022/06/19/1-CohesionAndCoupling.html",
            "date": " • Jun 19, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Create Your First Social Media Site with Flask",
            "content": "Jennifer Jay . Digital Engineering Fellowship, Spring 2022 . University of Calgary . . Contact Me . GitHub: Jennifer-Jay . . End Goal Preview . In this blog, you will learn how to develop and deploy a social networking site with Flask server. . Features of the website: . Sign-up page to allow users to create an account | Log-in page to allow users to sign-in. | Users can create blog like posts. | Feed page where users can view made by themselves or other users. | Users can update their account information including username, profile picture, email. | Unique URL that anyone on the internet can access. | This application works on computers, tablets, or phones. | . Here is a preview of the site: . . Here is the link to the Flask website we will be creating if you would like to take a look. . Principles for Educators . 2. Make the game worth playing . Nowadays, the majority of students spend hours a day on social media. It is an extremely valuable communication tool that many rely on to spread information and the opportunity to connect with people worldwide. This blog will teach you how you can create and deploy your own website that will allow anyone on the world wide web to share posts - no matter their location. . Structuring Your Packages with Flask Blueprint . To minimize potential errors in your code and avoid long hours of fustration, it is important that programmers understand how to effectively organize their files in their directory. Flask Blueprint allows users to organize their application into small packages. . This is how we will be organizing our code: . Create a new folder on your computer. Lets name it FlaskWebPage. Open this folder in a code editor such as Visual Studio Code. | Within your directory, create a folder named webpage. | Within this folder, make a file named __ init__.py and another named models.py. | Within your webpage folder, create a folder named templates. This will be where we store the files that contain the HTML elements that describes the content and layout for each of our pages. | Create another folder within the webpage folder and name it static. This is where we will be storing user&#39;s profile pictures and our CSS file which will allow us to customize and style our website. This type of file is considered static because they do not change while our program is running. | Make three more folders in the webpage folder named, users (a module containing code to create, update, and validate the user&#39;s account), posts (a module containing code to allow users to create posts), and main (a module containing code to display the posts on the feed page of our website). | Within each the users, posts, and main files, make __ init__.py and routes.py files. __ init__.py file lets the application know that the file it is contained in is a module. routes.py file creates the different URLs for the different functions and pages on the website. | This is how your files should be structures. . ├── webpage │ ├── static │ ├── templates │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── routes.py │ ├── __init__.py │ ├── models.py . Implementing Blueprint . Within each module, we need to create a Blueprint instance. . In the main __ init__.py file, create a Blueprint instance with the following code: . from flask import Blueprint main = Blueprint(&#39;main&#39;, __name__) . Similarly, for the posts and users __ init__.py files, use the same code to create Blueprint instances, however, replace &quot;main&quot; with the module name. . Within posts __ init__.py file: . from flask import Blueprint posts = Blueprint(&#39;posts&#39;, __name__) . Within users __ init__.py file: . from flask import Blueprint user = Blueprint(&#39;user&#39;, __name__) . Open the webage __ init__.py&lt;/code&gt;&lt;/i&gt; file. We will be importing the blueprint instances we created from each module, then registering them with the following code:&lt;/h4&gt; from flask import Flask app = Flask(__name__) from webpage.users.routes import users from webpage.posts.routes import posts from webpage.main.routes import main app.register_blueprint(users) app.register_blueprint(posts) app.register_blueprint(main) . app = Flask(__ name__) is used in every Flask app in order to inherit the attributes and methods from the Flask class. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Virtual Environment . It is important that we are programming in a virtual environment to avoid instally Python packages globally. This will save us some time and make deploying our flask application easier. . Steps: . Ensure the virtual environment package is installed on VSCode by typing in the terminal “pip install virtualenv”. | Create your virtual environment by typing “virtualenv env” | Activate your virtual environment with “env Scripts activate.bat” or for a MacBook “source env/bin/activate”. Ensure your virtual environment is activate when you install packages. This will be beneficial when creating your requirements.txt&lt;/code&gt;&lt;/i&gt; file when we cover Deploying your Website.&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;/ol&gt; Here is a list of packages you will need to install:BareNecessities==0.2.8 . bcrypt==3.2.2 blinker==1.4 cffi==1.15.0 click==8.1.3 colorama==0.4.5 dnspython==2.2.1 email-validator==1.2.1 Flask==2.1.2 Flask-Bcrypt==1.0.1 Flask-Login==0.6.1 Flask-Mail==0.9.1 Flask-SQLAlchemy==2.5.1 Flask-WTF==1.0.1 greenlet==1.1.2 gunicorn==20.1.0 idna==3.3 importlib-metadata==4.11.4 itsdangerous==2.1.2 Jinja2==3.1.2 Mail==2.1.0 MarkupSafe==2.1.1 Pillow==9.1.1 psycopg2==2.9.3 pycparser==2.21 SQLAlchemy==1.4.37 Werkzeug==2.1.2 WTForms==3.0.1 zipp==3.8.0 . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Templates (HTML) . Templates allow you to create the content and layout of the different pages of your website with its own HTML file. In this section, you will learn how to create a parent and child template. Throughout the blog, you will need to make a unique child template for every page on your website. . Within your templates folder, create three files: a file named layout.html, and a file named feed.html. . ├── webpage │ ├── static │ ├── templates │ │ ├── feed.html │ │ ├── layout.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── routes.py │ ├── __init__.py │ ├── models.py . Parent Template . The layout.html file will be the parent template, providing a base containing the common elements of our website. The other templates (child templates) will inherit these common elements. . This is the code we will be working with in our layout.html file: . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot; integrity=&quot;sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{{ url_for(&#39;static&#39;, filename=&#39;main.css&#39;) }}&quot;&gt; {% if title %} &lt;title&gt;Flask Scoial Media- {{ title }}&lt;/title&gt; {% else %} &lt;title&gt;Flask Social Media&lt;/title&gt; {% endif %} &lt;/head&gt; &lt;body&gt; &lt;header class=&quot;site-header&quot;&gt; &lt;nav class=&quot;navbar navbar-expand-md navbar-dark bg-steel fixed-top&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;a class=&quot;navbar-brand mr-4&quot; href=&quot;/&quot;&gt;Flask Social Media&lt;/a&gt; &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarToggle&quot; aria-controls=&quot;navbarToggle&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt; &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarToggle&quot;&gt; &lt;div class=&quot;navbar-nav mr-auto&quot;&gt; &lt;a class=&quot;nav-item nav-link&quot; href=&quot;{{ url_for(&#39;main.feed&#39;) }}&quot;&gt;Feed&lt;/a&gt; &lt;/div&gt; &lt;!-- Navbar Right Side --&gt; &lt;div class=&quot;navbar-nav&quot;&gt; {% if current_user.is_authenticated %} &lt;a class=&quot;nav-item nav-link&quot; href=&quot;{{ url_for(&#39;posts.new_post&#39;) }}&quot;&gt;New Post&lt;/a&gt; &lt;a class=&quot;nav-item nav-link&quot; href=&quot;{{ url_for(&#39;users.account&#39;) }}&quot;&gt;Account&lt;/a&gt; &lt;a class=&quot;nav-item nav-link&quot; href=&quot;{{ url_for(&#39;users.logout&#39;) }}&quot;&gt;Logout&lt;/a&gt; {% else %} &lt;a class=&quot;nav-item nav-link&quot; href=&quot;{{ url_for(&#39;users.login&#39;) }}&quot;&gt;Login&lt;/a&gt; &lt;a class=&quot;nav-item nav-link&quot; href=&quot;{{ url_for(&#39;users.register&#39;) }}&quot;&gt;Register&lt;/a&gt; {% endif %} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/header&gt; &lt;main role=&quot;main&quot; class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-8&quot;&gt; {% with messages = get_flashed_messages(with_categories=true) %} {% if messages %} {% for category, message in messages %} &lt;div class=&quot;alert alert-{{ category }}&quot;&gt; {{ message }} &lt;/div&gt; {% endfor %} {% endif %} {% endwith %} {% block content %}{% endblock %} &lt;/div&gt; &lt;/div&gt; &lt;/main&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot; integrity=&quot;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js&quot; integrity=&quot;sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js&quot; integrity=&quot;sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . . Using Bootstrap for your templates, can make designing your web page quicker and easier. I used their Starter Template from their official website: Bootstrap website. . To link the CSS file that we will be creating in the Design Your Website (CSS) section, use link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&quot; to indicate that the location of our stylesheet will be in the static folder in the file main.css which we will be creating later on in blog. . div class=&#8221;alert alert-&#8221; will allow us to send out alerts to the user on our webpage every time the user successfully fills out a form such as signing up, logging in, creating posts, or updating their account. In our layout.html , we have to use get_flashed_messages() to return the category. Here is an example of an alert: . nav class=&#8221;navbar navbar-expand-md navbar-dark bg-steel fixed-top&#8221; creates a navigation bar at the top of our webpage. We can display the title of our site using class=&quot;navbar-brand mr-3&quot; href=&quot;/&quot;&gt;Flask Social Media. . On the left side of the navigation bar, we can add links to the home and about page by using div class=&#8221;navbar-nav mr-auto&#8221;. . On the right side of the navigation bar, we can add links to the login and register page by using div class=&#8221;navbar-nav&#8221;. . {% block content %}{% endblock %} is used for overriding specific parts of the layout.html template that will need to be unique to certain pages. This will need to be incorporated in every child template you create to ensure your website shows the relevant information for each page. . Child Template . First lets create our template for our feed page. This will be where users can scroll and read posts made by themselves and other users. . In your feed.html file, copy the following code: . {% extends &quot;layout.html&quot; %} {% block content %} {% for post in posts %} &lt;article class=&quot;media content-section&quot;&gt; &lt;img class=&quot;rounded-circle article-img&quot; src=&quot;{{ url_for(&#39;static&#39;, filename=&#39;profile_pics/&#39; + post.author.image_file) }}&quot;&gt; &lt;div class=&quot;media-body&quot;&gt; &lt;div class=&quot;article-metadata&quot;&gt; &lt;a&gt; {{ post.author.username }}&lt;/a&gt; &lt;small class=&quot;text-muted&quot;&gt;{{ post.date_posted.strftime(&#39;%Y-%m-%d&#39;) }}&lt;/small&gt; &lt;/div&gt; &lt;h2&gt;&lt;a&gt;{{ post.title }}&lt;/a&gt;&lt;/h2&gt; &lt;p class=&quot;article-content&quot;&gt;{{ post.content }}&lt;/p&gt; &lt;/div&gt; &lt;/article&gt; {% endfor %} {% endblock content %} . In order to inherit from our parent template, use {% extends &quot;layout.html&quot; %}. . Like I mentioned in the Parent Template section, we will use {% block content %}{% endblock content %} to create the specific content on each page. . On our feed page, we will be displaying the posts. The code block {% for post in posts %} will retrieve information from a post object containing information about the author, the date the post was posted, the title, and the content that we will be covering later on in in the Databases (SQLAlchemy) section. . We can use Bootstrap to customize the shape of the user&#39;s profile picture that will be displayed on the posts using &quot;rounded-circle article-img&quot;. url_for(&#39;static&#39;, filename=&#39;profile_pics/&#39; + post.author.image_file) tells the program where to look to obtain the profile pictures. In this case, the user&#39;s profile pictures will be under the static&lt;/code&gt;&lt;/i&gt; folder, in a file named profile_pics&lt;/code&gt;&lt;/i&gt; which we will be creating in the Default Profile Picture section.&lt;/h4&gt; url_for&lt;/code&gt;&lt;/i&gt; is a really useful function that helps determine the exact location to route to. We will be seeing more of this throughout the blog.&lt;/h4&gt; . Secret Key . When using forms, it is ideal that we create a &#8220;secret key&#8221; to prevent hijacking of the web application. This is used to sign session cookies and protect against cookie data tampering. It is necessary to avoid sharing this key to keep your Flask application secure. . Update the webpage __ init.py file with the following code: . from flask import Flask from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config[&#39;SECRET_KEY&#39;] = &#39;5791628bb0b13ce0c676dfde280ba245&#39; from webpage.users.routes import users from webpage.posts.routes import posts from webpage.main.routes import main app.register_blueprint(users) app.register_blueprint(posts) app.register_blueprint(main) . Use app.config[&#39;SECRET_KEY&#39;] to implement your key. Your key can be anything you wish, however, it is important that your key is hard to guess. I would recommend using a random string generator to generate a long random string. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Designing your Web Page (CSS) . To add custom style and format your HTML templates, you will need to create a Cascading Style Sheets (CSS). CSS is a style language considered static because there is no interaction with the code. . In your static folder, create a file named main.css&lt;/code&gt;&lt;/i&gt;.&lt;/h4&gt; ├── webpage │ ├── static │ │ ├── main.css │ ├── templates │ │ ├── feed.html │ │ ├── layout.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── routes.py │ ├── __init__.py │ ├── models.py . CSS is a relatively straight forward language. . This is the code I used to design the webpage shown in this blog. Feel free to adjust the CSS code in the main.css&lt;/code&gt;&lt;/i&gt; file to personalize the theme of your website to your liking.&lt;/h4&gt; body { background: #E2C2B3; color: #fff; margin-top: 6rem; } h1, h2, h3, h4, h5, h6 { color: #ffff; } .bg-steel { background-color: #687477; } .site-header .navbar-nav .nav-link { color: #E2C2B3; } .site-header .navbar-nav .nav-link.active { font-weight: 100; } .content-section { padding: 4px 30px; background: #403234; border: 1px solid #dddddd; border-radius: 5px; margin-bottom: 20px; } .article-title { color: #ffff; } .article-content { white-space: pre-line; } .article-img { height: 100px; width: 100px; margin-right: 20px; } .article-metadata { padding-bottom: 5px; margin-bottom: 5px; border-bottom: 5px solid #687477 } .article-svg { width: 25px; height: 25px; vertical-align: middle; } .account-img { height: 125px; width: 125px; margin-right: 20px; margin-bottom: 16px; } .account-heading { font-size: 2rem; } . Common CSS Properties Description . background | Pick the background color or image, position, size, repeat (how the images are repeated), origin, clip (painting area), attachment (whether images are fixed or scrolls), initial (sets to default value), or whether to inherit from parent template | . color | Specify the text color | . font | Pick your desired font style, variant, weight, size and font-family | . padding | Specify how much space is needed on top, bottom, left, or right side of elements. | . border | Pick the type of border: dotted, dashed, solid, double, groove, ridge, inset, outset, no border, hidden border, mixed border. | . margin | Set different margins on the top, bottom, right, and left side | . text-decoration | Choose decorations like underline, overline, line-through, underline overline, as well as the color, style and thickness. | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Databases(SQLAlchemy) . SQLAlchemy allows programmers to easily convert data stored in a database into objects. We will be using this database to store information about the user and create a one-to-many relationship between the user&#39;s account such as their username, email, and profile picture, as well as their posts. . First, we need to create a URI for the database to use. For development purposes, we will be using SQLite which is a lightweight, fast open SQL engine - this will have to be replaced when we deploy the website later on. Then we will use the &#8220;app&#8221; parameter to create a database instance. . Open the webage __ init__.py&lt;/code&gt;&lt;/i&gt; file. Update the code to the following:&lt;/h4&gt; from flask import Flask from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config[&#39;SECRET_KEY&#39;] = &#39;5791628bb0b13ce0c676dfde280ba245&#39; app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///site.db&#39; db = SQLAlchemy(app) from webpage.users.routes import users from webpage.posts.routes import posts from webpage.main.routes import main app.register_blueprint(users) app.register_blueprint(posts) app.register_blueprint(main) . Now to create our datbases to save the user&#39;s account information and their posts, code the following in the webpage models.py file. . from datetime import datetime from webpage import db, login_manager from flask_login import UserMixin @login_manager.user_loader def load_user(user_id): return User.query.get(int(user_id)) class User(db.Model, UserMixin): id = db.Column(db.Integer, primary_key=True) username = db.Column(db.String(20), unique=True, nullable=False) email = db.Column(db.String(120), unique=True, nullable=False) image_file = db.Column(db.String(130), nullable=False, default=&#39;default.jpg&#39;) password = db.Column(db.String(60), nullable=False) posts = db.relationship(&#39;Post&#39;, backref=&#39;author&#39;, lazy=True) def __repr__(self): return f&quot;User(&#39;{self.username}&#39;, &#39;{self.email}&#39;, &#39;{self.image_file}&#39;)&quot; class Post(db.Model): id = db.Column(db.Integer, primary_key=True) title = db.Column(db.String(100), nullable=False) date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow) content = db.Column(db.Text, nullable=False) user_id = db.Column(db.Integer, db.ForeignKey(&#39;user.id&#39;), nullable=False) def __repr__(self): return f&quot;Post(&#39;{self.title}&#39;, &#39;{self.date_posted}&#39;)&quot; . In this file, we will be creating two databases. the first one will be the class User(db.Model) which will contain the user information, and the second one will be class Post(db.Model) which will store data about each post. class User(db.Model) will take in the UserMixin parameter which allows the program to incorporate the following properties: . is_authenticated() returns True if the user has provided valid credentials. | is_active() returns True if the user’s account is active. | is_anonymous() returns True if the current user is an anonymous user. | get_id() given a User instance, returns the unique ID for that object. | . To use this login_manager extension, we will have to tell the program how to find one of our users by their id. The &lt;code&gt;@login_manager&lt;/code&gt; is a key naming convention that identifies that this is the function specifying how to get a user by their id. load_user, takes the user_id as the parameter and gets the user using user.query.get from the database we will be creating next. . We imported db which will allow us to program the SQLAlchemy database and datetime. . 1. The class User(db.Model) is created first. . This object will create a table containing user information. An unique id will be given to our users so we will set primary_key=True. . The username will have db.string(17) because I set the maximum characters for the username to be 17. We also want each username to be unique, hence, unique=True. Each user is required to have a username so nullable=False. . The user&#8217;s profile image will be limited to 22 characters. A default image will be provided to those without profile images, therefore nullable=False. . To link the user with their own posts, we will need to use db.relationship to associate with our Post model which we will make in the next step. The function backref=&#8217;author&#8217; allows us to retrieve the user of the post. lazy loading allows us to retrieve every post from a single user. . def __repr__(self): represents the string from our User object in a printable representation. This will come in handy when displaying the posts to the feed page. . 2. Then we create class Post(db.Model). . Each post will need a title, therefore nullable=False. The title is also limited to 150 characters. . The posts will also show the time posted using db.DateTime which we imported earlier. The function datetime.utcnow will allow our program to determine the current time the post was posted. . The content will have the text and does not have to be unique. . We need our database to correlate the user.id to their post. The function db.ForeignKey allows the program to reference information from the user_id column (child table) to the Post column (parent table). . The printable representation of our post will show the title and the date posted. . Lastly, we need to create the database. . In your terminal, first type “python”. | Then type “from flaskblog import db”. | Finally type “db.create_all()”. | Since we are using SQLite, a site.db file will be created in our directory. . ├── webpage │ ├── static │ │ ├── main.css │ ├── templates │ │ ├── feed.html │ │ ├── layout.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── routes.py │ ├── __init__.py │ ├── models.py │ ├── site.db . Now we have a database! . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Sign-up and Log-in . Every file related to creating, updating or validating a user&#39;s account will be found in the users module. Currently we have a __ init__.py and a routes.py file within users. We will also need to add a users forms.py file. . ├── webpage │ ├── static │ │ ├── main.css │ ├── templates │ │ ├── feed.html │ │ ├── layout.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ ├── __init__.py │ ├── models.py │ ├── site.db . WTForms . Within users forms.py file, we will use a function called WTForms - a handy Flask extension that allows programmers to easily validate forms and deploy security features. Perfect for sign-up and log-in pages! . from flask_wtf import FlaskForm from flask_wtf.file import FileField, FileAllowed from wtforms import StringField, PasswordField, SubmitField, BooleanField from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError from webpage.models import User class RegistrationForm(FlaskForm): username = StringField(&#39;Username&#39;, validators=[DataRequired(), Length(min=5, max=17)]) email = StringField(&#39;Email&#39;, validators=[DataRequired(), Email()]) password = PasswordField(&#39;Password&#39;, validators=[DataRequired()]) confirm_password = PasswordField(&#39;Confirm Password&#39;, validators=[DataRequired(), EqualTo(&#39;password&#39;)]) submit = SubmitField(&#39;Sign Up&#39;) def validate_username(self, username): user = User.query.filter_by(username=username.data).first() if user: raise ValidationError(&#39;That username is taken. Please choose a different one.&#39;) def validate_email(self, email): user = User.query.filter_by(email=email.data).first() if user: raise ValidationError(&#39;That email is taken. Please choose a different one.&#39;) class LoginForm(FlaskForm): email = StringField(&#39;Email&#39;, validators=[DataRequired(), Email()]) password = PasswordField(&#39;Password&#39;, validators=[DataRequired()]) remember = BooleanField(&#39;Remember Me&#39;) submit = SubmitField(&#39;Login&#39;) class UpdateAccountForm(FlaskForm): username = StringField(&#39;Username&#39;, validators=[DataRequired(), Length(min=5, max=17)]) email = StringField(&#39;Email&#39;, validators=[DataRequired(), Email()]) picture = FileField(&#39;Update Profile Picture&#39;, validators=[FileAllowed([&#39;jpg&#39;, &#39;png&#39;])]) submit = SubmitField(&#39;Update&#39;) . The RegistrationForm Class will take in the necessary information from the user to create an account. . We will be using validators to create certain requirements for the user&#8217;s account. For example, validators=[DataRequired(), Length(min=5, max=17)] ensures usernames have a minimum of 5 characters and a maximum of 17. . We can also validate their email to ensure it is legitimate with Email(). We use the EqualTo validator for the password to ensure the password and the password confirmation are the same. . The user can then click &#39;Sign Up&#39; on the website to submit their form. &#39;Sign Up&#39; will be displayed as a button, which we will create using Bootstrap in our template register.html&lt;/code&gt;&lt;/i&gt; we will be creating later on in this section.&lt;/h4&gt; The def validate_username&lt;/code&gt;&lt;/i&gt; and def validate_email&lt;/code&gt;&lt;/i&gt; ensures that there are no duplicates within the database. User.query.filter_by&lt;/code&gt;&lt;/i&gt; is a helpful function that filters through the application&#39;s database to look for the relevant information. If user&lt;/code&gt;&lt;/i&gt; returns True, a ValidationError message will occur.&lt;/h4&gt; Similarly, we will create the LoginForm Class. Here we will be asking the user for their email and password to log-in. A remember field can be incorporated by using BooleanField which allows the user to pick between &#8220;true&#8221; or &#8220;false&#8221;. Then the user submits the form by pressing &#39;Login&#39;. . Finally, the UpdateAccountForm Class will take in a username and email with the same requirements from the RegistrationForm Class. This form will also allow users to update their profile picture only as a .jpg or .png file. . Routing . users routes.py&lt;/code&gt;&lt;/i&gt; will be used to route to different pages using the .route function. This function allows you to create a unique URL for each page. For example, we made the path to the sign up page “/register”. The URL 127.0.0.1:5000/about will route us here. We will be using render_template to allow the program to generate output from our HTML template files we created.&lt;/h3&gt; from flask import render_template, url_for, flash, redirect, request, Blueprint from flask_login import login_user, current_user, logout_user, login_required from webpage import db, bcrypt from webpage.models import User from webpage.users.forms import (RegistrationForm, LoginForm, UpdateAccountForm) from webpage.users.save_pics import save_picture users = Blueprint(&#39;users&#39;, __name__) @users.route(&quot;/register&quot;, methods=[&#39;GET&#39;, &#39;POST&#39;]) def register(): if current_user.is_authenticated: return redirect(url_for(&#39;main.feed&#39;)) form = RegistrationForm() if form.validate_on_submit(): hashed_password = bcrypt.generate_password_hash(form.password.data).decode(&#39;utf-8&#39;) user = User(username=form.username.data, email=form.email.data, password=hashed_password) db.session.add(user) db.session.commit() flash(&#39;Your account has been created!&#39;, &#39;success&#39;) return redirect(url_for(&#39;users.login&#39;)) return render_template(&#39;register.html&#39;, title=&#39;Register&#39;, form=form) @users.route(&quot;/login&quot;, methods=[&#39;GET&#39;, &#39;POST&#39;]) def login(): if current_user.is_authenticated: return redirect(url_for(&#39;main.feed&#39;)) form = LoginForm() if form.validate_on_submit(): user = User.query.filter_by(email=form.email.data).first() if user and bcrypt.check_password_hash(user.password, form.password.data): login_user(user, remember=form.remember.data) next_page = request.args.get(&#39;next&#39;) return redirect(next_page) if next_page else redirect(url_for(&#39;main.feed&#39;)) else: flash(&#39;Login Unsuccessful.&#39;, &#39;danger&#39;) return render_template(&#39;login.html&#39;, title=&#39;Login&#39;, form=form) @users.route(&quot;/logout&quot;) def logout(): logout_user() return redirect(url_for(&#39;main.feed&#39;)) @users.route(&quot;/account&quot;, methods=[&#39;GET&#39;, &#39;POST&#39;]) @login_required def account(): form = UpdateAccountForm() if form.validate_on_submit(): if form.picture.data: picture_file = save_picture(form.picture.data) current_user.image_file = picture_file current_user.username = form.username.data current_user.email = form.email.data db.session.commit() flash(&#39;Account updated!&#39;, &#39;success&#39;) return redirect(url_for(&#39;users.account&#39;)) elif request.method == &#39;GET&#39;: form.username.data = current_user.username form.email.data = current_user.email image_file = url_for(&#39;static&#39;, filename=&#39;profile_pics/&#39; + current_user.image_file) return render_template(&#39;account.html&#39;, title=&#39;Account&#39;, image_file=image_file, form=form) . The &#8216;GET&#8217; and &#8216;POST&#8217; requests are required to retrieve and send the user&#8217;s information from and to our web server. . form.validate_on_submit will indicate if the form is accepted by all the validator fields when submitted to determine where the webpage should reroute to. url_for will determine the exact location of the route. . flash allows us to generate message alerts using Bootstrap. This is used to inform the user if they have successfully logged in or if their login was unsuccessful. . When registering, a user is redirected to the feed page. The function to route to the feed page will be in the main&lt;/code&gt;&lt;/i&gt; folder hence &#39;main.feed&#39;. The routes.py&lt;/code&gt;&lt;/i&gt; file will also require access to the forms we previously created in the forms.py&lt;/code&gt;&lt;/i&gt;. if form.validate_on_submit() will check if the form is valid, then will start hashing using Bcrypt the password that the user inputed before saving it in the database. A flash message informing the user that their account has been created appears, then they are redirected to the login page.&lt;/h4&gt; Hashing is irreversible; unlike encryption and encoding, there is no way to de-hash a password. It is good practice to hash sensitive information like passwords incase of potential data leaks. The user&#39;s information and hashed password is added to the database - the actual password is never stored! . The login page will check whether the information that the user inputs on the form matched the database. user = User.query.filter_by(email=form.email.data).first() checks the email that the user inputs with the database to see if it exists. Then if user is true (email matches with the database), the program checks the password that the user inputted with the password that was remembered by the program (this password is the unhashed password that is not saved in the database, only remembered). If successful, user will be redirected to their feed, else, a flash message will appear. . flask_login provides an easy to use logout_user function. . To update your account, flask_login ensures that the user is logged in using &lt;code&gt;@login_required&lt;/code&gt;. Using the UpdateAccountForm() we created in the forms.py&lt;/code&gt;&lt;/i&gt; file will be used here to replace the original data with the newly inputted data. The account data will be immediately updatted in the account page.&lt;/h4&gt; To use Bcrypt and flask_login we will need to create instances with these functions in the webpage __ init__.py&lt;/code&gt;, similar to how we created instances for SQLAlchemy.&lt;/h3&gt; Update the code in webpage __ init__.py&lt;/code&gt; with the following:&lt;/h4&gt; from flask import Flask from flask_sqlalchemy import SQLAlchemy from flask_bcrypt import Bcrypt from flask_login import LoginManager app = Flask(__name__) app.config[&#39;SECRET_KEY&#39;] = &#39;5791628bb0b13ce0c676dfde280ba245&#39; app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///site.db&#39; db = SQLAlchemy(app) bcrypt = Bcrypt(app) login_manager = LoginManager(app) from webpage.users.routes import users from webpage.posts.routes import posts from webpage.main.routes import main app.register_blueprint(users) app.register_blueprint(posts) app.register_blueprint(main) . Saving Profile Pictures . We will also need another file in our users&lt;/code&gt;&lt;/i&gt; file in order to save the profile pictures. Create a save_pics.py&lt;/code&gt;&lt;/i&gt; file.&lt;/h3&gt; ├── webpage │ ├── static │ │ ├── main.css │ ├── templates │ │ ├── feed.html │ │ ├── layout.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db . Import the following code: . import os import secrets from PIL import Image from webpage import app def save_picture(form_picture): random_hex = secrets.token_hex(10) _, f_ext = os.path.splitext(form_picture.filename) picture_fn = random_hex + f_ext picture_path = os.path.join(app.root_path, &#39;static/profile_pics&#39;, picture_fn) output_size = (130, 130) i = Image.open(form_picture) i.thumbnail(output_size) i.save(picture_path) return picture_fn . To avoid saving pictures with the same name, we can import secrets and use the secrets.token_hex() function to generate a random hex. . We need to make sure the file extension is the same when it is saved. in order to determine the file extension we can use os and the split.text function. The final picture name that will be stored will be the random hex with the picture extension. This is this saved to the profile_pic file within the static folder. . Before the image is saved, we also need to resize it. Using Image programmers can open and resize the image to a certain size. The program will resize the image to the output_size before saving. . Now we have to create templates for our log-in and register pages. . Within templates&lt;/code&gt;&lt;/i&gt;, create a file named login.html&lt;/code&gt;&lt;/i&gt; and register.html&lt;/code&gt;&lt;/i&gt;.&lt;/h4&gt; ├── webpage │ ├── static │ │ ├── main.css │ ├── templates │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db . Copy the following code into register.html&lt;/code&gt;&lt;/i&gt;&lt;/strong&gt;:&lt;/h4&gt; . {% extends &quot;layout.html&quot; %} {% block content %} &lt;div class=&quot;content-section&quot;&gt; &lt;form method=&quot;POST&quot; action=&quot;&quot;&gt; {{ form.hidden_tag() }} &lt;fieldset class=&quot;form-group&quot;&gt; &lt;legend class=&quot;border-bottom mb-4&quot;&gt;Join Today&lt;/legend&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.username.label(class=&quot;form-control-label&quot;) }} {% if form.username.errors %} {{ form.username(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.username.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.username(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.email.label(class=&quot;form-control-label&quot;) }} {% if form.email.errors %} {{ form.email(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.email.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.email(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.password.label(class=&quot;form-control-label&quot;) }} {% if form.password.errors %} {{ form.password(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.password.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.password(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.confirm_password.label(class=&quot;form-control-label&quot;) }} {% if form.confirm_password.errors %} {{ form.confirm_password(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.confirm_password.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.confirm_password(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;/fieldset&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.submit(class=&quot;btn btn-outline-info&quot;) }} &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;div class=&quot;border-top pt-3&quot;&gt; &lt;/div&gt; {% endblock content %} . . form.hidden _tag() works with the secret key to add protection against CSRF attacks. . We need to create a div class=&#8221;form-group&#8221;&gt; for each of our variables. . Username, email, and password will use the Bootstrap class form-control-label to create a text box for the user the type in the information. . The submit variable will use btn btn-outline-info to create a button that the user can press to submit the form. . When there is an error in the form, we will need the program to run a conditional. For example, if there is an error in the username, the condition {% if form.username.errors %} will be true. This will result in the error variable from the for loop to print. . Copy the following code into login.html&lt;/code&gt;&lt;/i&gt;&lt;/strong&gt;:&lt;/h4&gt; . {% extends &quot;layout.html&quot; %} {% block content %} &lt;div class=&quot;content-section&quot;&gt; &lt;form method=&quot;POST&quot; action=&quot;&quot;&gt; {{ form.hidden_tag() }} &lt;fieldset class=&quot;form-group&quot;&gt; &lt;legend class=&quot;border-bottom mb-4&quot;&gt;Log In&lt;/legend&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.email.label(class=&quot;form-control-label&quot;) }} {% if form.email.errors %} {{ form.email(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.email.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.email(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.password.label(class=&quot;form-control-label&quot;) }} {% if form.password.errors %} {{ form.password(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.password.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.password(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;div class=&quot;form-check&quot;&gt; {{ form.remember(class=&quot;form-check-input&quot;) }} {{ form.remember.label(class=&quot;form-check-label&quot;) }} &lt;/div&gt; &lt;/fieldset&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.submit(class=&quot;btn btn-outline-info&quot;) }} &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;div class=&quot;border-top pt-3&quot;&gt; &lt;/div&gt; {% endblock content %} . . This file uses similar functions to the register.html file with slight variation. . The legend is now &#8220;Log in&#8221; instead of &#8220;Signup&#8221;. . We do not need the confirm password form group. . We will need div class=&#8221;form-check&#8221; for our &#8220;Remember Me&#8221; function which will allow the user to check a box if they would like to be remembered . Lastly, lets create a template to allow users to easily update their account information. . Within templates&lt;/code&gt;&lt;/i&gt;, create a file named account.html&lt;/code&gt;&lt;/i&gt; and register.html&lt;/code&gt;&lt;/i&gt;.&lt;/h4&gt; ├── webpage │ ├── static │ │ ├── main.css │ ├── templates │ │ ├── account.html │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db . Copy the following code into account.html&lt;/code&gt;&lt;/i&gt;&lt;/strong&gt;:&lt;/h4&gt; . {% extends &quot;layout.html&quot; %} {% block content %} &lt;div class=&quot;content-section&quot;&gt; &lt;div class=&quot;media&quot;&gt; &lt;img class=&quot;rounded-circle account-img&quot; src=&quot;{{ image_file }}&quot;&gt; &lt;div class=&quot;media-body&quot;&gt; &lt;h2 class=&quot;account-heading&quot;&gt;{{ current_user.username }}&lt;/h2&gt; &lt;p class=&quot;text-secondary&quot;&gt;{{ current_user.email }}&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;form method=&quot;POST&quot; action=&quot;&quot; enctype=&quot;multipart/form-data&quot;&gt; {{ form.hidden_tag() }} &lt;fieldset class=&quot;form-group&quot;&gt; &lt;legend class=&quot;border-bottom mb-4&quot;&gt;Account Info&lt;/legend&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.username.label(class=&quot;form-control-label&quot;) }} {% if form.username.errors %} {{ form.username(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.username.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.username(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.email.label(class=&quot;form-control-label&quot;) }} {% if form.email.errors %} {{ form.email(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.email.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.email(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.picture.label() }} {{ form.picture(class=&quot;form-control-file&quot;) }} {% if form.picture.errors %} {% for error in form.picture.errors %} &lt;span class=&quot;text-danger&quot;&gt;{{ error }}&lt;/span&gt;&lt;/br&gt; {% endfor %} {% endif %} &lt;/div&gt; &lt;/fieldset&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.submit(class=&quot;btn btn-outline-info&quot;) }} &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; {% endblock content %} . . This template uses the same bootstrap functions we have seen in the other templates. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Creating Posts . In this section, we will work on the files within our posts&lt;/code&gt;&lt;/i&gt; module to allow users to create posts on the website. Lets add a forms.py&lt;/code&gt;&lt;/i&gt; to this module.&lt;/h3&gt; ├── webpage │ ├── static │ │ ├── main.css │ ├── templates │ │ ├── account.html │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db . We will be using WTForms once again for our posts&lt;/code&gt;&lt;/i&gt; forms.py&lt;/code&gt;&lt;/i&gt;.&lt;/h3&gt; from flask_wtf import FlaskForm from wtforms import StringField, SubmitField, TextAreaField from wtforms.validators import DataRequired class PostForm(FlaskForm): title = StringField(&#39;Title&#39;, validators=[DataRequired()]) content = TextAreaField(&#39;Content&#39;, validators=[DataRequired()]) submit = SubmitField(&#39;Post&#39;) . A title and content is required for our post form hence validators=[DataRequired()]. StringField is used for a shorter string of characters, perfect for the title. TextAreaField is for a larger amount of text, great for the content section. We will also be creating a submit button on this page when we create our templates. . Now lets work on the posts&lt;/code&gt;&lt;/i&gt; routes.py&lt;/code&gt;&lt;/i&gt; file.&lt;/h3&gt; from flask import (render_template, url_for, flash, redirect, request, Blueprint) from flask_login import current_user, login_required from webpage import db from webpage.models import Post from webpage.posts.forms import PostForm posts = Blueprint(&#39;posts&#39;, __name__) @posts.route(&quot;/post/new&quot;, methods=[&#39;GET&#39;, &#39;POST&#39;]) @login_required def new_post(): form = PostForm() if form.validate_on_submit(): post = Post(title=form.title.data, content=form.content.data, author=current_user) db.session.add(post) db.session.commit() flash(&#39;Your post has been created!&#39;, &#39;success&#39;) return redirect(url_for(&#39;main.feed&#39;)) return render_template(&#39;create_post.html&#39;, title=&#39;New Post&#39;, form=form, legend=&#39;New Post&#39;) . To create a new post, a user must be logged in. This function &lt;code&gt;@login_required&lt;/code&gt; only allows logged in users to use the /post/new route. This route uses the form we just created and validates the user inputs before the post is added to the database. . A flash alert is shown when the post is created then the user is redirected to the feed page. . Now we will be creating the create_post.html file this route will render from. . Create a new template called create_post.html&lt;/code&gt;&lt;/i&gt;.&lt;/h4&gt; ├── webpage │ ├── static │ │ ├── main.css │ ├── templates │ │ ├── account.html │ │ ├── create_post.html │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db . Similar to the register.html&lt;/code&gt;&lt;/i&gt; and login.html&lt;/code&gt;&lt;/i&gt; templates, the create_post.html&lt;/code&gt;&lt;/i&gt; template will be formatting the form with textboxes and buttons where needed using the following code:&lt;/h4&gt; . {% extends &quot;layout.html&quot; %} {% block content %} &lt;div class=&quot;content-section&quot;&gt; &lt;form method=&quot;POST&quot; action=&quot;&quot;&gt; {{ form.hidden_tag() }} &lt;fieldset class=&quot;form-group&quot;&gt; &lt;legend class=&quot;border-bottom mb-4&quot;&gt;{{ legend }}&lt;/legend&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.title.label(class=&quot;form-control-label&quot;) }} {% if form.title.errors %} {{ form.title(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.title.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.title(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.content.label(class=&quot;form-control-label&quot;) }} {% if form.content.errors %} {{ form.content(class=&quot;form-control form-control-lg is-invalid&quot;) }} &lt;div class=&quot;invalid-feedback&quot;&gt; {% for error in form.content.errors %} &lt;span&gt;{{ error }}&lt;/span&gt; {% endfor %} &lt;/div&gt; {% else %} {{ form.content(class=&quot;form-control form-control-lg&quot;) }} {% endif %} &lt;/div&gt; &lt;/fieldset&gt; &lt;div class=&quot;form-group&quot;&gt; {{ form.submit(class=&quot;btn btn-outline-info&quot;) }} &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; {% endblock content %} . . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Displaying Posts on the Feed Page . The feed page will display the posts created by the user. The code required to make this page will be in the main&lt;/code&gt;&lt;/i&gt; module.&lt;/h3&gt; In the main routes.py&lt;/code&gt;&lt;/i&gt; file, copy the following code:&lt;/h4&gt; from flask import render_template, Blueprint from webpage.models import Post main = Blueprint(&#39;main&#39;, __name__) @main.route(&quot;/&quot;) @main.route(&quot;/feed&quot;) def feed(): posts = Post.query.order_by(Post.date_posted.desc()) return render_template(&#39;feed.html&#39;, posts=posts) . The feed function searches for the posts within the database and orders them by the date posted. Newer posts will appear at the top of the feed. Earlier in the blog, we created the feed.html&lt;/code&gt;&lt;/i&gt; template in the Child Template section which this function will render from.&lt;/h4&gt; We already created the template for our feed page in the Child Template. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Default Profile Picture . New users or users without a profile picture, will be automatically given a default profile picture. . Since profile pictures will not alter the code as the application is running, the file we will create to save these pictures will be in the static folder. Name it profile_pics. Within this file, upload a default image. Make sure this image is named default as shown below: . ├── webpage │ ├── static │ │ ├── main.css │ │ ├── profile_pics │ │ │ ├── default.jpg │ ├── templates │ │ ├── account.html │ │ ├── create_post.html │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db . Here is an example default image used in the website shown in this blog: . ![title](img/default.jpg) . Running Your Application . While developing your program, you will need to run your code to ensure your application runs smoothly before it is deployed. . Create an app.py&lt;/code&gt;&lt;/i&gt; file outside of the webpage&lt;/code&gt;&lt;/i&gt; folder.&lt;/h4&gt; ├── webpage │ ├── static │ │ ├── main.css │ │ ├── profile_pics │ │ │ ├── default.jpg │ ├── templates │ │ ├── account.html │ │ ├── create_post.html │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db ├── app.py . Import the following code into this file: . from webpage import app if __name__ == &#39;__main__&#39;: app.run(debug=True) . The only purpose of the ap.py&lt;/code&gt;&lt;/i&gt; is to run the code. The file grabs the app&lt;/code&gt;&lt;/i&gt; variable from webpage __ init__.py&lt;/code&gt;&lt;/i&gt; and runs it. The app&lt;/code&gt;&lt;/i&gt; variable must be inside the __ init__.py&lt;/code&gt;&lt;/i&gt; since this is where we are initializing the application.&lt;/h4&gt; Launching Your Site . To run the application, type &#8220;python run.py&#8221; into the terminal. Click on the http://127.0.0.1:5000 link or paste it into your browser and your website should open! . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Deploying Your Website . In this section, I will be explaining how to deploy your Flask application onto the World Wide Web for free so that anyone with internet is able to access it. I will be using Heruko&#39;s &quot;Free and Hobby&quot; package, however, you can also upgrade to a paid package for more web functions. . Steps: . Download Heroku Toolbelt CLI using this link | Once installed, open your computer&#39;s command prompt terminal and make sure you are in your FlaskWebPage&lt;/code&gt;&lt;/i&gt; directory and that your virtual environment is active. This is what your terminal should say: (env) C: Users jenni OneDrive Desktop FlaskWebPage&gt; . &lt;/li&gt; We will need to install gunicornpip install Gunicorn (a Python Web Server Gateway Interface (WSGI) HTTP server) and Psycopg 2 (a PostgreSQL database for Python). In the terminal type &quot;pip install gunicorn&quot;.(env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;pip install gunicorn Once Gunicorn is installed, type &quot;pip install psycopg2&quot;. (env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;pip install psycopg2 . | Next we will have to create a file with the required packages that Heroku will need to download in order to use the different functions in our application. Create a new file called requirements.txt&lt;/code&gt;&lt;/i&gt;.&lt;/p&gt; ├── webpage │ ├── static │ │ ├── main.css │ │ ├── profile_pics │ │ │ ├── default.jpg │ ├── templates │ │ ├── account.html │ │ ├── create_post.html │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db ├── app.py ├── requirements.txt . Type &quot;pip freeze&quot; into the terminal: . (env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;pip install psycopg2 Copy all the requirements into the requirements.txt&lt;/code&gt;&lt;/i&gt; file.&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; Now we have to tell Heroku what kind of app we are running. Create a new file called &quot;Procfile&quot;. . ├── webpage │ ├── static │ │ ├── main.css │ │ ├── profile_pics │ │ │ ├── default.jpg │ ├── templates │ │ ├── account.html │ │ ├── create_post.html │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db ├── app.py ├── Procfile ├── requirements.txt . A Procfile tells Heroku what kind of app we are running. Type the following into the Procfile: . web: gunicorn app:app . This implies that the application is a web app using the gunicorn webserver and our app is called &quot;app&quot; since we named it app.py. . | Create an account on the Heroku website, then type &quot;heroku login&quot; into the command prompt. . (env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;heroku login This will open up the Heroku login page. . | After logging in, we can now create a unique domain for our web server. Type &quot;heroku create&quot; then the name of what you want to call your app. For example, &quot;heroku create flaskmediapage&quot; was typed into the command prompt: . (env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;heroku create flaskmediapage The terminal will inform you whether or not that domain name is taken. If the domain name is not taken, a URL to your website is created and should look similar to this: https://flaskmediapage.herokuapp.com/ . | The database we currently have is an SQLite database which was great during development of our app, however, is unable to run over a network. In order to deploy the app, we need to switch to a PostgreSQL database. To create a database with heroku, type &quot;heroku addons:create heroku-postgresql:hobby-dev --app flasksocialmedia&quot; into the terminal. . (env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;heroku addons:create heroku-postgresql:hobby-dev --app flaskmediapage Ensure the last word of this command is the name of your app you chose from step 7. Now you have a free empty database. . | Now we have to alter our code to make sure our application is using the PostgreSQL database. First we need to get the URL for database. Type this into your command prompt: &quot;heroku config --app flaskmediapage&quot;. . (env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;heroku config --app flaskmediapage This should create a URL similar to this: postgres://baeiyrmyxoecvu:c38f07af1eb3ad0da3e952189097972948241444bafe16ebfe86227aa089e8f1@ec2-52-206-182-219.compute-1.amazonaws.com:5432/des45gq4vda2q Now copy this URL and paste it into the webpage __ init__.py&lt;/code&gt;&lt;/i&gt; file, replacing the SQLite link we initially had. Add &quot;ql&quot; after &quot;postgres&quot; to indicate that it is an SQLAlchemy database Your code should look like this: from flask import Flask from flask_sqlalchemy import SQLAlchemy from flask_bcrypt import Bcrypt from flask_login import LoginManager&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;/ol&gt; app = Flask(name) app.config[&#39;SECRET_KEY&#39;] = &#39;5791628bb0b13ce0c676dfde280ba245&#39; app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;postgresql://baeiyrmyxoecvu:c38f07af1eb3ad0da3e952189097972948241444bafe16ebfe86227aa089e8f1@ec2-52-206-182-219.compute-1.amazonaws.com:5432/des45gq4vda2q&#39; db = SQLAlchemy(app) bcrypt = Bcrypt(app) login_manager = LoginManager(app) . from webpage.users.routes import users from webpage.posts.routes import posts from webpage.main.routes import main . app.register_blueprint(users) app.register_blueprint(posts) app.register_blueprint(main) . 10. We will be pushing our application onto Heroku using Github repositories. * Create a &lt;code&gt;&lt;i&gt;.gitignore&lt;/code&gt;&lt;/i&gt; file. bash ├── webpage │ ├── static │ │ ├── main.css │ │ ├── profile_pics │ │ │ ├── default.jpg │ ├── templates │ │ ├── account.html │ │ ├── create_post.html │ │ ├── feed.html │ │ ├── layout.html │ │ ├── login.html │ │ ├── register.html │ ├── main │ │ ├── __init__.py │ │ ├── routes.py │ ├── posts │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ ├── users │ │ ├── __init__.py │ │ ├── forms.py │ │ ├── routes.py │ │ ├── save_pics.py │ ├── __init__.py │ ├── models.py │ ├── site.db ├── .gitignore ├── app.py ├── Procfile ├── requirements.txt . Paste the following code: . # Byte-compiled / optimized / DLL files __pycache__/ *.py[cod] *$py.class # C extensions *.so # Distribution / packaging .Python build/ develop-eggs/ dist/ downloads/ eggs/ .eggs/ lib/ lib64/ parts/ sdist/ var/ wheels/ share/python-wheels/ *.egg-info/ .installed.cfg *.egg MANIFEST # PyInstaller # Usually these files are written by a python script from a template # before PyInstaller builds the exe, so as to inject date/other infos into it. *.manifest *.spec # Installer logs pip-log.txt pip-delete-this-directory.txt # Unit test / coverage reports htmlcov/ .tox/ .nox/ .coverage .coverage.* .cache nosetests.xml coverage.xml *.cover *.py,cover .hypothesis/ .pytest_cache/ cover/ # Translations *.mo *.pot # Django stuff: *.log local_settings.py db.sqlite3 db.sqlite3-journal # Flask stuff: instance/ .webassets-cache # Scrapy stuff: .scrapy # Sphinx documentation docs/_build/ # PyBuilder .pybuilder/ target/ # Jupyter Notebook .ipynb_checkpoints # IPython profile_default/ ipython_config.py # pyenv # For a library or package, you might want to ignore these files since the code is # intended to run in multiple environments; otherwise, check them in: # .python-version # pipenv # According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control. # However, in case of collaboration, if having platform-specific dependencies or dependencies # having no cross-platform support, pipenv may install dependencies that don&#39;t work, or not # install all needed dependencies. #Pipfile.lock # poetry # Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control. # This is especially recommended for binary packages to ensure reproducibility, and is more # commonly ignored for libraries. # https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control #poetry.lock # pdm # Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control. #pdm.lock # pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it # in version control. # https://pdm.fming.dev/#use-with-ide .pdm.toml # PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm __pypackages__/ # Celery stuff celerybeat-schedule celerybeat.pid # SageMath parsed files *.sage.py # Environments .env .venv env/ venv/ ENV/ env.bak/ venv.bak/ # Spyder project settings .spyderproject .spyproject # Rope project settings .ropeproject # mkdocs documentation /site # mypy .mypy_cache/ .dmypy.json dmypy.json # Pyre type checker .pyre/ # pytype static type analyzer .pytype/ # Cython debug symbols cython_debug/ # PyCharm # JetBrains specific template is maintained in a separate JetBrains.gitignore that can # be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore # and can be added to the global gitignore or merged into this file. For a more nuclear # option (not recommended) you can uncomment the following to ignore the entire idea folder. #.idea/ . This file tells Git which files to not commit. . Type &quot;git init&quot; into the command prompt to initialize your repository.(env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;git init . | &quot;git add -A&quot; collects all the files.(env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;git add -A . | &quot;git commit -m &quot;initial commit&quot;&quot; commits the files into the repository.(env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;git commit -m &quot;initial commit&quot; . | &quot;git push heroku master&quot; pushes the repository onto Heroku.(env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;git push heroku master . | . The last step is to migrate the PostgreSQL database, similar to what we did with SQLite. | Type &quot;heroku run python&quot; in the command prompt.(env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;heroku run python . | Now we will import our database: . &gt;&gt;&gt; from webpage import db . | Then we will create the database:&gt;&gt;&gt;&gt; db.create_all() . | Exit out of the python terminal:&gt;&gt;&gt; exit() . | . Now you should have your own fully functioning social media page! . You can paste the URL you are given from step 7 into your browser or use the following command to open your web server:&gt;(env) C: Users jenni OneDrive Desktop FlaskWebPage&gt;heroku open . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Sources . Schafer, C. (2018, May 4). Python flask tutorial: Full-featured web app part 1 - getting started. YouTube. Retrieved June 26, 2022, from https://www.youtube.com/watch?v=MwZwr5Tvyxo&amp;amp;list=PL-osiE80TeTs4UjLw5MM6OjgkjFeUxCYH | Walker, R. (n.d.). Education at bat: Seven principles for educators. Harvard Graduate School of Education. Retrieved June 26, 2022, from https://www.gse.harvard.edu/news/uk/09/01/education-bat-seven-principles-educators | Mark Otto, J. T. (n.d.). Bootstrap. Bootstrap · The most popular HTML, CSS, and JS library in the world. Retrieved June 26, 2022, from https://getbootstrap.com/ | Real Python. (2021, February 6). Use a flask blueprint to architect your applications. Real Python. Retrieved June 27, 2022, from https://realpython.com/flask-blueprint/ | Jemastock. (2019, April 17). Thumb up icon vector image on vectorstock. VectorStock. Retrieved June 27, 2022, from https://www.vectorstock.com/royalty-free-vector/thumb-up-icon-vector-24957601 | CoreyMSchafer. (n.d.). Code_snippets/python/flask_blog at master · coreymschafer/code_snippets. GitHub. Retrieved June 27, 2022, from https://github.com/CoreyMSchafer/code_snippets/tree/master/Python/Flask_Blog | Github. (2021, December 11). Gitignore/jetbrains.gitignore at main · github/gitignore. GitHub. Retrieved June 27, 2022, from https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore | Codemy.com. (2022, January 14). Deploy flask app with database on Heroku for webhosting - flask fridays #39. YouTube. Retrieved June 27, 2022, from https://www.youtube.com/watch?v=SiCAIRc0pEI | &lt;/div&gt; . | . | | . . . . . . | .",
            "url": "https://de-fellows.github.io/RexCoding/python/flask/html/2022/06/18/flask-media.html",
            "relUrl": "/python/flask/html/2022/06/18/flask-media.html",
            "date": " • Jun 18, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Go, Go, Gadget!",
            "content": "Christina Kampel . Digital Engineering Fellowship, Spring 2022 . University of Calgary . . Contact Me! . GitHub: Christina-Kampel | Email: cekampel@gmail.com | . . Code for this blog post can be found here. . . Project Scope . Project Goals . Gain a better understanding of computer hardware by using a Raspberry Pi 4. | Learn methods of collecting data using electronic sensors. | Compare temperature and humidity data from several different sensors. | Implement a web application to express data in a clear and meaningful way. | . Procedure . Initialize Raspberry Pi 4 with Raspbian OS. Connect to mouse, keyboard and monitor. | Connect temperature-humidity sensors to Raspberry Pi 4: DHT11 | Grove Begin and test data collection. | . | Generate graphs using collected data. Compare temperature and humidity data across both sensors. | Display data on webpage accessible from within the University of Calgary network. | Making Learning Whole Paradigm . This project focuses on Principle 1 from Making Learning Whole: How Seven Principles of Teaching Can Transform Education: Play the Whole Game . What Does This Mean? . Students already have most of the skills needed to complete the project | This project will demonstrate a practical application of coding skills, instead of a theoretical application | Students can complete the project feeling more confident about their ability to apply theoretical skills to a real-life problem | . Connecting Concepts . FAQ . Q: How can this project be applied to Digital Engineering curriculum? . A: This work can be used as a project or large-scale assignment for Digital Engineering students. . Q: Who should do this project? . A: Students with proficient knowledge in Python and some experience with Matplotlib, Flask and HTML. . Q: Why should I do this project? . A: One of the best ways to learn is by doing. You will boost your self-confidence by proving to yourself that you can use what you already know to make something new and useful. You may be surprised what you learn along the way. Remember: No matter how hard the project seems, there is light at the end of the tunnel! . . Phase 1: Initializing the Raspberry Pi . You will need: . A computer | A microSD adapter (if your computer does not have a microSD port) | Internet access | A microSD card (preferably 32 GB or less) | A Raspberry Pi 4 Model B | A USB-C power cable (with an on/off switch is best) | A Mouse with USB Cable | A Keyboard with USB Cable | A Monitor | A Micro HDMI Cable or Adapter | . Estimated Time Required: 2-3 Hours . 1.1: A Brief Introduction . In Phase 1 we need to get the Raspberry Pi 4 up and running. Unlike the computers in your phone, laptop or smartwatch, Raspberry Pi computers do not come with a built-in Operating System (OS). This means you need to do it yourself, by putting the OS on a microSD card using your own computer and then inserting the microSD into the Raspberry Pi. . There are several ways to do this. For a Raspberry Pi 4, you can use the New Out of Box Software (NOOBS) method, or the Raspberry Pi Imager method. We will be using the latter. . It is important to have some sort of an adapter for your microSD card, since most laptops or computers do not have that kind of port. Some options are a microSD to USB adapter or a microSD to SD card adapter. The important part is that you have some way of connecting the microSD to your computer. I am using an ADATA microReader, because it is what I had on hand. . The content in Sections 1.1 to 1.5 is based on the video The New Method to Setup Raspberry Pi (2022 Update) by Refactored on YouTube (https://www.youtube.com/watch?v=jRKgEXiMtns). . 1.2: Checking the File Format . Raspberry Pi’s require your microSD card to be in FAT32 file format. This is the default format for SD cards with 32GB or less storage capacity. . If your microSD card is 32GB or less, congratulations! You can move on to section 1.3. . If your microSD card is greater than 32GB, you will need to convert it to FAT32. Both Windows and Mac have options for this that can be found with a simple Google search. Once this is completed, move on to section 1.3. . 1.3: Flashing the microSD Card . In the Raspberry Pi world, &quot;flashing the SD card&quot; means writing the OS image to the SD card. We will be doing this using Raspberry Pi Imager to install the Raspberry Pi OS (formerly Raspbian). . Follow these steps: . Step 1: Go to the official Raspberry Pi website: https://www.raspberrypi.org/ . . Step 2: Navigate to the Software page. It should be under Computers &gt; Software. . . Step 3: Under &quot;Install Raspberry Pi OS using Raspberry Pi Imager&quot;, download the version that works on your computer (Windows, macOS or Ubuntu). I&#39;m using the Windows option. . . Step 4: Find the downloaded file in your File Explorer (or Finder on Mac) and open it. If it asks if you want to allow it to make changes to your device, click Yes. . . Step 5: When the Raspberry Pi Imager pop-up window appears, click Install. You may want to close all other applications that are currently running on your computer. . . Step 6: When the Installation is complete, uncheck the &quot;Run Raspberry Pi Imager&quot; button and click Finish. . . Step 7: Now search for &quot;Raspberry Pi Imager&quot; on your computer. On Windows, it should pop up as shown here. Click Open. If the pop-up window asks if you would like Raspberry Pi Imager to make changes to your device, click Yes. . . Tip: If you&#39;re interested in keeping your file system organized like I am, you can find where the application is stored by clicking Open File Location. . . Step 8: Connect your microSD card to your computer using the adapter of your choice. . Step 9: Identify the name of the drive (the microSD card) you just connected using your File Explorer or Finder. On my computer, it is the D:/ drive but this may be a different letter for you. The important part is that it is not the drive that all of your computer files are stored on (my C:/ drive). . . Step 10: In Raspberry Pi Imager, we now need to select the Operating System we want and where we want to store it. . . For the Operating System choose the Raspberry Pi OS (32-bit) option. . . For the Storage choose the drive you just inserted (for me, the D:/ drive). . WARNING:DO NOT CHOOSE A DRIVE YOU ARE NOT 100% CERTAIN ABOUT. This will overwrite the drive, which is IRREVERSIBLE. If you are unsure about which Storage option to choose, ask a friend, professor or TA for help. . . A Note About Advanced Settings: These settings are found under the gear wheel button. I chose to keep all buttons checked off except for the two at the bottom - Eject media when finished and Enable telemetry (not pictured). These settings can be changed after the OS is &quot;flashed&quot; onto the microSD card. . . Step 11: When you are satisfied with your Operating System, Storage and Advanced Settings choices, click Write. Make sure your computer is plugged in to a power source for this since it might take a while. Mine took a little over 30 minutes to write. Note that the adapter and microSD card will automatically be ejected when it is done. . 1.4: Powering Up the Raspberry Pi . Now we need to connect all the bits and bobs to our Raspberry Pi. The main challenge here is making sure you have the right cable for the job. Here are the ports we can use, courtesy of the official Raspberry Pi website: . . Here&#39;s my setup: . . . USB-C Power Cable | Monitor Connected via Micro HDMI Cable | Keyboard and Mouse connected via USB cable in the USB 2 ports | Micro SD Card (inserted into the slot on the underside of the Raspberry Pi)Using a USB-C power cable with an on/off switch makes it much easier to turn your Raspberry Pi on or off. Without a switch, you will be constantly unplugging and plugging the USB-C back in, since they do not have a built-in power button. . | 1.5:Navigating the Startup Menu . When you plug the power into your Raspberry Pi, it automatically turns on. There is no built-in power button on your Raspberry Pi, so it will turn on if power is supplied to it. If your microSD card has been inserted into the Raspberry Pi, a Startup Menu will appear as shown below. . Click Next to begin the setup process. . . Set your language, time zone and keyboard. If you are doing this from Calgary, AB and you need an English keyboard, select the options shown here. . Click Next to move on. . . Choose a username and password. This will be your user account on the Raspberry Pi. . Make sure you write the username and password down, since you will need them later. . Click Next to create your account. . . If there is no black border between the Raspberry Pi desktop and your monitor, it is possible that the monitor is slightly cutting off the display. . In this case, click the button shown in the image to reduce the desktop size. . It may take several seconds for this to take effect. You may also need to continue through the setup pages before the changes take effect. . Click Next to continue. If you change your mind, you can click Back to return to this page. . . Select the WiFi network you want to connect to and click Next to connect and input the WiFi password. . Or, click Skip to continue without connecting to WiFi. . . Click Next to check and update the software. . This may take a while. My updates took a little longer than ten minutes. . . Click Restart to make the new settings take effect. . If the Raspberry Pi does not appear to be turning back on, try unplugging the power, waiting a couple seconds, and plugging it back in. . If that doesn’t work, try doing the same thing with both the power and the Micro HDMI cables. . . Congratulations! You have successfully set up your Raspberry Pi 4. . . 1.6:Connecting via SSH . There are a few main ways to access your Raspberry Pi. We just completed the first method – plugging in a monitor, mouse and keyboard to use the Raspberry Pi like a home computer. Another popular way to use your Raspberry Pi is through a Secure Shell (SSH) connection. Here’s what you need to know about SSH: . It allows you to run the terminal (command line interface) on your Raspberry Pi from the terminal on your own computer | You can also share files between the Raspberry Pi and your own computer | Both the Raspberry Pi and your own computer must be connected to the same network | You need to know the IP address of the Raspberry Pi on that network | You need to know the username and password from your Raspberry Pi user account we created in section 1.5 | You won’t need to plug all of the cables and gadgets into your Raspberry Pi, only the power cableSSH can be very useful if you want your Raspberry Pi to control something remotely, like a sensor or robot. It removes the desktop we saw in 1.5, so there is no need for a screen or a Graphical User Interface (GUI). . | . The content in Section 1.6 is based on the article SSH:Remote control your Raspberry Pi by Russell Barnes in The MagPi Magazine (https://magpi.raspberrypi.com/articles/ssh-remote-control-raspberry-pi). . Let’s set up our SSH connection! With the setup from section 1.5, follow these steps: . Step 1: Get the IP address of your Raspberry Pi on that network . Make sure your Raspberry Pi is on the same network (WiFi or Wired LAN) as your computer. To check this, go to the top right corner of the desktop and click the WiFi button. | Open a Terminal. You can do this by clicking the terminal button in the top left corner of the desktop or by pressing Ctrl + Alt + T on the Raspberry Pi’s keyboard. | In the terminal, there are two ways to find the IP address: (Easiest Method) Type hostname -I and hit Enter to get the IP address on that network. Shown below, the IP address is 192.168.1.138. This will be a different address on each network. | . | . . OR . Type ifconfig and hit Enter. The number underneath “wlan0” and beside “inet” is the Raspberry Pi’s IP address on that particular network. Shown below, we get the same the IP address (192.168.1.138). | . . If you are frequently using the Raspberry Pi under the same network (for example, at your house), write down this IP address since you will be using it often. . Step 2:Enable SSH on the Raspberry Pi . In the terminal, type sudo raspi-config and hit Enter. This will take you to the Configuration Tool. | . . On the Configuration Tool, use the up and down arrows to select Interface Options. Press Enter. | . . Use the up and down arrows to select SSH. Press Enter. | . . Select Yes and hit Enter to enable SSH on the Raspberry Pi. | . . Press Enter. | . . On the Configuration Tool, use the Tab key to access the &quot;Select&quot; and &quot;Finish&quot; buttons at the bottom. Use the left and right arrow keys to select Finish and hit Enter. | . . Step 3: Activate SSH Client (Windows) . This step is not needed for Linux or macOS. | In Windows 10, you can use SSH without having to download anything, but you need to activate it first. | On your computer, search for and Open “Manage Optional Features”. | . . Click Add a feature. | . . Search for OpenSSH Server (may also be called OpenSSH Client). Install it. | . . Step 4: Access Raspberry Pi via SSH Client . Open a Terminal/Command Prompt on your computer and type in ssh [username]@[IP] and press Enter. For example, since my username is “christina” and the Raspberry Pi IP address in the Makerspace is 192.168.1.48, I type in ssh christina@192.168.1.48. If this is your first time using SSH, it may say that the authenticity cannot be established and it will ask, “Are you sure you want to continue connecting?” Type yes and hit Enter. You will then need to enter your password for the Raspberry Pi that we wrote down in Section 1.5. Note that the password will not appear on the screen as you are typing it. . Step 5: Exiting SSH . If you want to end the SSH connection, type exit into the terminal and hit Enter. . The Raspberry Pi terminal uses Linux commands. An easy guide to Linux commands can be found on the SSE Tech Support website under M2Z &gt; Learning Resources &gt; Programming Skills and Tools &gt; Linux Terminal (https://schulich.libguides.com/c.php?g=721481).&gt; Troubleshooting and Problem Solving: While trying to connect via SSH, I had the following problems:- My laptop was connected to a different network than the Raspberry Pi, so the SSH connection was refused- I entered the wrong username into the terminal (shown in red), so it didn’t recognize the password I had written downOnce I solved these problems, I had success connecting (shown in blue).If you are having difficulty connecting, look for the problems listed above. You can also double-check that your IP address is correct and that the power to the Raspberry Pi is on. If these do not work, try using PuTTY to connect (see the article link in the green box at the beginning of this Section). . . . Phase 2: Connecting the Sensors . You will need: . A computer | A Raspberry Pi 4 Model B with microSD card and OS already installed (Phase 1) | A USB-C power cable (with an on/off switch is best) | A Grove Base HAT for Raspberry Pi with included Screws and Spacers (Seeed brand) | A Grove Temperature &amp; Humidity Sensor with included Ribbon Cable (Seeed brand) | A DHT11 Temperature &amp; Humidity Sensor | 3 Female-to-Male electrical wires (should be compatible with a breadboard) | A Solderless Breadboard | Small Phillips-Head Screwdriver (size 0) | . Estimated Time Required: 3 Hours . 2.1: Connecting the Grove Base HAT . The Grove Base HAT for Raspberry Pi should include the Base HAT (a nifty way to connect sensors to your Raspberry Pi), four spacers and eight screws. The unit is called a HAT (Hardware Attached on Top) because it sits on top of the Raspberry Pi! . . The content in Section 2.1 is based on the article How to mount a Grove Base Hat for Raspberry Pi by Gerald Venzl (https://geraldonit.com/2020/01/12/how-to-mount-a-grove-base-hat-for-raspberry-pi/). . To connect the Grove Base HAT to the Raspberry Pi, follow these steps: . Using your small Phillips-head screwdriver, attach the spacers to the Grove Base HAT as shown below. | . Carefully press the Grove Base HAT onto the GPIO pins of the Raspberry Pi using the black ports on the underside of the HAT. Be careful not to bend the GPIO pins. Then, use the remaining four screws to attach the HAT to the Raspberry Pi, as shown below. | . Install the Seeed studio provided grove.py software, using one of two methods. Note: Only Method 1 worked for my setup. | Method 1: Git Clone Method, Successful . Connect to the Raspberry Pi using SSH | In the Terminal, type git clone https://github.com/Seeed-Studio/grove.py and hit Enter | Type cd grove.py into the terminal and hit Enter | Type sudo pip3 install . and wait for it to install (this may take a minute) | . . The git clone method can also be found on the Seeed Studio webpage for the Grove Base HAT (https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/). . Method 2: Curl Method, Unsuccessful . Connect to the Raspberry Pi using SSH | In the Terminal, type sudo apt update and hit Enter (this line was not successful for me) | Then, type sudo apt install -y curl and hit Enter | If needed, you can see the version of curl by typing curl --version and hitting Enter | Then, type curl -sL https://github.com/Seeed-Studio/grove.py/raw/master/install.sh | sudo bash -s – | . . . . After grove.py is installed, you can type grove_ into the Terminal and hit Tab. This allows you to see the various modules you can use with your Internet of Things (IOT) devices. | 2.2: Connecting the Grove Temperature and Humidity Sensor . Even though it is not obvious from the packaging, the Grove Temperature and Humidity Sensor Version 2.0 is a DHT20 sensor. You may find this information useful during research. Your package should look something like this: . . The content in Section 2.2 is based on the article How to use a Grove Temperature and Humidity Sensor Pro with a Raspberry Pi by Gerald Venzl (https://geraldonit.com/2020/01/19/how-to-use-a-grove-temperature-and-humidity-sensor-pro-with-a-raspberry-pi/).&gt; Using Secure Copy (SCP):In this section, we need to transfer files from our personal computer to the Raspberry Pi. We can do this using Secure Copy (SCP).Since we already enabled SSH, SCP is also enabled.Here’s what to do:1. Make sure your personal computer is on the same network as the Raspberry Pi, just like you would do for an SSH connection.2. In the Command Prompt on your computer, navigate to the folder that contains the file you want to transfer. On Windows, you can do this using the cd and dir commands.3. From that location, type into the terminal: scp filename.txt username@[IP]:folder/4. You will then need to input the password of your Raspberry Pi.For example, if we needed to save a file called test_code.py to the “Code” folder on the Raspberry Pi at the IP address 192.168.1.138, the line would look like this:scp test_code.py christina@192.168.1.138:Code/Note that the folder you specify is the location you want to save the file to on the Raspberry Pi. The folder is the file path relative to the “Home” folder on the Raspberry Pi.&gt; You can learn more about Secure Copying with the Raspberry Pi here (https://howchoo.com/pi/how-to-transfer-files-to-the-raspberry-pi). . To connect the Raspberry Pi to the Grove Temperature and Humidity Sensor, we need to do the following: . Step 1: Install needed packages . Connect to the Raspberry Pi via SSH | Install the seeed-python-dht package: Type pip3 install seeed-python-dht into the Raspberry Pi terminal and hit Enter | Install the python-smbus package: Type sudo apt-get install -y python smbus into the Raspberry Pi terminal and hit Enter. Note: This may not work as the package has become obsolete | . . Install the i2c-tools package: Type sudo apt-get install -y i2c-tools into the Raspberry Pi terminal and hit Enter | . . Step 2: Make a folder to put our test code into called &#8220;Code&#8221; . If you type ls into the terminal, it lists all of the files and folders under the “Home” directory | Type mkdir Code in the terminal to create a folder called “Code” under the “Home” directory | We can confirm that the folder was created using ls again | . . Step 3: Put some test code onto the Raspberry Pi . On your personal computer, create a Python script that will be used to test if the sensor is properly connected. I called mine “i2c_grove_test.py” and I used the code here, from user ultracold on the Raspberry Pi Stack Exchange: https://raspberrypi.stackexchange.com/questions/133457/how-can-rpi4b-use-python-to-talk-to-the-i2c-dht20-sht20-temperature-and-humidi | In the Raspberry Pi Terminal, type exit and hit Enter to end the SSH connection | Using Secure Copy (SCP), copy this new file into the “Code” file of the Raspberry Pi. Do this by navigating to the directory containing “i2c_grove_test.py” in your command prompt, and then typing the line: | . scp i2c_grove_test.py username@[IP]:Code/ . For example, mine was: . scp i2c_grove_test.py christina@192.168.1.138:Code/ . Step 4: Plug the sensor in . If you are still connected to the Raspberry Pi via SSH, type exit to end the connection | Power off the Raspberry Pi. Since we will be plugging things into it, it’s a good idea to unplug the power cable as well | Using the ribbon cable that comes with the Grove Temperature and Humidity Sensor, plug the sensor into the first I2C port of the Grove Base HAT (labelled on the official pinout below) | . . Step 5: Power on the Raspberry Pi and reconnect via SSH . Step 6: Enable the use of the I2C ports . In the Raspberry Pi terminal, type sudo raspi-config and hit Enter | . . Like you did in Section 1.6, choose Interface Options and hit Enter | . . Now, instead of choosing SSH we will now choose I2C (option I5 below). Navigate through the menus and enable the I2C ports | . . Step 7: Find the I2C address . Now comes an interesting part. We need to know the I2C address of our sensor so our code can talk to it. But how do we do this? We use the line i2cdetect -y 1 in our Raspberry Pi terminal. With the sensor attached, your output should look something like this: . . Note that there are two numbers that show up: 08 and 38. This means that the Raspberry Pi recognizes two sensors, one with the address 0x08 and the other with the address 0x38. . The “0x” part that we add on to the number just means the address is a hexadecimal code. . You may be wondering how we can tell which number is the address of our sensor. Simple! . Exit the SSH connection and power off and unplug your Raspberry Pi | When the power cable is unplugged, unplug the Grove sensor | Plug the power cable back in and power on the Raspberry Pi | Run the I2C detection code again | . You should get something like this: . . Notice how we don’t get the 0x38 address when the sensor isn’t plugged in? This means that 0x38 is the I2C address of the sensor when plugged in to the first I2C port. . A Few Notes About I2C Addresses:- There is no guarantee that the sensor will have the same I2C address if you plug it into one of the other I2C ports. Make sure you use the same port every time or check the I2C address again.- Don’t worry if you don’t get the same numbers as I did above. The important part is finding the address for your sensor.- The purpose of the 0x08 I2C address is somewhat unclear. It may be a master or default I2C address. Either way, you may see it used in code to test if the I2C connection is set up properly. This is shown in the i2c_grove_test.py code below (lines 12-14), where “Initialization Error” is printed if there is no 0x08 present: . # User ultracold import time import smbus address = 0x38 #Put your device&#39;s address here i2cbus = smbus.SMBus(1) time.sleep(0.5) data = i2cbus.read_i2c_block_data(address,0x71,1) if (data[0] | 0x08) == 0: print(&#39;Initialization error&#39;) i2cbus.write_i2c_block_data(address,0xac,[0x33,0x00]) time.sleep(0.1) data = i2cbus.read_i2c_block_data(address,0x71,7) Traw = ((data[3] &amp; 0xf) &lt;&lt; 16) + (data[4] &lt;&lt; 8) + data[5] temperature = 200*float(Traw)/2**20 - 50 Hraw = ((data[3] &amp; 0xf0) &gt;&gt; 4) + (data[1] &lt;&lt; 12) + (data[2] &lt;&lt; 4) humidity = 100*float(Hraw)/2**20 print(temperature) print(humidity) . Step 8: Modify your test code if necessary: . In the i2c_grove_test.py code above, you need to make sure that the default address (0x08) and sensor address (0x38) are included in the code. If you have different addresses in your setup, use those. | You may also want to change the print statements. Right now, it will only print the temperature and humidity values but it is not obvious to a user which number is which. I recommend changing them to something like: . print(“Temperature: ”, temperature) . print(“Humidity: ”, humidity) . | On the Raspberry Pi terminal, you can use the command nano to access and modify files using the GNU Nano text editor. . | Navigate to the location of the test file by using cd (change directory) to get to the “Code” folder. The line should be cd Code. Then, hit Enter. | Next, type nano i2c_grove_test.py and hit Enter. This will allow you to edit the file and move around the lines of code using arrow keys. | There are commands at the bottom of the screen that tell you what to do (shown below). Note that “^X” means Ctrl + X. The file will ask you if you want to overwrite (save your changes) before editing. Select Yes. | . . Step 9: Finally, run the test code! . In the Raspberry Pi terminal, navigate to the “Code” folder that contains the i2c_grove_test.py file (same command as before, use cd Code). | Then, type python3 i2c_grove_test.py and hit Enter. This will run the file, which will look something like this: | . . Troubleshooting:- If the Python script will not run, check for errors in your code. If this does not solve the problem, it may help to make the first line of the code #!/usr/bin/python3 since this tells the system to use Python3 as the interpreter directly.- If the temperature and humidity values are all zeros, this is a sign that the code is not actually talking to the sensor. Check that you have the right I2C addresses and, if necessary, unplug the power and unplug/plug in the sensor to the Grove Base HAT again. . 2.3: Connecting the ASAIR DHT11 Sensor . Now that we have successfully connected one temperature and humidity sensor to the Raspberry Pi, we will connect a sensor of a different type that does the same thing. This will be the ASAIR DHT11 sensor, which also collects temperature and humidity data from the environment. . Here’s the key difference: We don’t have a ribbon cable and a port like last time. This sensor needs to be manually connected to the Raspberry Pi’s General-Purpose Input/Output (GPIO) pins using wires and possibly a breadboard. . Your DHT11 should look like the one below. When researching these sensors, pay close attention to the information below: . . Be Aware!While all of these sensors look pretty much the same, researching the wrong sensor will set you back. Here are some things to look for:- Number of Pins – Does it have three pins coming out of the bottom or four?- Brand – Is there a brand name visible anywhere on the sensor?- The Letter S – If there is an “S” on one side of the sensor, it means the pin closest to it is the signal pin. This will be useful when researching pinouts.- Small LED – Some sensors come with a small LED on the left side that lights up if you have wired it to power correctly. The sensor shown here does not have an LED. The small component above the “S” is a resistor, so don’t expect it to light up!&gt; The content in Section 2.3 is based on the Seeed Studio grove.py documentation:https://github.com/Seeed-Studio/grove.py/blob/master/doc/README.md . Step 1: Find the correct pinout for your DHT11 Sensor: . A pinout is a diagram that tells you what each pin does on an electrical device. | Pay close attention to the bullet points in the blue box above; we already know that our sensor has the signal pin on the left. | Three pins to look for: Common Collector Voltage (VCC): The power supply pin, or positive (+) pin. You can use anywhere from 3.3V to 5V with the DHT11. | Sensor, Signal or Data: The pin that sends the data to the Raspberry Pi. If an “S” is present on the DHT11, it is the pin closest to the “S”. | Ground (GND): The ground pin, or negative (-) pin. Typically connected using a black-coloured wire. | . | Here’s a good pinout to use: | . . DHT11 pinout reference:https://components101.com/sensors/dht11-temperature-sensor . Step 2: Find the correct pinout for the Raspberry Pi 4 Model B GPIO pins: . We will need to connect the DHT11 to the GPIO pins of the Raspberry Pi | We put the Grove Base HAT on top of the Raspberry Pi’s GPIO pins, so now we need to use the Grove Base HAT’s GPIO pins | The Grove Base HAT has the same pinout as the Raspberry Pi beneath it | Important Note: Each GPIO pin has both a pin number and a name. Test codes use the name. | Here’s a good pinout to use: | . . Raspberry Pi 4 GPIO pinout reference:https://linuxhint.com/gpio-pinout-raspberry-pi/ . Step 3: Wire the sensor to the Raspberry Pi&#8217;s GPIO Pins. Use one of two methods, depending on the wires you have available: . Method 1: (Easiest) Using three female-female wires . Wire each sensor pin directly to its GPIO pin destination: Attach one female end of each wire to the pins on the sensor | Attach the other female end of each wire to the correct GPIO pin on the Raspberry Pi | . | You can use the two pinout sketches above to determine which pins should be connected to each other | Your setup should look something like this: | . . Method 2: Using three male-female wires . Put the sensor into the solderless breadboard. It should be inserted into one of the lettered rows, such as the “a” row | Put the male end of each wire into the breadboard. Keep in mind: Each sensor pin is connected to all of the breadboard holes in the same column (numbered on the breadboard) on that side of the breadboard | In other words, you can plug the wire in anywhere inside the coloured box shown on the breadboard in the sketch below | You may need to stagger the wires on the breadboard; plug them in so that they are in the correct (numbered) column but are not in the same (lettered) row | . | Attach the female end of each wire to the correct GPIO pin on the Raspberry Pi | Your setup should look something like this: | . . Step 4: Gather the test code: . Gather the test code from the reference below, under “Temperature &amp; Humidity Sensor (DHT11)” . Find the test code in the Seeed Studio grove.py documentation:https://github.com/Seeed-Studio/grove.py/blob/master/doc/README.md . | Modify the code slightly so that it matches the code below: . | . # Based on code from &quot;Temperature &amp; Humidity Sensor (DHT11)&quot; section here: https://github.com/Seeed-Studio/grove.py/blob/master/doc/README.md import time from seeed_dht import DHT dht11 = DHT(&quot;11&quot;, 4) # Type, GPIO pin for signal cable while True: humi, temp = dht11.read() print(&#39;DHT{0}, humidity {1:.1f}%, temperature {2:.1f}*&#39;.format(dht11.dht_type, humi, temp)) # print(f&quot;Temp: {temp}&quot;) time.sleep(1) . Use Secure Copy (SCP) to copy it into the “Code” folder on the Raspberry Pi | . Step 5: Run the test code: . Turn your Raspberry Pi on | Connect to the Raspberry Pi via SSH | Navigate to the “Code” folder using cd Code in the terminal | Run the test code by typing python3 filename.py into the terminal | . Your DHT11 is successfully connected if it gives you non-zero values for temperature and humidity. . Sensor Accuracy:The DHT11 can only give values with an accuracy of zero decimal places. You may notice that the test code prints values that end in “.0” - this is because the data has been formatted. . . Phase 3: Making Sense of the Data . You will need: . A computer | The Raspberry Pi 4 Setup with DHT11 and DHT20 Sensors (from Phase 2) | . Estimated Time Required: 3 Hours . 3.1: Installing Extra Libraries . The code for Phase 3 will require us to install some extra libraries: Pandas, which will allow us to easily store the data in different forms, and Matplotlib, which will allow us to create graphs of the data. Follow the steps below: . Step 1: Connect to the Raspberry Pi via SSH. . Step 2: Install Pandas by typing sudo apt-get install python3-pandas into the Terminal and hitting Enter. If a message appears about disk space and it asks you if you want to continue, type Y for &quot;Yes&quot; and hit Enter. . Step 3: Install Matplotlib by typing sudo apt install python3-matplotlib into the Terminal and hitting Enter. . We will also use the Time and Datetime libraries, but these come built-in and we don’t need to install them. . 3.2: Writing the Data Collection Code . Now, we need to write the code that will collect the temperature and humidity data. I called my script “T_H_data_collector”. . I’m a big fan of laying out what I want a script to do before I start writing it. Here is what the code should do: . Gather data from the DHT11 sensor | Gather data from the DHT20 sensor | Store all data in a CSV file | CSV file should be added to when new data is gathered and not overwrite old data | Generate an exception if a sensor is not responding | . To allow us to see the data in real time as the code runs, it would also be a good idea to: . Print each line of data to the terminal when it is collected | . In essence, I combined the previous scripts used to test each sensor and then added the exception handling and data storage code. Here’s my code, but you should try to generate a similar result on your own: . # Current Version: v2-3, June 19, 2022 # References: # DHT11 data collection code is from grove.py documentation: https://github.com/Seeed-Studio/grove.py/blob/master/doc/README.md # DHT20 data collection code is from user ultracold on StackExchange: https://raspberrypi.stackexchange.com/questions/133457/how-can-rpi4b-use-python-to-talk-to-the-i2c-dht20-sht20-temperature-and-humidi # Instructions: # Run via Raspberry Pi terminal using command: python3 T_H_data_collector_v1.py # Stop code using Ctrl + C or Command + C # Changes from v2-2: # - Added an if-else statement so that the header of the DataFrame is not written to the CSV file every single time # - Removed import of csv library (no longer needed) import time import pandas as pd from datetime import datetime, date import smbus from seeed_dht import DHT import os.path # Exception class will stop the code if we cannot connect to either sensor class ConnectionError(Exception): &quot;&quot;&quot;Exception raised when a sensor is not connected or responding to test code.&quot;&quot;&quot; pass # Using a function to write each line of the CSV file containing temperature and humidity data def write_line(): &quot;&quot;&quot; Write a line of data to a CSV file. Data is collected by one DHT11 and one DHT20 temperature and humidity sensor. Each line contains: current date, current time, dht11_temp, dht11_humi, dht20_temp, dht20_humi. - Arguments: None - Returns: None &quot;&quot;&quot; # Let&#39;s get data from the DHT11 sensor dht11 = DHT(&quot;11&quot;, 4) # Type, GPIO pin for signal cable # Make sure DHT11 can connect. If not, raise ConnectionError try: dht11_humi, dht11_temp = dht11.read() except: raise ConnectionError(&quot;DHT11 Sensor is not responding. Please check connection.&quot;) # Let&#39;s get data from the DHT20 sensor address = 0x38 # Put your device&#39;s address here i2cbus = smbus.SMBus(1) time.sleep(0.5) # Check that I2C connection was initialized. If not, raise ConncectionError data = i2cbus.read_i2c_block_data(address,0x71,1) if (data[0] | 0x08) == 0: raise ConnectionError(&quot;Initialization Error. Please check connection.&quot;) i2cbus.write_i2c_block_data(address,0xac,[0x33,0x00]) time.sleep(0.1) # Make sure DHT20 can connect. If not, raise ConnectionError try: data = i2cbus.read_i2c_block_data(address,0x71,7) except: raise ConnectionError(&quot;DHT20 Sensor is not responding. Please check connection.&quot;) # Format the DHT20 data so it makes sense to us Traw = ((data[3] &amp; 0xf) &lt;&lt; 16) + (data[4] &lt;&lt; 8) + data[5] dht20_temp = 200*float(Traw)/2**20 - 50 Hraw = ((data[3] &amp; 0xf0) &gt;&gt; 4) + (data[1] &lt;&lt; 12) + (data[2] &lt;&lt; 4) dht20_humi = 100*float(Hraw)/2**20 # list of date, time --&gt; Need to be converted into list format dates = [] dates.append(date.today()) times = [] times.append(datetime.now().strftime(&quot;%H:%M:%S&quot;)) # Save the dictionary of lists into a Pandas DataFrame dict = {&quot;Date&quot;: dates, &quot;Time&quot;: times, &quot;DHT11 Temp&quot;: dht11_temp, &quot;DHT11 Humi&quot;: dht11_humi, &quot;DHT20 Temp&quot;: dht20_temp, &quot;DHT20 Humi&quot;: dht20_humi} df = pd.DataFrame(dict) # Print current line of data to the terminal print(df.iloc[0]) # Write data to CSV file. # If the file already exists, append to the file without the header &quot;Date, Time, DHT11 Temp, ...&quot;. # If the file does not already exist, a new file will be created and the header &quot;Date, Time, DHT11 Temp, ...&quot; will be written to the file along with the data. if os.path.exists(&quot;DHT_data.csv&quot;): with open(&quot;DHT_data.csv&quot;, &quot;a&quot;, newline=&quot;&quot;) as file: # &quot;a&quot; ensures you append to the CSV, not overwrite it df.to_csv(file, index=False, header=False) else: with open(&quot;DHT_data.csv&quot;, &quot;a&quot;, newline=&quot;&quot;) as file: df.to_csv(file, index=False) if __name__ == &quot;__main__&quot;: while True: write_line() . I had to try several different versions of the code to get the result I wanted. The general procedure of how I collected the data is: . Get data from sensors . | Format data as needed . | Store data in a list (of length 1) . | Combine all lists into a dictionary containing the Date, Time, DHT11 Temp, DHT11 Humi, DHT20 Temp, and DHT20 Humi for that instant. There is only one data point per category. . | Write the data to the CSV file “DHT_data.csv”: . If the file already exists, append to the file without the header &quot;Date, Time, DHT11 Temp, DHT11 Humi, DHT20 Temp, DHT20 Humi&quot;. . | If the file does not already exist, a new file will be created and the header &quot;Date, Time, DHT11 Temp, ...&quot; will be written to the file along with the data. . Try It Yourself: Try to make the code above more efficient or simpler; there are many different ways to write data to a CSV file, and the method used above could be improved. . | . | 3.3: Writing the Statistics and Graphing Code . In another file, I wrote the code used to process the data and represent it in a meaningful way. I called this file “data_stats_graphs.py”. Whenever I needed to import this code into another file, I used the line import data_stats_graphs as dsg. . The code achieves two main goals: . Graph the data: Graph the values collected by both sensors and shade in the difference between these values. Create two graphs – one for temperature and one for humidity – and save each as a PNG file. . | Give a meaningful statistic on the data: Calculate the average percent difference between the values from two sensors for both temperature and humidity data. . | The overall structure of the code is explained in this infographic: . . Here is the code: . # FINAL VERSION -- Currently in Use on R.Pi (June 20, 2022) import matplotlib.pyplot as plt import pandas as pd def get_data(filename: str): &quot;&quot;&quot; Gather all data from the CSV file containing DHT11 and DHT20 temperature and humidity data. Sort data into lists. Arguments: - filename: (str) Name of CSV file containing DHT11 and DHT20 data Returns: - labels: (list of strings) List containing date, time information of the form &quot;Date, Time&quot; - dht11_temp: (list of floats) List containing DHT11 temperature data - dht11_humi: (list of floats) List containing DHT11 humidity data - dht20_temp: (list of floats) List containing DHT20 temperature data - dht20_humi: (list of floats) List containing DHT20 humidity data &quot;&quot;&quot; # Set up all data as lists df = pd.read_csv(filename) datelabels = df.iloc[:,0] timelabels = df.iloc[:,1] # Get labels for the x-axis of the graphs; has the form &quot;Date, Time&quot; labels = [] for i in range(len(datelabels)): labels.append(f&quot;{datelabels[i]}, {timelabels[i]}&quot;) # Get lists for temperature data dht11_temp = pd.DataFrame(df.iloc[:,2]) dht20_temp = pd.DataFrame(df.iloc[:,4]) # Get lists for humidity data dht11_humi = pd.DataFrame(df.iloc[:,3]) dht20_humi = pd.DataFrame(df.iloc[:,5]) return labels, dht11_temp, dht11_humi, dht20_temp, dht20_humi def line_graph_temp(filename: str): &quot;&quot;&quot; Generates a PNG image of a Matplotlib graph for the DHT11 and DHT20 temperature data. Graph is a scatterplot with lines connecting discrete data points. Region between sets of data is shaded. Arguments: - filename: (str) Name of CSV file containing data Returns: None &quot;&quot;&quot; # Get all date-time labels and temp, humi data labels, dht11_temp, dht11_humi, dht20_temp, dht20_humi = get_data(filename) # Convert DataFrames to List format dht11_temp_list = list(dht11_temp.iloc[:,0]) dht11_humi_list = list(dht11_humi.iloc[:,0]) dht20_temp_list = list(dht20_temp.iloc[:,0]) dht20_humi_list = list(dht20_humi.iloc[:,0]) # Create figure object fig1 = plt.figure() # Plot as a continuous line with dots at each data point plt.plot(labels, dht11_temp_list, &#39;-o&#39;, label=&#39;DHT11 Sensor&#39;, color=&#39;dodgerblue&#39;) plt.plot(labels, dht20_temp_list, &#39;-o&#39;, label=&#39;DHT20 Sensor&#39;, color=&#39;red&#39;) # Fill between the curves plt.fill_between(labels, dht11_temp_list, dht20_temp_list, color=&#39;thistle&#39;) # Set axis labels, title and legend plt.xlabel(&#39;Date, Time Recorded&#39;) plt.ylabel(&#39;Temperature (Degrees Celsius)&#39;) plt.title(&#39;Comparing Temperature Readings of Two Electronic Sensors&#39;) plt.legend() # Rotate text on x-axis plt.xticks(rotation = 90) # Save as PNG fig1.savefig(&#39;static/line_graph_temp.png&#39;, bbox_inches=&#39;tight&#39;) def line_graph_humi(filename: str): &quot;&quot;&quot; Generates a PNG image of a Matplotlib graph for the DHT11 and DHT20 humidity data. Graph is a scatterplot with lines connecting discrete data points. Region between sets of data is shaded. Arguments: - filename: (str) Name of CSV file containing data Returns: None &quot;&quot;&quot; # Get all date-time labels and temp, humi data labels, dht11_temp, dht11_humi, dht20_temp, dht20_humi = get_data(filename) # Convert DataFrames to List format dht11_temp_list = list(dht11_temp.iloc[:,0]) dht11_humi_list = list(dht11_humi.iloc[:,0]) dht20_temp_list = list(dht20_temp.iloc[:,0]) dht20_humi_list = list(dht20_humi.iloc[:,0]) # Create figure object fig2 = plt.figure() # Plot as a continuous line with dots at each data point plt.plot(labels, dht11_humi_list, &#39;-o&#39;, label=&#39;DHT11 Sensor&#39;, color=&#39;dodgerblue&#39;) plt.plot(labels, dht20_humi_list, &#39;-o&#39;, label=&#39;DHT20 Sensor&#39;, color=&#39;red&#39;) # Fill between the curves plt.fill_between(labels, dht11_humi_list, dht20_humi_list, color=&#39;thistle&#39;) # Set axis labels, title and legend plt.xlabel(&#39;Date, Time Recorded&#39;) plt.ylabel(&#39;Relative Humidity (%)&#39;) plt.title(&#39;Comparing Relative Humidity Readings of Two Electronic Sensors&#39;) plt.legend() # Rotate text on x-axis plt.xticks(rotation = 90) # Save as PNG fig2.savefig(&#39;static/line_graph_humi.png&#39;, bbox_inches=&#39;tight&#39;) def avg_percent_diff_temp(filename:str): &quot;&quot;&quot; Finds the average percent difference between all DHT11 and DHT20 temperature data. Arguments: - filename: (str) Name of CSV file containing data Returns: - average: (float) Average percent difference between all DHT11 and DHT20 temperature data - avg_statement: (str) String containing statement about calculated average, for display purposes &quot;&quot;&quot; # Get all date-time labels and temp, humi data labels, dht11_temp, dht11_humi, dht20_temp, dht20_humi = get_data(filename) # Calculate the percent difference between each data point rects = [] for i in range(len(dht11_temp)): calc = (abs(float(dht11_temp.iloc[i,0]) - float(dht20_temp.iloc[i,0]))) / ((float(dht11_temp.iloc[i,0]) + float(dht20_temp.iloc[i,0])) / 2) * 100 rects.append(calc) # Find average of all percent differences and round to 3 decimal places average = round((sum(rects) / len(rects)), 3) # Create an easy-to-print statement summarizing the result # avg_statement = f&quot;Average Percent Difference Between DHT11 and DHT20 Sensors (Temperature): {average}%&quot; return average def avg_percent_diff_humi(filename:str): &quot;&quot;&quot; Finds the average percent difference between all DHT11 and DHT20 humidity data. Arguments: - filename: (str) Name of CSV file containing data Returns: - average: (float) Average percent difference between all DHT11 and DHT20 humidity data - avg_statement: (str) String containing statement about calculated average, for display purposes &quot;&quot;&quot; # Get all date-time labels and temp, humi data labels, dht11_temp, dht11_humi, dht20_temp, dht20_humi = get_data(filename) # Calculate the percent difference between each data point rects = [] for i in range(len(dht11_humi)): calc = (abs(float(dht11_humi.iloc[i,0]) - float(dht20_humi.iloc[i,0]))) / ((float(dht11_humi.iloc[i,0]) + float(dht20_humi.iloc[i,0])) / 2) * 100 rects.append(calc) # Find average of all percent differences and round to 3 decimal places average = round((sum(rects) / len(rects)), 3) # Create an easy-to-print statement summarizing the result # avg_statement = f&quot;Average Percent Difference Between DHT11 and DHT20 Sensors (Temperature): {average}%&quot; return average filename = &quot;DHT_data.csv&quot; . Observations:- The data used in this code is stored in several Pandas DataFrames. However, you need to convert the data to list format for the graphing functions because the data needs to be one-dimensional.- Pandas.DataFrame.iloc was a very useful tool for selecting specific rows or columns of Pandas DataFrame data. See the documentation for more details: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html . . Phase 4: Putting it All Together . We have finally reached the part of this project where we can see our work and share it with others! This involves implementing a web application that we can use to show our new statistics and graphs over a network. . A web application is an application software (i.e. Gmail, Google Docs, Microsoft Office 365, etc.) that runs on a network (for example, your Wi-Fi network at home). . This is also sometimes called a web server, which is a different, but related, concept. Web servers can accept and fulfill HTTP GET and POST requests while also representing static data. Static data might be images, files, or text – generally things that don’t regularly change. . Web applications are a way to represent both static and dynamic data. Dynamic data changes over time, and the web app can be used to reflect these changes in real time. . For the purpose of this section, we will use “web application” and “web server” interchangeably. . 4.1: Structure of Files . It is important to use the organization of files as shown below. The functions of many of these files will be explained in the remainder of Phase 4. . . 4.2: Installing Flask . We will use the Flask library to implement our web app. Flask may already be installed on the Raspberry Pi, but we need to be sure. Follow the steps below: . Connect to the Raspberry Pi via SSH. . | In the Terminal, type sudo pip3 install flask and hit Enter. . | If Flask was already installed, the Raspberry Pi will tell you so. . 4.3: Setting Up the Flask App . I wrote my web application in a file called “web_server.py”. You can use this code (below) as a starting point: . from flask import Flask, render_template import data_stats_graphs as dsg app = Flask(__name__) # Static Route: # if someone requests the root route, execute the following (i.e. what the page shows when nothing or / is typed in the address bar after localhost:5000) @app.route(&quot;/&quot;) def index(): # Generate PNG Graphs for the Data dsg.line_graph_temp(dsg.filename) dsg.line_graph_humi(dsg.filename) # Template Method: return render_template(&#39;index.html&#39;, t_avg_percent_diff=dsg.avg_percent_diff_temp(dsg.filename), h_avg_percent_diff=dsg.avg_percent_diff_humi(dsg.filename)) # Have the HTML code ready as a template and ask flask to read it back to the user # Templates separate the HTML from the logic and allow you to easily adjust content if __name__ == &quot;__main__&quot;: app.debug = True # When we run the server, will run debug mode. Will automatically relaunch server when we change the code! app.run(host=&quot;0.0.0.0&quot;) # Tells web server to listen on all network interfaces. Allows web server to be viewed by other devices on the same network. . Here is a quick breakdown of what is happening, in case you aren’t familiar with Flask apps: . app = Flask(__name__) . Initializing the Flask app. . @app.route(&quot;/&quot;) def index(): ... . The default (root) route for the web server. When you access the web server using http://[IP Address]:[Port #] or http://[IP Address]:[Port #]/, whatever page we put inside of the index() function will show up. . dsg.line_graph_temp(dsg.filename) dsg.line_graph_humi(dsg.filename) . Create the PNG graphs of the data using the data_stats_graphs.py file we created in Phase 3. These PNGs will be saved to the destination we specified in each line_graph_temp() or line_graph_humi() function (the “static” folder). . return render_template(&#39;index.html&#39;, t_avg_percent_diff=dsg.avg_percent_diff_temp(dsg.filename), h_avg_percent_diff=dsg.avg_percent_diff_humi(dsg.filename)) # Have the HTML code ready as a template and ask flask to read it back to the user # Templates separate the HTML from the logic and allow you to easily adjust content . This part looks more complicated than it is. If we only had return render_template(&#39;index.html&#39;), this would load the HTML page onto the screen when the root route is accessed. All of the statements after this, like t_avg_percent_diff=dsg.avg_percent_diff_temp(dsg.filename) is just a way to load Python data into the HTML page. These lines are written in the form variable_name_in_HTML_page=python_variable. . if __name__ == &quot;__main__&quot;: app.debug = True # When we run the server, will run debug mode. Will automatically relaunch server when we change the code! app.run(host=&quot;0.0.0.0&quot;) # Tells web server to listen on all network interfaces. Allows web server to be viewed by other devices on the same network. . Run the web server when we run the code. Also run debug mode, which will automatically reload the server when we make changes to the code. This lets us see changes without constantly killing the server and running it again. . We also choose the “host” to be “0.0.0.0”. This tells the web server to listen on all network interfaces, so if we run this code on the Raspberry Pi and then type http://[IP Address of Raspberry Pi]:5000 into the URL bar of a browser (Chrome, Microsoft Edge, Firefox, etc.) of a different computer on the same network, our web server will show up. . If we didn’t include the “host” and instead used the line app.run(), the web server would only be available locally. This means that it could only be accessed on the same computer running the code. It would show up under the IP address 127.0.0.1, which allows the computer to connect and communicate with itself. This is also known as localhost, and we would need to type http://localhost:5000 into the URL of a browser to see the web server. . You may be wondering what the “5000” is. This is the default port number – a computer networking endpoint. You can change the port number if you like; instructions can be found in the Flask documentation. . If this seems confusing, I like to think of the IP addresses and port numbers this way: The IP address is like the name of your street and the port number is like your house number. If someone wanted to go to your house, they would need both to find it. So if one computer wants to “talk” to another, it needs both the IP address of the other computer and the port number to use. It’s not a perfect analogy, but it helped me understand concepts that can seem very abstract. . 4.4: Creating the HTML Page . The HTML page is what will be displayed when we access the web app, and we will use HTML code to make this happen. I did this in a file called “index.html”, which is loaded into the web app using the return render_template(…) line from web_server.py. The code is found below: . &lt;!-- Author: Christina Kampel --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Go, Go, Gadget!&lt;/title&gt; &lt;!-- Information we want to show on the App Tab --&gt; &lt;style&gt; .column{ width:50%; float:left; } .row::after{ content: &quot;&quot;; clear: both; display: table; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Go, Go, Gadget!&lt;/h1&gt; &lt;h2&gt;Raspberry Pi Weather Stations for the Absolute Beginner&lt;/h2&gt; &lt;p&gt;Christina Kampel&lt;br&gt; Digital Engineering Fellowship&lt;br&gt; University of Calgary&lt;br&gt; Spring 2022&lt;br&gt; &lt;/p&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;column&quot;&gt; &lt;img src=&quot;/static/line_graph_temp.png&quot; alt=&quot;Line Graph of Temperature Data&quot; style=&quot;float:left; width:100%&quot;&gt; &lt;/div&gt; &lt;div class=&quot;column&quot;&gt; &lt;img src=&quot;/static/line_graph_humi.png&quot; alt=&quot;Line Graph of Relative Humidity Data&quot; style=&quot;float:left; width:100%&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt; Average Percent Difference Between DHT11 and DHT20 Sensors (Temperature): &lt;b&gt;{{ t_avg_percent_diff }}&lt;/b&gt;%&lt;br&gt; Average Percent Difference Between DHT11 and DHT20 Sensors (Relative Humidity)): &lt;b&gt;{{ h_avg_percent_diff }}&lt;/b&gt;%&lt;br&gt; &lt;/p&gt; &lt;/body&gt; &lt;/html&gt; . Some key points to note: . The content within the &lt;title&gt; tag appears on the tab of the browser you are using to view the page. . | The content within the &lt;style&gt; tag is used to format the two graphs on the same line, side-by-side. Without this content, the images appear one after the other on two separate lines. . | The content within the &lt;style&gt; tag is written in CSS (Cascading Style Sheet) format. CSS files are often a separate file that is linked within the HTML file and used to format the HTML page (layouts, colours, fonts, etc.). More information about CSS files is available online. . | . Now that we have completed all of our project goals, make sure you Secure Copy the files onto the Raspberry Pi and organize them in the structure shown in 4.1. You are now ready to use your Raspberry Pi Weather Station! . 4.5: Running the Raspberry Pi Weather Station . To show off all your hard work, follow the steps below! . Ensure your personal computer and the Raspberry Pi are on the same network. . | Connect to the Raspberry Pi via SSH. . | If needed, gather data from your DHT11 and DHT20 sensors, run the T_H_data_collector.py file on the Raspberry Pi. The Raspberry Pi should be connected to both sensors. . | Start the web application by running the web_server.py file on the Raspberry Pi. . | View the web application by opening a web browser on your personal computer and typing http://[IP Address of Raspberry Pi]:5000/ into the address bar. The web page, graphs, and statistics will appear! . | . Thank You For Reading! . I hope you enjoyed this project as much as I did. If you are curious about other projects you can try with a Raspberry Pi, I highly recommend reading the inspiration for this project: Creative Projects with Raspberry Pi by Kirsten Kearney and Will Freeman (ISBN: 978-1-4197-2500-5). . . Image Sources . Raspberry Pi 4 Model B Image: https://www.raspberrypi.com/products/raspberry-pi-4-model-b/ . | Grove Base HAT Pinout: https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/ . | DHT11 Image: https://components101.com/sensors/dht11-temperature-sensor . | . .",
            "url": "https://de-fellows.github.io/RexCoding/python/raspberry%20pi/matplotlib/graphing%20data/temperature%20and%20humidity/data%20sensors/dht11/dht20/grove%20base%20hat/flask/html/2022/06/18/Go-Go-Gadget.html",
            "relUrl": "/python/raspberry%20pi/matplotlib/graphing%20data/temperature%20and%20humidity/data%20sensors/dht11/dht20/grove%20base%20hat/flask/html/2022/06/18/Go-Go-Gadget.html",
            "date": " • Jun 18, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Federated Learning (Data Scientist)",
            "content": "Published by by Leo Wei . Before reading the rest of this blog, make sure you have the Federated Learning (Data Owner) open side by side. . Table of Contents: . What is federated learning? Tools that made federated learning possible | . | Installation | Pysyft Duet (Data scientist) Duet Basics | MNIST with Duet Part 1: Connect to Remote Duet Server | Part 2: Setting up Model and Data | Part 3: Training | Part 4: Inference | . | . | Where to next | . What is federated learning? . In the world of evergrowing data in every industry, data is becoming more scarce due to security and privacy reasons. This makes our jobs as data scientists harder as companies and institutions are holding onto their data for security and competitive reasons. Nowadays, a lot of important data are sensitive personal information, things like health, and happiness, etc. Our ability to solve problems is limited because we can&#39;t access the existing data. . Federated learning is a machine learning setting where multiple clients(data owners) can come together and solve a machine learning problem, under the coordination of a central server(data scientist). Each data owner&#39;s data is stored locally, and will not be access without direct permission. Instead of traditionally training on one machine locally, the network is sent to all clients and trained on multiple clients simultaneously. After training, the machine learning model would aggregate the model updates from the trained model from the clients. . There are many situations in which federated learning can be used to solve problems. One use case of this is in the healthcare industry: Breast cancer is a something that is faced by 1 in 8 woman. It is actually very treatable if it is detected early enough in a mammogram. However, this is where the problem lies. In detection, there is a 1 in 4 chance that the radiologist will give false positive or false negative, and with AI, the detection accuracy is even worse with the accuracy being 1 in 3 false positive or false negative. This is most likely due to our models not having enough training data, the amount of training data we have is less than &lt;0.1% of the world&#39;s mammography images. These data we need are stored across thousands of organizations, and acquiring data from each organization is extremely difficult as some organizations will protect patients&#39; privacy not mentioning the bureaucracy involved in signing contracts and risk management with thousands of different companies and organizations. . Federated learning could tackle this problem by having a massive federated data network, each data center(hospital, research center, etc) would act as a client. We, the data scientist is able to send our machine learning model to each client, and have the client train the model locally, and finally update the global model by exchanging the weighted average of the weights. (FedAvg Algorithm) . . Advantages of federated learning . Data never leaves the owner&#39;s device, privacy of sensitive data is stored. | Federated learning allows devices like cell phones to train collectively, thus saving computation and memory on the server, data scientist&#39;s side. | Data owners are more comfortable with sharing their data, and leading to better machine learning models. | . Limitations of federated learning . Communication, latency is often the bottleneck for federated learning. | Variability in client hardware, it is often the case that after each round of training, the server will have to wait for the slower devices to report back with their trained weights. These stragglers often slow down the network, often times, the network just drop the stragglers, but is that a good approach? Does that mean the model will cater more towards people with faster phones? | . Tools that made federated learning possible . 1. Remote execution . Remote execution is a core tool used in federated learning. Instead of downloading the data from the clients and then performing machine learning on it, remote execution allows you to use the client&#39;s data without their data leaving their devices. . 2. Search and example data . If we are executing functions remotely, how can we do data science without seeing the data? With tools such as sample data, we can feature engineer the data without actually seeing the full data. We can request from the data owners to allow us to see a small sub sample of the data in order for us to get a better understanding of the data. . 3. Differential privacy . How do we query again a database without revealing too much information about its privacy data? Our goal is to achieve perfect privacy, meaning that the output of our query is the same between this database and any identical database with one row removed or replaced. However, achieving this is incredibly difficult and the way in which we attempt to achieve this is by adding a certain level of noise to the data. . 4. Secure multi-party computation . The idea of secure multi-party computation is that multiple people can combine their private inputs to compute a function, without revealing their inputs to each other. . In the following example, we will look at one of the most popular library for federated learning Pysyft. Developed by openmined, pysyft was developed with the goal of secure and private machine learning. The Pysyft library is meant for you to write code that is capable of computing on data not owned on your local machine. In the following demo, we will be exploring the tool of remote execution. . Installation . Before we dive into federated learning, let&#39;s install the necessary packages. . 1. Install Conda environment . conda create --name duet python=3.8 Don&#39;t forget to activate your environment conda activate duet . 2. Install necessary packages . Inside your folder, create a txt file named &#39;requirements.txt&#39; Then copy and past the following inside the txt file numpy aiortc cryptography dataclasses dpcontracts flask forbiddenfruit&gt;=0.1.3 loguru matplotlib nest_asyncio packaging pandas protobuf pydagogy PyNaCl requests scikit-learn seaborn sqlitedict statsmodels typeguard typing-extensions # backport to older python 3 websockets jupyter Jinja2&lt;3.0 Afterwards, we can install the requirements by running the following command . pip install -r requirements.txt . 3. Install Pysyft . pip install syft==0.5.0 . If you have errors . ImportError: cannot import name &#39;soft_unicode&#39; from &#39;markupsafe&#39; Resolve this by python -m pip install markupsafe==2.0.1 | If you have the warning of CrytographyDeprecationWarning, you can ignore it for now. | . Pysyft Duet (Data Scientist) . A peer-to-peer tool developed on top of the PySyft. It allows the data owner to expose their data to the data scientist, and the data scientist can manipulate the data through a zero-knowledge access mechanism. As data owners, you have the right to decide whether to allow the manipulation of data, you can deny or approve requests from the data scientists. As data scientists, you can develop new insights and train your model using the data owned by the data owners. . Duet was used to demonstrate federated learning with PySyft without being deployed in the PyGrid ecosystem. . To start, both the data owner and the data scientist will have to talk to one of the open grid network nodes hosted on AWS by OpenMined. The node will introduce the service to each other behind a firewall and help them connect peer to peer. . | The data owner need to first connect initiate and launch the duet server. . | With the server ID, the data scientist can join the duet session. This will give the data scientist a duet client id. . | The data owner will then need to enter the client id to complete the setup process. . | If all goes well, the data scientist and the data owner should be connected now. . | Duet Basics . As the Data Scientist, you want to perform data science on data that is sitting in the Data Owner&#39;s Duet server in their Notebook. . In order to do this, we must run the code that the Data Owner sends us, which importantly includes their Duet Session ID. The code will look like this, importantly with their real Server ID. . import syft as sy duet = sy.duet(&#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;) This will create a direct connection from my notebook to the remote Duet server. Once the connection is established all traffic is sent directly between the two nodes. . Copy and paste the code or Server ID that the Data Owner gives you and run it in the cell below. It will return your Client ID which you must send to the Data Owner to enter into Duet so it can pair your notebooks. . Make sure that the network_url you use is chosen from https://raw.githubusercontent.com/OpenMined/OpenGridNodes/master/network_address . Step 2. Establish Connection with Data Owner . import syft as sy duet = sy.join_duet(&quot;00eec93acc58f144d78a365705d42223&quot;, network_url=&quot;http://ec2-18-218-7-180.us-east-2.compute.amazonaws.com:5000/&quot;) . 🎤 🎸 ♪♪♪ Joining Duet ♫♫♫ 🎻 🎹 ♫♫♫ &gt; DISCLAIMER: Duet is an experimental feature currently in beta. ♫♫♫ &gt; Use at your own risk. &gt; ❤️ Love Duet? Please consider supporting our community! &gt; https://github.com/sponsors/OpenMined ♫♫♫ &gt; Punching through firewall to OpenGrid Network Node at: ♫♫♫ &gt; http://ec2-18-218-7-180.us-east-2.compute.amazonaws.com:5000/ ♫♫♫ &gt; ♫♫♫ &gt; ...waiting for response from OpenGrid Network... ♫♫♫ &gt; DONE! ♫♫♫ &gt; STEP 1: Send the following Duet Client ID to your duet partner! ♫♫♫ &gt; Duet Client ID: 3406364123dfde0c6e7394b2167a9ef9 ♫♫♫ &gt; ...waiting for partner to connect... . /opt/anaconda3/envs/duet/lib/python3.9/site-packages/aiortc/rtcdtlstransport.py:211: CryptographyDeprecationWarning: This version of cryptography contains a temporary pyOpenSSL fallback path. Upgrade pyOpenSSL now. _openssl_assert(lib.SSL_CTX_use_certificate(ctx, self._cert._x509) == 1) # type: ignore /opt/anaconda3/envs/duet/lib/python3.9/site-packages/aiortc/rtcdtlstransport.py:186: CryptographyDeprecationWarning: This version of cryptography contains a temporary pyOpenSSL fallback path. Upgrade pyOpenSSL now. value=certificate_digest(self._cert._x509), # type: ignore . ♫♫♫ &gt; CONNECTED! . The duet variable is your reference to remote operations including supported libraries like torch. . Step 3. Go to Data Owner Notebook &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Step 4. Let&#39;s Search and Create Pointer to Data . We can search for available data with their meta data(tags, decription and object type) with the following: . duet.store.pandas . ID Tags Description object_type . 0 &lt;UID: 2550b41ead684a24ac87a5dced4c5c6d&gt; | [grades] | This is a list of the grades of 6 people | &lt;class &#39;torch.Tensor&#39;&gt; | . We can create a pointer to the data in the duet store. Note that this is the reference to the data, not the actual data. . data_ptr = duet.store[0] . Now, let&#39;s do some computation remotely . average_grade = data_ptr.float().mean() . After we have done the computation, let&#39;s try and get the result from the data owner&#39;s server. . try: average_grade.get() except Exception: print(Exception) . [2022-06-19T16:37:24.260967-0600][CRITICAL][logger]][15013] You do not have permission to .get() Object with ID: &lt;UID: 0e6d0efcb06441db9d958e2006f5cbc8&gt;Please submit a request. . &lt;class &#39;Exception&#39;&gt; . Looks like we need to request for permission from the data owner. We can do this by using the .request with your reasoning inside. . average_grade.request(reason = &quot;please, I need it&quot;) . Step 5. Go to Data Owner Notebook &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Step 6. Let&#39;s try to get data from Data Owner . try: average_grade.get() except Exception: print(Exception) . [2022-06-19T16:37:35.877293-0600][CRITICAL][logger]][15013] You do not have permission to .get() Object with ID: &lt;UID: 0e6d0efcb06441db9d958e2006f5cbc8&gt;Please submit a request. . &lt;class &#39;Exception&#39;&gt; . Looks like our request didn&#39;t go through, let&#39;s create a new request with a better reasoning. . average_grade.request( reason = &quot;I am a data scientist and I need to know the average of the students&#39; grades for my analysis&quot; ) . Step 7. Go to Data Owner Notebook &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Step 8. Get Result Data . We can check if there are still outstanding requests by running the following block . duet.requests.pandas . . Looks like our request went through, now let&#39;s get the data . avg = average_grade.get() print(avg) . tensor(81.1667) . Step 9. Go to Data Owner Notebook &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Step 10. Machine Learning with Duet MNIST . MNIST with Duet . Part 1: Connect to Remote Duet Server (Done above) . Part 2: Setting up Model and Data . import torch import torchvision . Note that here, instead of traditionally inheriting from the nn.Module, we inherit from sy.Module, and we also need to pass in a variable called torch_ref when we constuct this network, the torch_ref will be used internally for any calls that would normally be to torch. . class SyNet(sy.Module): def __init__(self, torch_ref): super(SyNet, self).__init__(torch_ref=torch_ref) self.conv1 = self.torch_ref.nn.Conv2d(1, 32, 3, 1) self.conv2 = self.torch_ref.nn.Conv2d(32, 64, 3, 1) self.dropout1 = self.torch_ref.nn.Dropout2d(0.25) self.dropout2 = self.torch_ref.nn.Dropout2d(0.5) self.fc1 = self.torch_ref.nn.Linear(9216, 128) self.fc2 = self.torch_ref.nn.Linear(128, 10) def forward(self, x): x = self.conv1(x) x = self.torch_ref.nn.functional.relu(x) x = self.conv2(x) x = self.torch_ref.nn.functional.relu(x) x = self.torch_ref.nn.functional.max_pool2d(x, 2) x = self.dropout1(x) x = self.torch_ref.flatten(x, 1) x = self.fc1(x) x = self.torch_ref.nn.functional.relu(x) x = self.dropout2(x) x = self.fc2(x) output = self.torch_ref.nn.functional.log_softmax(x, dim=1) return output . local_model = SyNet(torch) . args = { &quot;batch_size&quot;: 64, &quot;test_batch_size&quot;: 1000, &quot;epochs&quot;: 3, &quot;lr&quot;: 0.01, &quot;gamma&quot;: 0.7, &quot;no_cuda&quot;: False, &quot;dry_run&quot;: False, &quot;seed&quot;: 42, &quot;log_interval&quot;: 10, &quot;save_model&quot;: True, } . Now we can send our local model to our partner&#39;s Duet server . model = local_model.send(duet) . We can create an alias for our partner&#39;s torch called remote_torch, we do this so we can refer to the local torch as torch and any operations we want to do remotely as remote_torch. Remeber that the return values from remote_torch are Pointers, not the actual objects themselves. Keep in mind that you cannot mix the pointers with local torch objects. . remote_torch = duet.torch . has_cuda = False has_cuda_ptr = remote_torch.cuda.is_available() has_cuda = bool(has_cuda_ptr.get( request_block=True, reason=&quot;To run test and inference locally&quot;, timeout_secs=20, # change to something slower )) print(has_cuda) use_cuda = not args[&quot;no_cuda&quot;] and has_cuda # now we can set the seed remote_torch.manual_seed(args[&quot;seed&quot;]) device = remote_torch.device(&quot;cuda&quot; if use_cuda else &quot;cpu&quot;) print(f&quot;Data Owner device is {device.type.get()}&quot;) . False Data Owner device is cpu . if has_cuda: model.cuda(device) else: model.cpu() . Get parameters, setup an optimizer and scheduler just like you would do in Pytorch . params = model.parameters() . optimizer = remote_torch.optim.Adadelta(params, lr=args[&quot;lr&quot;]) . scheduler = remote_torch.optim.lr_scheduler.StepLR(optimizer, step_size=1, gamma=args[&quot;gamma&quot;]) . Next we need a training loop so we can improve our remote model. Since we want to train on remote data we should first check if the model is remote since we will be using remote_torch in this function. To check if a model is local or remote simply use the .is_local attribute. . def train(model, torch_ref, train_loader, optimizer, epoch, args, train_data_length): # + 0.5 lets us math.ceil without the import train_batches = round((train_data_length / args[&quot;batch_size&quot;]) + 0.5) print(f&quot;&gt; Running train in {train_batches} batches&quot;) if model.is_local: print(&quot;Training requires remote model&quot;) return model.train() for batch_idx, data in enumerate(train_loader): data_ptr, target_ptr = data[0], data[1] optimizer.zero_grad() output = model(data_ptr) loss = torch_ref.nn.functional.nll_loss(output, target_ptr) loss.backward() optimizer.step() loss_item = loss.item() train_loss = duet.python.Float(0) # create a remote Float we can use for summation train_loss += loss_item if batch_idx % args[&quot;log_interval&quot;] == 0: local_loss = None local_loss = loss_item.get( reason=&quot;To evaluate training progress&quot;, request_block=True, timeout_secs=5 ) if local_loss is not None: print(&quot;Train Epoch: {} {} Loss: {:.4}&quot;.format(epoch, batch_idx, local_loss)) else: print(&quot;Train Epoch: {} {} ?&quot;.format(epoch, batch_idx)) if batch_idx &gt;= train_batches - 1: print(&quot;batch_idx &gt;= train_batches, breaking&quot;) break if args[&quot;dry_run&quot;]: break . def test_local(model, torch_ref, test_loader, test_data_length): # download remote model if not model.is_local: local_model = model.get( request_block=True, reason=&quot;test evaluation&quot;, timeout_secs=5 ) else: local_model = model # + 0.5 lets us math.ceil without the import test_batches = round((test_data_length / args[&quot;test_batch_size&quot;]) + 0.5) print(f&quot;&gt; Running test_local in {test_batches} batches&quot;) local_model.eval() test_loss = 0.0 correct = 0.0 with torch_ref.no_grad(): for batch_idx, (data, target) in enumerate(test_loader): output = local_model(data) iter_loss = torch_ref.nn.functional.nll_loss(output, target, reduction=&quot;sum&quot;).item() test_loss = test_loss + iter_loss pred = output.argmax(dim=1) total = pred.eq(target).sum().item() correct += total if args[&quot;dry_run&quot;]: break if batch_idx &gt;= test_batches - 1: print(&quot;batch_idx &gt;= test_batches, breaking&quot;) break accuracy = correct / test_data_length print(f&quot;Test Set Accuracy: {100 * accuracy}%&quot;) . local_transform_1 = torchvision.transforms.ToTensor() # this converts PIL images to Tensors local_transform_2 = torchvision.transforms.Normalize(0.1307, 0.3081) # this normalizes the dataset # compose our transforms local_transforms = torchvision.transforms.Compose([local_transform_1, local_transform_2]) from syft.util import get_root_data_path # we will configure the test set here locally since we want to know if our Data Owner&#39;s # private training dataset will help us reach new SOTA results for our benchmark test set test_kwargs = { &quot;batch_size&quot;: args[&quot;test_batch_size&quot;], } test_data = torchvision.datasets.MNIST(str(get_root_data_path()), train=False, download=True, transform=local_transforms) test_loader = torch.utils.data.DataLoader(test_data,**test_kwargs) test_data_length = len(test_loader.dataset) print(test_data_length) . 10000 . remote_torchvision = duet.torchvision transform_1 = remote_torchvision.transforms.ToTensor() # this converts PIL images to Tensors transform_2 = remote_torchvision.transforms.Normalize(0.1307, 0.3081) # this normalizes the dataset remote_list = duet.python.List() # create a remote list to add the transforms to remote_list.append(transform_1) remote_list.append(transform_2) # compose our transforms transforms = remote_torchvision.transforms.Compose(remote_list) # The DO has kindly let us initialise a DataLoader for their training set train_kwargs = { &quot;batch_size&quot;: args[&quot;batch_size&quot;], } train_data_ptr = remote_torchvision.datasets.MNIST(str(get_root_data_path()), train=True, download=True, transform=transforms) train_loader_ptr = remote_torch.utils.data.DataLoader(train_data_ptr,**train_kwargs) . # so we can pass that to our training loop and know when to stop def get_train_length(train_data_ptr): train_data_length = len(train_data_ptr) return train_data_length try: if train_data_length is None: train_data_length = get_train_length(train_data_ptr) except NameError: train_data_length = get_train_length(train_data_ptr) print(f&quot;Training Dataset size is: {train_data_length}&quot;) . Training Dataset size is: 60000 . Part 3: Training . import time #args[&quot;dry_run&quot;] = True # comment to do a full train print(&quot;Starting Training&quot;) for epoch in range(1, args[&quot;epochs&quot;] + 1): epoch_start = time.time() print(f&quot;Epoch: {epoch}&quot;) # remote training on model with remote_torch train(model, remote_torch, train_loader_ptr, optimizer, epoch, args, train_data_length) # local testing on model with local torch test_local(model, torch, test_loader, test_data_length) scheduler.step() epoch_end = time.time() print(f&quot;Epoch time: {int(epoch_end - epoch_start)} seconds&quot;) if args[&quot;dry_run&quot;]: break print(&quot;Finished Training&quot;) . if args[&quot;save_model&quot;]: model.get( request_block=True, reason=&quot;test evaluation&quot;, timeout_secs=5 ).save(&quot;./duet_mnist.pt&quot;) . Part 4: Inference . Now we can use our model to do inference either remotely or locally. . import matplotlib.pyplot as plt def draw_image_and_label(image, label): fig = plt.figure() plt.tight_layout() plt.imshow(image, cmap=&quot;gray&quot;, interpolation=&quot;none&quot;) plt.title(&quot;Ground Truth: {}&quot;.format(label)) def prep_for_inference(image): image_batch = image.unsqueeze(0).unsqueeze(0) image_batch = image_batch * 1.0 return image_batch . def classify_local(image, model): if not model.is_local: print(&quot;model is remote try .get()&quot;) return -1, torch.Tensor([-1]) image_tensor = torch.Tensor(prep_for_inference(image)) output = model(image_tensor) preds = torch.exp(output) local_y = preds local_y = local_y.squeeze() pos = local_y == max(local_y) index = torch.nonzero(pos, as_tuple=False) class_num = index.squeeze() return class_num, local_y . def classify_remote(image, model): if model.is_local: print(&quot;model is local try .send()&quot;) return -1, remote_torch.Tensor([-1]) image_tensor_ptr = remote_torch.Tensor(prep_for_inference(image)) output = model(image_tensor_ptr) preds = remote_torch.exp(output) preds_result = preds.get( request_block=True, reason=&quot;To see a real world example of inference&quot;, timeout_secs=10 ) if preds_result is None: print(&quot;No permission to do inference, request again&quot;) return -1, torch.Tensor([-1]) else: # now we have the local tensor we can use local torch local_y = torch.Tensor(preds_result) local_y = local_y.squeeze() pos = local_y == max(local_y) index = torch.nonzero(pos, as_tuple=False) class_num = index.squeeze() return class_num, local_y . import random total_images = test_data_length # 10000 index = random.randint(0, total_images) print(&quot;Random Test Image:&quot;, index) count = 0 batch = index // test_kwargs[&quot;batch_size&quot;] batch_index = index % int(total_images / len(test_loader)) for tensor_ptr in test_loader: data, target = tensor_ptr[0], tensor_ptr[1] if batch == count: break count += 1 print(f&quot;Displaying {index} == {batch_index} in Batch: {batch}/{len(test_loader)}&quot;) if batch_index &gt; len(data): batch_index = 0 image_1 = data[batch_index].reshape((28, 28)) label_1 = target[batch_index] draw_image_and_label(image_1, label_1) . Random Test Image: 1192 Displaying 1192 == 192 in Batch: 1/10 . class_num, preds = classify_remote(image_1, model) print(f&quot;Prediction: {class_num} Ground Truth: {label_1}&quot;) print(preds) . Prediction: 4 Ground Truth: 9 tensor([1.3907e-04, 5.6652e-04, 2.7458e-04, 4.1249e-03, 7.1542e-01, 3.2733e-03, 2.5919e-03, 2.5418e-02, 2.2922e-02, 2.2527e-01], grad_fn=&lt;SqueezeBackward0&gt;) . local_model = model.get( request_block=True, reason=&quot;To run test and inference locally&quot;, timeout_secs=5, ) . class_num, preds = classify_local(image_1, local_model) print(f&quot;Prediction: {class_num} Ground Truth: {label_1}&quot;) # here we can see the actual output print(preds) . Prediction: 4 Ground Truth: 9 tensor([0.0020, 0.0041, 0.0078, 0.0385, 0.2883, 0.1381, 0.0244, 0.0568, 0.2300, 0.2100], grad_fn=&lt;SqueezeBackward0&gt;) . from PIL import Image, ImageEnhance import PIL.ImageOps import os def classify_url_image(image_url): filename = os.path.basename(image_url) os.system(f&#39;curl -O {image_url}&#39;) im = Image.open(filename) im = PIL.ImageOps.invert(im) # im = im.resize((28,28), Image.ANTIALIAS) im = im.convert(&#39;LA&#39;) enhancer = ImageEnhance.Brightness(im) im = enhancer.enhance(3) print(im.size) fig = plt.figure() plt.tight_layout() plt.imshow(im, cmap=&quot;gray&quot;, interpolation=&quot;none&quot;) # classify local class_num, preds = classify_local(image_1, local_model) print(f&quot;Prediction: {class_num}&quot;) print(preds) . image_url = &quot;https://raw.githubusercontent.com/kensanata/numbers/master/0018_CHXX/0/number-100.png&quot; classify_url_image(image_url) . % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 . (89, 93) Prediction: 4 tensor([0.0007, 0.0016, 0.0049, 0.0291, 0.4118, 0.0332, 0.0071, 0.0289, 0.0928, 0.3899], grad_fn=&lt;SqueezeBackward0&gt;) . 100 4655 100 4655 0 0 3819 0 0:00:01 0:00:01 --:--:-- 3840 . Where to go next? . https://courses.openmined.org/ OpenMined(PySyft). This is where I learned most of the federated learning material, and they have a great series on private AI technologies. Highly recommend. . | https://flower.dev/ Flower Another federated learning framework. . | https://www.tensorflow.org/federated Tensorflow Federated. Integrates very nicely with Tensorflow. | . Acknowledgement . I would like to use this last section by thanking the support of my professor Yves Pauchard, and the DE Followship group. As well as the OpenMined Organization for innovating and building technology for the future, their work has inspired me to pursue more research and learning in the field of federated learning and I am extremely thankful. . &lt;/div&gt; .",
            "url": "https://de-fellows.github.io/RexCoding/2022/06/09/MNIST_Data_Scientist.html",
            "relUrl": "/2022/06/09/MNIST_Data_Scientist.html",
            "date": " • Jun 9, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Federated Learning (Data Owner)",
            "content": "Published by by Leo Wei . Before reading the rest of this blog, make sure you have the Federated Learning (Data Scientist) open side by side. . Pysyft Duet (Data Owner) . As a data owner, you want someone else to perform data science on data that you own, and you also want to protect this data by not give them the entirety of your data. To do this, we can load our data into our local duet server. To begin the process, you must launch a Duet session and help your Duet partner (data scientist) connect to this server. . Duet Basics . Make sure that the network_url you use is chosen from https://raw.githubusercontent.com/OpenMined/OpenGridNodes/master/network_address . Step 1. Initiate Duet Connection . import syft as sy duet = sy.launch_duet(network_url=&quot;http://ec2-18-218-7-180.us-east-2.compute.amazonaws.com:5000&quot;) . 🎤 🎸 ♪♪♪ Starting Duet ♫♫♫ 🎻 🎹 ♫♫♫ &gt; DISCLAIMER: Duet is an experimental feature currently in beta. ♫♫♫ &gt; Use at your own risk. &gt; ❤️ Love Duet? Please consider supporting our community! &gt; https://github.com/sponsors/OpenMined ♫♫♫ &gt; Punching through firewall to OpenGrid Network Node at: ♫♫♫ &gt; http://ec2-18-218-7-180.us-east-2.compute.amazonaws.com:5000 ♫♫♫ &gt; ♫♫♫ &gt; ...waiting for response from OpenGrid Network... ♫♫♫ &gt; DONE! ♫♫♫ &gt; Duet Server ID: 00eec93acc58f144d78a365705d42223 ♫♫♫ &gt; STEP 1: Send the following code to your Duet Partner! import syft as sy duet = sy.duet(&#34;00eec93acc58f144d78a365705d42223&#34;) ♫♫♫ &gt; STEP 2: Ask your partner for their Client ID and enter it below! ♫♫♫ &gt; Duet Partner&#39;s Client ID: 3406364123dfde0c6e7394b2167a9ef9 ♫♫♫ &gt; Connecting... . /opt/anaconda3/envs/duet/lib/python3.9/site-packages/aiortc/rtcdtlstransport.py:211: CryptographyDeprecationWarning: This version of cryptography contains a temporary pyOpenSSL fallback path. Upgrade pyOpenSSL now. _openssl_assert(lib.SSL_CTX_use_certificate(ctx, self._cert._x509) == 1) # type: ignore /opt/anaconda3/envs/duet/lib/python3.9/site-packages/aiortc/rtcdtlstransport.py:186: CryptographyDeprecationWarning: This version of cryptography contains a temporary pyOpenSSL fallback path. Upgrade pyOpenSSL now. value=certificate_digest(self._cert._x509), # type: ignore . ♫♫♫ &gt; CONNECTED! ♫♫♫ &gt; DUET LIVE STATUS * Objects: 18 Requests: 0 Messages: 159124 Request Handlers: 1 . Step 2. Go to Data Scientist Notebook . After we have established connection between the data owner and the data scientist. Let&#39;s upload some data to the Duet server . Step 3. Create Data and Upload to Duet Server . import torch as th . grade_data = th.tensor([98, 78, 83, 88, 67, 73]) grade_data = grade_data.tag(&quot;grades&quot;) grade_data = grade_data.describe(&quot;This is a list of the grades of 6 people&quot;) . # server, note that the data is still on the owner&#39;s machine and cannot be viewed or access # without the permission from the data owner grade_data_pointer = grade_data.send(duet, pointable = True) . [2022-06-19T16:37:24.257117-0600][CRITICAL][logger]][15016] You do not have permission to .get() Object with ID: &lt;UID: 0e6d0efcb06441db9d958e2006f5cbc8&gt;Please submit a request. [2022-06-19T16:37:24.258016-0600][CRITICAL][logger]][15016] You do not have permission to .get() Object with ID: &lt;UID: 0e6d0efcb06441db9d958e2006f5cbc8&gt;Please submit a request. . Step 4. Go to Data Scientist Notebook . Step 5. Check for Requests from Data Scientist . duet.requests.pandas . Requested Object&#39;s tags Reason Request ID Requested Object&#39;s ID Requested Object&#39;s type . 0 [grades, float, mean] | please, I need it | &lt;UID: 16cb1d6c39024a87acf1a29dd1f3d9d7&gt; | &lt;UID: 0e6d0efcb06441db9d958e2006f5cbc8&gt; | | . duet.requests[0].deny() . [2022-06-19T16:37:35.873523-0600][CRITICAL][logger]][15016] You do not have permission to .get() Object with ID: &lt;UID: 0e6d0efcb06441db9d958e2006f5cbc8&gt;Please submit a request. [2022-06-19T16:37:35.874204-0600][CRITICAL][logger]][15016] You do not have permission to .get() Object with ID: &lt;UID: 0e6d0efcb06441db9d958e2006f5cbc8&gt;Please submit a request. . Step 6. Go to Data Scientist Notebook . Step 7. Request Handling . duet.requests.pandas . Requested Object&#39;s tags Reason Request ID Requested Object&#39;s ID Requested Object&#39;s type . 0 [grades, float, mean] | I am a data scientist and I need to know the a... | &lt;UID: 1faa4d8b428748f3840271919a750a5b&gt; | &lt;UID: 0e6d0efcb06441db9d958e2006f5cbc8&gt; | | . duet.requests[0].request_description . &#34;I am a data scientist and I need to know the average of the students&#39; grades for my analysis&#34; . duet.requests[0].accept() . Step 8. Go to Data Scientist Notebook . Step 9. Getting MNIST Data and Make Add Request Handlers . MNIST with Duet . Part 1: Launch a Duet Server and Connect (Done above) . Part 2: Get data . from syft.util import get_root_data_path import torchvision torchvision.datasets.MNIST(get_root_data_path(), train=True, download=True, transform = torchvision.transforms.Compose([torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))])) torchvision.datasets.MNIST(get_root_data_path(), train=False, download=True, transform = torchvision.transforms.Compose([torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))])) . Dataset MNIST Number of datapoints: 10000 Root location: /Users/leowei/.syft/data Split: Test StandardTransform Transform: Compose( ToTensor() Normalize(mean=(0.1307,), std=(0.3081,)) ) . Part 2: Add Request Handlers . duet.requests.pandas . . duet.store.pandas # duet.requests.add_handler(action = &quot;deny&quot;) . ID Tags Description object_type . 0 &lt;UID: 2550b41ead684a24ac87a5dced4c5c6d&gt; | [grades] | This is a list of the grades of 6 people | &lt;class &#39;torch.Tensor&#39;&gt; | . duet.requests.add_handler(action=&quot;accept&quot;) . /opt/anaconda3/envs/duet/lib/python3.9/site-packages/syft/lib/torch/uppercase_tensor.py:30: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won&#39;t be populated during autograd.backward(). If you indeed want the gradient for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. grad = getattr(obj, &#34;grad&#34;, None) . We have done everything on the data owner&#39;s side, the rest is continued on the data scientist&#39;s notebook Step 10. Go to Data Scientist Notebook .",
            "url": "https://de-fellows.github.io/RexCoding/2022/06/09/MNIST_Data_Owner.html",
            "relUrl": "/2022/06/09/MNIST_Data_Owner.html",
            "date": " • Jun 9, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Reinforcement Learning for Engineers in a Hurry",
            "content": "What is Reinforcement Learning? . Reinforcement Learning (RL) in the context of Machine Learning (ML) is one of the three fundamental ML paradigms. . . To properly answer this question, we first need to dive into the different aspects of RL. . Herein, we will use certain terminology to discuss the nature of RL. It is crucial to understand their meanings and how they distinguish RL from the other branches of ML. To get things started, we will present the notion of an agent existing in an environment. . An environment in the relevant context refers to a space - not necessarily a physical one - that exists and can be interacted with. Interactions with such an environment are called actions and should produce some sort of response that can be percieved by anything existing in that environment. . An agent exists in an environment and is able to percieve it, meaning that any response that the environment produces can be experienced by the agent. More specifically, an intelligent agent (IA) is one who takes non-random actions based on feedback from an environment. This feedback comes in the form of two notions, state and reward, which we will discuss more later. An IA takes said actions in order to reach some desirable end result. They may exhibit learning by adjusting their actions over time, or memory by using past experiences in an environment to adjust their current actions. . Putting these concepts together, RL involves an agent learning to take actions in an environment to reach some goal. . Making a Move . For the purpose of RL, it is necessary to have actions performed in a controlled and measurable manner so that we may use information produced by the environment for the benefit of learning. This is where our step function comes into play. A step function can be thought of as the process of taking an action, and recieving a response. It is best summarized in a diagram. . . We see the aforementioned terms state and reward appearing in this flowchart. The state of the environment embodies some variable that describes the environment and changes over time. For example, humidity may be a state variable of the atmosphere. The reward is some feedback from the environment that characterizes the action taken by the agent. A desirable action outcome recieves a positive reward, while an undesireable outcome recieves a negative reward. . An agent chooses to take an action A on the environment at time t based on the current state S at that same time t. The current action A applied on the environment results in a new state produced at time t+1. As we &#39;take a step,&#39; The new state becomes the current, producing a certain action. The cycle repeats, each being called a step. This results in a continuous feedback loop that allows the agent to exist meaningfully. . Decisions, Decisions . The pertinent question still remains, how does an IA make decisions, or learn to do so? Noteably in the previous section, we had little to say about the reward aspect of the flowchart. This reward is what teaches our IA to make certain decisions. . The &#39;brain&#39; of the IA is the policy network. In essence, this is a mathematical function that takes a set of inputs and maps them to an output space. This function has parameters that can be changed to produce different outputs for a given input set. We can exploit this relationship if we are able to determine how to tune these parameters such that the mapping function always leads our IA to the best output based on its inputs. This is the concept of learning. . More specifically, in RL an IA learns to tune these parameters so that it always makes the best choice for a given environment state. The notion of &#39;best&#39; is where our reward comes in. If an IA recieves a positive reward for an action performed due to an input state, we tune the policy network&#39;s parameters such that the IA is a bit more likely to produce the same action the next time that state comes around. If an IA recieves a negative reward (penalty), we do the opposite and tune so that it is less likely to repeat this behaviour. . The &#39;tuning&#39; process is a vastly complex topic that need not be explained here to grasp the idea of RL. It suffices to know why this tuning happens and how it affects the IA&#39;s behaviour. . The Brain . For the purpose of this tutorial, we will use a Neural Network (NN) as the policy network for our IA. . . Neural networks reflect the way that biological brains are designed (in a very simplified manner, that is). Once again, NNs are realtively complex and will not be explained here, but it suffices to know that they fit the role of a policy network. The NN has tunable parameters (weights, biases), an input layer (for our state) and an output layer (for our action). The weights and biases will be varied according to the reward recieved during learning. . Putting the Pieces Together . All in all, we end up with a diagram that looks like the following. . . The NN takes actions based on the state. When learning, the reward updates the parameters of the NN. . Something to note is that when the agent is not learning, the rewards are out the picture. Rewards are only present when learning, and otherwise, our agent is only able to see the state of the environment. . Training an Intelligent Agent . We will be working in Python, using Keras/Tensorflow as our backbone as well as a reinforcement learning API, Keras-RL. Additionally, to simplify the creation of an environment we will be leveraging OpenAI Gym 1 which presents many simple environments with states, steps, actions, rewards and such already integrated. . 0. Getting Things Ready . First, we need to install any dependencies that we may not already have. . #!pip install numpy #!pip install gym #!pip install pygame #!pip install tensorflow==2.5.0 #!pip install keras #!pip install keras-rl2 #!pip install nnv . . 1. Testing the Environment . We make the necessary imports to get started with the design of our environment. . import gym import random import warnings . . Next, we can start setting up our environment as follows. . env = gym.make(&quot;CartPole-v1&quot;) . For the purpose of this demonstration, I have chosen a simple game as the environment. The CartPole game runs on PyGame, and has the user attempt to balance a leaning pole on a moving cart. . . Let&#39;s learn a bit about our environment. What are the sizes of our state and action spaces? . states = env.observation_space.shape[0] actions = env.action_space.n print(states,actions) . 4 2 . As we can see, our environment has 4 states and 2 possible actions. A bit of digging into the OpenAI Gym documentation and we are able to figure out what these actually are. . . The 4 states are the cart position and velocity, and pole angle and angular velocity. We can see the various boundaries for each of these states in the above tables. For context, the cart position is calculated from the origin and its velocity is the the difference in its position per step. Similarly, the pole angle is measured from the normal to the cart axis and the angular velocity is the change in this angle per step. These 4 states will serve as the input into our policy network. . . Now is probably a good time to mention that a step does not necessarily have to coincide with a unit of real time. As such, velocity in the above states does not involve change per unit time but rather change per step. . . The 2 actions that we can take involve moving the cart in either the positive or negative x direction ([1,0] respectively). These represent the output of our policy network. . Looking into the documentation, the game is bounded by certain rules. We recieve a +1 reward (score) for each step in which the pole is still upright. Upright implies that the pole is within the angle range [-0.2095,0.2095]. The game terminates at a max score of 500, when the pole is no longer upright, or when the cart position exits the limits [-2.4, 2.4] - whichever condition is reached first. . Now, we will attempt to test our environment with a random agent - one which does not have a policy network and makes decisions randomly. . def RandomAgentTest(environment,episodes): total = 0 #Running summation of the score in each game run for episode in range(1, episodes+1): #Run game &#39;episode&#39; number of times state = environment.reset() #reset game environment to the base state done = False #variable holds boolean corresponding to whether game episode is complete or not score = 0 #current episode score, resets to 0 while not done: environment.render() #start our environment action = random.choice([0,1]) #Choose a random action from action space. 1 -&gt; move right, 0 -&gt; move left n_state, reward, done, info = environment.step(action) #Take random action score+=reward #Add reward to cumulative score print(&#39;Episode:{} Score:{}&#39;.format(episode, score)) total = total + score print(&#39;&#39;) print(&#39;Mean score over&#39;,episodes,&#39;episodes --&gt; &#39;,total/episodes) . . RandomAgentTest(env,10) . Episode:1 Score:20.0 Episode:2 Score:14.0 Episode:3 Score:19.0 Episode:4 Score:14.0 Episode:5 Score:17.0 Episode:6 Score:34.0 Episode:7 Score:20.0 Episode:8 Score:43.0 Episode:9 Score:14.0 Episode:10 Score:29.0 Mean score over 10 episodes --&gt; 22.4 . As a frame of reference, this game has a maximum score of 500. As we can see, random actions give a very poor score. . . Now, we will design a policy network for our agent to give it the ability to learn. . 2. Adding Intelligence - Keras NN Model . First, we need to import the necessary resources. . import numpy as np from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense, Flatten from tensorflow.keras.optimizers import SGD from rl.agents import DQNAgent from rl.policy import EpsGreedyQPolicy from rl.memory import SequentialMemory . . Our RL model need not be too complex, as the game that is being tackled is relatively simple. We need the input of the network to accept our 4 states, and we need an output of 2 actions. The action with the higher activation at the network&#39;s output is the action that the agent will perform. . For the hidden (inner) layers of the NN, we will have two dense (fully connected) layers. Each layer will have 12 neurons, with ReLU activation between layers (to prevent the layers from collapsing into a linear function). . model = Sequential() model.add(Flatten(input_shape=(1,states))) #&#39;states&#39; variable holds the number of states of the environment (4 inputs) model.add(Dense(12,activation=&#39;relu&#39;)) #dense -&gt; fully connected layer, relu activation between layers. 12 neurons. model.add(Dense(12, activation=&#39;relu&#39;)) model.add(Dense(actions, activation=&#39;linear&#39;)) #&#39;actions&#39; variable holds the number of actions of the environment (2 outputs) model.summary() . Model: &#34;sequential&#34; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= flatten (Flatten) (None, 4) 0 _________________________________________________________________ dense (Dense) (None, 12) 60 _________________________________________________________________ dense_1 (Dense) (None, 12) 156 _________________________________________________________________ dense_2 (Dense) (None, 2) 26 ================================================================= Total params: 242 Trainable params: 242 Non-trainable params: 0 _________________________________________________________________ . For a visual representation of the above NN: . from nnv import NNV layers = [ {&quot;title&quot;:&quot;input n(states)&quot;, &quot;units&quot;: states, &quot;color&quot;: &quot;darkBlue&quot;,&quot;edges_color&quot;:&quot;red&quot;}, {&quot;title&quot;:&quot;hidden 1 n(relu)&quot;, &quot;units&quot;: 12, &quot;edges_color&quot;:&quot;black&quot;}, {&quot;title&quot;:&quot;hidden 2 n(relu)&quot;, &quot;units&quot;: 12, &quot;edges_color&quot;:&quot;red&quot;}, {&quot;title&quot;:&quot;output n(actions)&quot;, &quot;units&quot;: actions,&quot;color&quot;: &quot;darkBlue&quot;}, ] NNV(layers).render() . . (&lt;Figure size 432x288 with 1 Axes&gt;, &lt;AxesSubplot:&gt;) . 3. Training our Model/Agent . Now that we are at the training stage, we will expain some key topics necessary to having a general understanding of the process. . 3A. Preparation . i) Replay Memory . Replay memory is essentially a catalogue of past states and actions kept when training our agent. 2 Keras-RL provides a convenient class for storing this information, which can be used as follows. . memory = SequentialMemory(limit=50000, window_length=1) . The &#39;limit&#39; hyperparameter specifies the size of memory made available during training. When we surpass 50000 experiences, the oldest will be replaced by the newest. . This begs the question - why do we need memory when training? . When we train our IA, it easy to build sequential correlation between actions and states. In simpler terms, if we train our agent on states as they come with time (sequentially), we run the risk of teaching our agent to perform actions soleley based on time, rather than information recieved from the environment. As such, we sample batches of experiences from our memory at random when training our agent as to break this correlation. 2 . A great analogy here would be a comparison between 2 hypothetical students taking a multiple choice math exam. Student A gets hold of the answer key, and decides to remember the answer to every question based on its number in order. Student B decides to study the content, and learn how to answer each question based on what is asked. Student A here reflects training our agent without memory, relying solely on the sequential order of the questions to know the corresponding answer. Student B understands what each question presents, and represents training with memory. . ii) Policy . Policy in Keras-RL defines the strategy we use to train our NN. We will be using a simple ε-greedy policy which seeks to balance exploration and exploitation. 2 . policy = EpsGreedyQPolicy(eps=0.3) . The &#39;eps&#39; hyperparameter controls the probability of exploration, and therefore eps=0.3 implies a 30% probability of exploration. . Exploration involves the agent taking random actions in its environment, allowing it to find new &#39;paths&#39; of actions that it can take to optimize the reward. . Exploitation involves the agent taking actions with the highest expected reward, allowing it to follow &#39;paths&#39; of actions that yielded greater reward in previous episodes. . iii) Deep Q-Network Agent . We will now put these concepts into play during our training. . agent = DQNAgent(model=model, memory=memory, policy=policy ,nb_actions=actions, nb_steps_warmup=1000) . First, we must create our agent object with references to our model, memory, and policy as seen above. We can define the number of actions that our agent can take through the &#39;nb_actions&#39; parameter. Furthermore, the parameter &#39;nb_steps_warmup&#39; allows us to define how many steps our agent should take before we begin to sample from memory for training. . In terms of our optimizer, we will be using Stochastic Gradient Descent (SGD). SGD is the agorithm responsible for adjusting the weights inside of our neural network, details of which we will not go into. Learning Rate (learning_rate) is a hyperparameter that influences the optimization of our NN weights. For a performance metric, we will use mean squared error (mse). . agent.compile(SGD(learning_rate=1e-3), metrics=[&#39;mse&#39;]) . 3B. Training . The next step involves the training of our agent. We will call our .fit() method, which initiates this training. To this method we pass our environment, and give a limit to the number of steps for which we will train. Additionally, we set visualize to False so that our environment is not visible while training, as this would slow down the process. . warnings.filterwarnings(&quot;ignore&quot;, category=DeprecationWarning) warnings.filterwarnings(&quot;ignore&quot;, category=UserWarning) #Suppressing Deprecation &amp; User Warnings agent.fit(env, nb_steps=30000, visualize=False, verbose=1) . Training for 30000 steps ... Interval 1 (0 steps performed) 10000/10000 [==============================] - 70s 7ms/step - reward: 1.0000 179 episodes - episode_reward: 55.531 [9.000, 240.000] - loss: 17.322 - mse: 7884.326 - mean_q: 125.991 Interval 2 (10000 steps performed) 10000/10000 [==============================] - ETA: 0s - reward: 1.000 - 74s 7ms/step - reward: 1.0000 101 episodes - episode_reward: 99.168 [11.000, 327.000] - loss: 18.144 - mse: 7978.776 - mean_q: 126.132 Interval 3 (20000 steps performed) 10000/10000 [==============================] - 74s 7ms/step - reward: 1.0000 done, took 218.268 seconds . &lt;tensorflow.python.keras.callbacks.History at 0x221943ec2b0&gt; . Now that we have our trained agent, we can test our agent&#39;s performance inside of the environment and compare it to our random agent at the beginning of this tutorial. . n_test_episodes = 20 scores = agent.test(env, nb_episodes=n_test_episodes, visualize=0) print(&#39;&#39;) print(&#39;Mean score over&#39;,n_test_episodes,&#39;is &gt; &#39;, np.mean(scores.history[&#39;episode_reward&#39;])) . Testing for 20 episodes ... Episode 1: reward: 227.000, steps: 227 Episode 2: reward: 200.000, steps: 200 Episode 3: reward: 213.000, steps: 213 Episode 4: reward: 196.000, steps: 196 Episode 5: reward: 204.000, steps: 204 Episode 6: reward: 206.000, steps: 206 Episode 7: reward: 204.000, steps: 204 Episode 8: reward: 210.000, steps: 210 Episode 9: reward: 207.000, steps: 207 Episode 10: reward: 210.000, steps: 210 Episode 11: reward: 190.000, steps: 190 Episode 12: reward: 207.000, steps: 207 Episode 13: reward: 225.000, steps: 225 Episode 14: reward: 211.000, steps: 211 Episode 15: reward: 194.000, steps: 194 Episode 16: reward: 193.000, steps: 193 Episode 17: reward: 219.000, steps: 219 Episode 18: reward: 208.000, steps: 208 Episode 19: reward: 200.000, steps: 200 Episode 20: reward: 218.000, steps: 218 Mean score over 20 is &gt; 207.1 . RandomAgentTest(env,20) . Episode:1 Score:12.0 Episode:2 Score:17.0 Episode:3 Score:20.0 Episode:4 Score:62.0 Episode:5 Score:25.0 Episode:6 Score:17.0 Episode:7 Score:30.0 Episode:8 Score:20.0 Episode:9 Score:19.0 Episode:10 Score:15.0 Episode:11 Score:13.0 Episode:12 Score:26.0 Episode:13 Score:27.0 Episode:14 Score:27.0 Episode:15 Score:48.0 Episode:16 Score:15.0 Episode:17 Score:16.0 Episode:18 Score:81.0 Episode:19 Score:18.0 Episode:20 Score:20.0 Mean score over 20 episodes --&gt; 26.4 . If we observe the above output cells, we can see that our trained agent averaged a score of 207.1 over 20 episodes, while our random agent averaged 26.4 - a huge difference! . We can see how our IA performs on a single run of the game below. . agent.test(env, nb_episodes=1, visualize=1) . Testing for 1 episodes ... Episode 1: reward: 210.000, steps: 210 . &lt;tensorflow.python.keras.callbacks.History at 0x22190bc3e50&gt; . . Note the ability of the agent to keep the pole balanced for a significantly longer period of time when contrasted to the random agent. This difference reflects the fact that we now have an agent with some hint of useful decision making. . Wrapping Up . It is with some caution that we can say that our trained agent is now &#39;smart enough&#39; to play this game. . As we can infer, RL has numerous applications that extend from such a simplistic environment and can find usefulness in a large scope of fields. It is a field with diverse reach that finds a place for itself in a modern world concerned with automation. Simple environments like the one presented here can serve as an analogue to more real-world problems. Having given this introduction, I implore the reader to further their knowledge into Reinforcement Learning. . Hopefully this read has made you wonder how you can apply RL to other tasks similar to the one presented here. A great stepping stone would be to look into the OpenAI Gym Documentation and explore the environemnets available its users, which range from Atari game recreations to simple 3D locomotion simulations. Try your hand at creating an agent to traverse these environments and along the way explore the various tweaks that can be applied during training to maximize your score! . 1. OpenAI Gym Documentation ↩ . 2. Reinforcement Learning: An Introduction, Second Edition by Richard S. Sutton and Andrew G. Bartow ↩ .",
            "url": "https://de-fellows.github.io/RexCoding/machine%20learning/reinforcement%20learning/neural%20networks/2022/05/31/Reinforcement-Learning.html",
            "relUrl": "/machine%20learning/reinforcement%20learning/neural%20networks/2022/05/31/Reinforcement-Learning.html",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://de-fellows.github.io/RexCoding/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post21": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://de-fellows.github.io/RexCoding/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "We are students, faculty and friends of the Schulich School of Engineering at the University of Calgary. . Blog posts by Digital Engineering Fellows created during the Spring 2022 term were supported by a Schulich School of Engineering - Engineering Education Innovation Award. . If you have questions or suggestions for improvements, please contact the author of the blog post directly, open an issue (or pull request) in the github repository. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://de-fellows.github.io/RexCoding/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://de-fellows.github.io/RexCoding/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}